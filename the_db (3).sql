-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Mar 18, 2023 at 04:00 AM
-- Server version: 10.4.27-MariaDB
-- PHP Version: 8.2.0

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `the_db`
--

-- --------------------------------------------------------

--
-- Table structure for table `activations`
--

CREATE TABLE `activations` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `code` varchar(120) NOT NULL,
  `completed` tinyint(1) NOT NULL DEFAULT 0,
  `completed_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `activations`
--

INSERT INTO `activations` (`id`, `user_id`, `code`, `completed`, `completed_at`, `created_at`, `updated_at`) VALUES
(1, 1, '9OVmpqhghe9UXWeMf6FgPr4l9w2jtqDA', 1, '2023-02-22 12:16:21', '2023-02-22 12:16:21', '2023-02-22 12:16:21');

-- --------------------------------------------------------

--
-- Table structure for table `ads`
--

CREATE TABLE `ads` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `expired_at` datetime DEFAULT NULL,
  `location` varchar(120) DEFAULT NULL,
  `key` varchar(120) NOT NULL,
  `image` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `clicked` bigint(20) NOT NULL DEFAULT 0,
  `order` int(11) DEFAULT 0,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `ads`
--

INSERT INTO `ads` (`id`, `name`, `expired_at`, `location`, `key`, `image`, `url`, `clicked`, `order`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Header ads', '2024-02-22 00:00:00', 'header-ads', 'ELCOODG77A', 'banners/image-3.jpg', 'https://thesky9.com/', 0, 1, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(2, 'Panel ads', '2024-02-22 00:00:00', 'panel-ads', 'RIID2HCDMW', 'banners/image-3.jpg', 'https://thesky9.com/', 0, 1, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(3, 'Top sidebar ads', '2024-02-22 00:00:00', 'top-sidebar-ads', 'PPXQKZUGF1', 'banners/image-1.jpg', 'https://thesky9.com/', 0, 2, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(4, 'Bottom sidebar ads', '2024-02-22 00:00:00', 'bottom-sidebar-ads', 'DBQSHBIWNV', 'banners/image-2.jpg', 'https://thesky9.com/', 0, 3, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(5, 'Custom ads 1', '2024-02-22 00:00:00', 'custom-1', 'IEPJAHSNL8', 'banners/image-4.jpg', 'https://thesky9.com/', 0, 4, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24');

-- --------------------------------------------------------

--
-- Table structure for table `ads_translations`
--

CREATE TABLE `ads_translations` (
  `lang_code` varchar(191) NOT NULL,
  `ads_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `audit_histories`
--

CREATE TABLE `audit_histories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `module` varchar(60) NOT NULL,
  `request` text DEFAULT NULL,
  `action` varchar(120) NOT NULL,
  `user_agent` text DEFAULT NULL,
  `ip_address` varchar(39) DEFAULT NULL,
  `reference_user` int(10) UNSIGNED NOT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_name` varchar(255) NOT NULL,
  `type` varchar(20) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `audit_histories`
--

INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(1, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-22 12:22:28', '2023-02-22 12:22:28'),
(2, 1, 'post', '{\"name\":\"introduction to angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>Introduction to Angular<\\/p><p><strong>What is Framework ?<\\/strong><\\/p><p style=\\\"margin-left:0px;\\\">The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p style=\\\"margin-left:0px;\\\">You can now apply this definition in software engineering and refer to software frameworks as the structure for your software.<\\/p><p style=\\\"margin-left:0px;\\\">A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p style=\\\"margin-left:0px;\\\">A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p style=\\\"margin-left:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'introduction to angular', 'info', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(3, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-23 09:37:06', '2023-02-23 09:37:06'),
(4, 1, 'post', '{\"name\":\"introduction to angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p style=\\\"margin-left:40px;\\\">Introduction to Angular<\\/p><p style=\\\"margin-left:40px;\\\"><strong>What is Framework ?<\\/strong><\\/p><p style=\\\"margin-left:40px;\\\">The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p style=\\\"margin-left:40px;\\\">You can now apply this definition in software engineering and refer to software frameworks as the structure for your software.<\\/p><p style=\\\"margin-left:40px;\\\">A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p style=\\\"margin-left:40px;\\\">A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"save\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'introduction to angular', 'primary', '2023-02-23 09:38:57', '2023-02-23 09:38:57'),
(5, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-23 09:39:13', '2023-02-23 09:39:13'),
(6, 1, 'post', '{\"name\":\"introduction to angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p style=\\\"margin-left:40px;\\\">Introduction to Angular<\\/p><p style=\\\"margin-left:40px;\\\"><strong>What is Framework ?<\\/strong><\\/p><p style=\\\"margin-left:40px;\\\">The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p style=\\\"margin-left:40px;\\\">You can now apply this definition in software engineering and refer to software frameworks as the structure for your software.<\\/p><p style=\\\"margin-left:40px;\\\">A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p style=\\\"margin-left:40px;\\\">A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'introduction to angular', 'primary', '2023-02-23 09:39:51', '2023-02-23 09:39:51'),
(7, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>Introduction to Angular<\\/p><p><strong>What is Framework ?<\\/strong><\\/p><p>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software.<\\/p><p>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 09:40:50', '2023-02-23 09:40:50'),
(8, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>Introduction to Angular<\\/p><p><strong>What is Framework ?<\\/strong><\\/p><p>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.<\\/p><p>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p><strong>What is Angular ?<\\/strong><\\/p><p>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like gmail,. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 10:49:28', '2023-02-23 10:49:28'),
(9, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>Introduction to Angular<\\/p><p><strong>What is Framework ?<\\/strong><\\/p><p>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.<\\/p><p>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p><strong>What is Angular ?<\\/strong><\\/p><p>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 10:49:44', '2023-02-23 10:49:44'),
(10, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>Introduction to Angular<\\/p><p><strong>What is Framework ?<\\/strong><\\/p><p>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/p><p>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.<\\/p><p>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/p><p>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/p><p><strong>What is Angular ?<\\/strong><\\/p><p>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.<\\/p><p>Advantages of Single Page Applications -<\\/p><ul><li>It makes a web application faster and gives the user a reactive experience.<\\/li><li>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.<\\/li><li>If you do need some data from the server, you can load in the background without making the webpage unresponsive.<\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 10:54:04', '2023-02-23 10:54:04'),
(11, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\"><strong>What is Framework ?<\\/strong><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.<\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\"><strong>What is Angular ?<\\/strong><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 0%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-decoration:none;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" title=\\\"JavaScript\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\"><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">JavaScript<\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 0%);font-size:16px;\\\"><span> framework written in <\\/span><\\/span><a style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-decoration:none;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" title=\\\"TypeScript\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\"><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">TypeScript<\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 0%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.<\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">Advantages of Single Page Applications -<\\/span><\\/p><ul><li><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">It makes a web application faster and gives the user a reactive experience.<\\/span><\\/li><li><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.<\\/span><\\/li><li><span style=\\\"color:hsl(0, 0%, 0%);font-size:16px;\\\">If you do need some data from the server, you can load in the background without making the webpage unresponsive.<\\/span><\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 11:21:58', '2023-02-23 11:21:58'),
(12, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><p><span style=\\\"color:hsl(0,0%,0%);font-size:16px;\\\"><span><strong>What is Framework ?<\\/strong><\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,0%);font-size:16px;\\\"><span><strong>What is Angular ?<\\/strong><\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>JavaScript<\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);\\\"> <\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>framework written in <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>TypeScript<\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);\\\"> <\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>Advantages of Single Page Applications -<\\/span><\\/span><\\/p><ul><li><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>It makes a web application faster and gives the user a reactive experience.<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.<\\/span><\\/span><\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 11:25:29', '2023-02-23 11:25:29'),
(13, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span><strong>What is Framework ?<\\/strong>&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.&nbsp;<\\/span><\\/span><\\/p><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"why_do_you_need_a_framework\\\">Why Do You Need a Framework?<\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\">Frameworks in general boost web development efficiency and performance by providing a consistent structure so that <\\/span><a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"developers\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\">developers<\\/span><\\/a><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"> don\\u2019t have to keep rebuilding code from scratch. Frameworks are time savers that offer developers a host of extra features that can be added to software without requiring extra effort.<\\/span><\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span>What is Angular ?&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>JavaScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>framework written in <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>TypeScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Advantages of Single Page Applications -&nbsp;<\\/span><\\/span><\\/p><ul><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It makes a web application faster and gives the user a reactive experience.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 11:29:45', '2023-02-23 11:29:45');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(14, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span><strong>What is Framework ?<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.&nbsp;&nbsp;<\\/span><\\/span><\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">Why Do You Need a Framework?<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Frameworks in general boost web development efficiency and performance by providing a consistent structure so that <\\/span><\\/span><a style=\\\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>developers<\\/span><\\/span> <\\/a><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>don\\u2019t have to keep rebuilding code from scratch. Frameworks are time savers that offer developers a host of extra features that can be added to software without requiring extra effort.<\\/span><\\/span><\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span>What is Angular ?&nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>JavaScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>framework written in <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>TypeScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Advantages of Single Page Applications -&nbsp;&nbsp;<\\/span><\\/span><\\/p><ul><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It makes a web application faster and gives the user a reactive experience.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.&nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"what_are_the_different_angular_versions\\\">What are the Different Angular Versions:&nbsp;<\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">\\u201cAngular\\u201d is the catch-all term for the various framework versions out there. Angular was developed in 2009, and as a result, there have been many iterations.<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">First, there was the original Angular, called Angular 1 and eventually known as <a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"AngularJS\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">AngularJS<\\/a>. Then came Angular 2, 3, 4, 5, until finally, the current version, Angular 14, released on 2022. Each subsequent Angular version improves on its predecessor, fixing bugs, addressing issues, and accommodating increasing complexity of current platforms.<\\/p><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"advantages_of_angular\\\">Advantages of Angular:<\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Many versions of Angular have been released since its inception. All these versions have added to the efficient working of the framework.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"font-size:16px;\\\">1. Custom Components<\\/span><\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular enables users to build their own components that can pack functionality along with rendering logic into reusable pieces. It also plays well with web components.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">2. Data Binding<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular enables users to effortlessly move data from JavaScript code to the view, and react to user events without having to write any code manually.&nbsp;<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">3. Dependency Injection<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular enables users to write modular services and inject them wherever they are needed. This improves the testability and reusability of the same services.&nbsp;<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">4. Testing<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Tests are first-class tools, and Angular has been built from the ground up with testability in mind. You will have the ability to test every part of your application\\u2014which is highly recommended.&nbsp;<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">5. Comprehensive<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular is a full-fledged framework and provides out-of-the-box solutions for server communication, routing within your application, and more.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">6. Browser Compatibility<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular is cross-platform and compatible with multiple browsers. An Angular application can typically run on all browsers (Eg: Chrome, Firefox) and OSes, such as Windows, macOS, and Linux.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 11:41:31', '2023-02-23 11:41:31'),
(15, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span><strong>What is Framework ?<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.&nbsp; &nbsp;<\\/span><\\/span><\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">Why Do You Need a Framework?<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Frameworks in general boost web development efficiency and performance by providing a consistent structure so that <\\/span><\\/span><a style=\\\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>developers <\\/span><\\/span><\\/a><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>don\\u2019t have to keep rebuilding code from scratch. Frameworks are time savers that offer developers a host of extra features that can be added to software without requiring extra effort.&nbsp;<\\/span><\\/span><\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span>What is Angular ?&nbsp; &nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>JavaScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>framework written in <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>TypeScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Advantages of Single Page Applications -&nbsp; &nbsp;<\\/span><\\/span><\\/p><ul><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It makes a web application faster and gives the user a reactive experience.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.&nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ul><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are the Different Angular Versions:&nbsp;<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">\\u201cAngular\\u201d is the catch-all term for the various framework versions out there. Angular was developed in 2009, and as a result, there have been many iterations.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">First, there was the original Angular, called Angular 1 and eventually known as <a style=\\\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">AngularJS<\\/a>. Then came Angular 2, 3, 4, 5, until finally, the current version, Angular 14, released on 2022. Each subsequent Angular version improves on its predecessor, fixing bugs, addressing issues, and accommodating increasing complexity of current platforms.<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">Advantages of Angular:<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Many versions of Angular have been released since its inception. All these versions have added to the efficient working of the framework.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>1. Custom Components<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to build their own components that can pack functionality along with rendering logic into reusable pieces. It also plays well with web components.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">2. Data Binding<\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to effortlessly move data from JavaScript code to the view, and react to user events without having to write any code manually.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">3. Dependency Injection<\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to write modular services and inject them wherever they are needed. This improves the testability and reusability of the same services.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">4. Testing<\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Tests are first-class tools, and Angular has been built from the ground up with testability in mind. You will have the ability to test every part of your application\\u2014which is highly recommended.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">5. Comprehensive<\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular is a full-fledged framework and provides out-of-the-box solutions for server communication, routing within your application, and more.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">6. Browser Compatibility<\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular is cross-platform and compatible with multiple browsers. An Angular application can typically run on all browsers (Ex: Chrome, Firefox) and OSes, such as Windows, macOS, and Linux.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 11:45:06', '2023-02-23 11:45:06');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(16, 1, 'post', '{\"name\":\"Introduction To Angular\",\"slug\":\"introduction-to-angular\",\"slug_id\":\"67\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Introduction to Angular Framework.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span><strong>What is Framework ?<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">Why Do You Need a Framework?<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Frameworks in general boost web development efficiency and performance by providing a consistent structure so that <\\/span><\\/span><a style=\\\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>developers <\\/span><\\/span><\\/a><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>don\\u2019t have to keep rebuilding code from scratch. Frameworks are time savers that offer developers a host of extra features that can be added to software without requiring extra effort.&nbsp;&nbsp;<\\/span><\\/span><\\/p><h2><span style=\\\"color:hsl(0,0%,0%);\\\"><span>What is Angular ?&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Angular is an open-source, <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>JavaScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>framework written in <\\/span><\\/span><a style=\\\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>TypeScript <\\/span><\\/span><\\/a><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is a Framework which allows us to create <u>Single-page Applications<\\/u> <u>[T<\\/u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]<\\/u>.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Advantages of Single Page Applications -&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ul><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It makes a web application faster and gives the user a reactive experience.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are the Different Angular Versions:&nbsp;<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">\\u201cAngular\\u201d is the catch-all term for the various framework versions out there. Angular was developed in 2009, and as a result, there have been many iterations.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">First, there was the original Angular, called Angular 1 and eventually known as <a style=\\\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">AngularJS<\\/a>. Then came Angular 2, 3, 4, 5, until finally, the current version, Angular 14, released on 2022. Each subsequent Angular version improves on its predecessor, fixing bugs, addressing issues, and accommodating increasing complexity of current platforms.<\\/p><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"angular_architecture\\\">Angular Architecture<\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular is a full-fledged <a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"model-view-controller (MVC) framework.\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">model-view-controller (MVC) framework.<\\/a> It provides clear guidance on how the application should be structured and offers bi-directional data flow while providing real DOM.&nbsp;<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">The following are the eight building blocks of an Angular application:&nbsp;<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">1. Modules<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">An Angular app has a root module, named App-Module, which provides the bootstrap mechanism to launch the application.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">2. Components<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Each <a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"component\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">component<\\/a> in the application defines a class that holds the application logic and data. A component generally defines a part of the user interface (UI).<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">3. Templates<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">The Angular template combines the Angular markup with HTML to modify HTML elements before they are displayed. There are two types of data binding:&nbsp;<\\/p><ol><li style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);display:block;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;list-style:decimal;margin-bottom:1rem;margin-left:20px;margin-top:0px;orphans:2;padding:0px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Event binding: Lets your app respond to user input in the target environment by updating your application data.<\\/li><li style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);display:block;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;list-style:decimal;margin-bottom:1rem;margin-left:20px;margin-top:0px;orphans:2;padding:0px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Property binding: Enables users to interpolate values that are computed from your application data into the HTML.<\\/li><\\/ol><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">4. Metadata<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Metadata tells Angular how to process a class. It is used to decorate the class so that it can configure the expected behaviour of a class.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">5. Services<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">When you have data or logic that isn\\u2019t associated with the view but has to be shared across components, a <a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"service\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">service<\\/a> class is created. The class is always associated with the @Injectible decorator.<\\/p><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">6. Dependency Injection<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><a style=\\\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\\\" title=\\\"This feature\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">This feature<\\/a> lets you keep your component classes crisp and efficient. It does not fetch data from a server, validate the user input, or log directly to the console. Instead, it delegates such tasks to the services.<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">Advantages of Angular:<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Many versions of Angular have been released since its inception. All these versions have added to the efficient working of the framework.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>1. Custom Components&nbsp;<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to build their own components that can pack functionality along with rendering logic into reusable pieces. It also plays well with web components.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>2. Data Binding<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to effortlessly move data from JavaScript code to the view, and react to user events without having to write any code manually.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>3. Dependency Injection<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular enables users to write modular services and inject them wherever they are needed. This improves the testability and reusability of the same services.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>4. Testing<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Tests are first-class tools, and Angular has been built from the ground up with testability in mind. You will have the ability to test every part of your application\\u2014which is highly recommended.&nbsp;<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>5. Comprehensive<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular is a full-fledged framework and provides out-of-the-box solutions for server communication, routing within your application, and more.<\\/p><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><span>6. Browser Compatibility<\\/span><\\/span><\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Angular is cross-platform and compatible with multiple browsers. An Angular application can typically run on all browsers (Ex: Chrome, Firefox) and OSes, such as Windows, macOS, and Linux.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-22\",\"publish_time\":\"17:52\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":\"angular-intro.png\",\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 21, 'Introduction To Angular', 'primary', '2023-02-23 12:01:17', '2023-02-23 12:01:17'),
(17, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\">Installing Angular<\\/span><\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217, 229, 243);border-radius:2px;box-sizing:border-box;color:rgb(0, 0, 0);font-family:Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace, serif;font-size:16px;padding:1px 5px;word-break:break-word;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(95, 91, 91);border:5px solid rgb(183, 181, 181);box-sizing:border-box;color:rgb(255, 255, 255);display:inline-block;font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:normal;orphans:2;padding:10px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp><br><samp style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(95, 91, 91);border:5px solid rgb(183, 181, 181);box-sizing:border-box;color:rgb(255, 255, 255);display:inline-block;font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:normal;orphans:2;padding:10px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none !important;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none;\\\" target=\\\"_blank\\\">Node Package Manager<\\/a>) on your local machine.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'info', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(18, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h2><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Node Package Manager<\\/a>) on your local machine.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-23 12:26:27', '2023-02-23 12:26:27'),
(19, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-24 08:46:08', '2023-02-24 08:46:08'),
(20, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-24 08:46:24', '2023-02-24 08:46:24'),
(21, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.<\\/span><\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 08:52:38', '2023-02-24 08:52:38'),
(22, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><pre class=\\\"lang-html s-code-block\\\"><code class=\\\"language-xml hljs\\\">&lt;pre&gt;&lt;code class=\\\"language-pascal\\\"&gt;var i: Integer;\\r\\n    begin\\r\\n        i := 1;\\r\\n    end.&lt;\\/code&gt;&lt;\\/pre&gt;<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 10:24:00', '2023-02-24 10:24:00');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(23, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;word-spacing:0px;\\\"><code class=\\\"language-html\\\">&lt;pre&gt;&lt;code class=\\\"language-pascal\\\"&gt;var i: Integer;\\r\\n    begin\\r\\n        i := 1;\\r\\n    end.&lt;\\/code&gt;&lt;\\/pre&gt;<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 10:27:06', '2023-02-24 10:27:06'),
(24, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp; &nbsp;<\\/span><\\/span><\\/p><div class=\\\"raw-html-embed\\\"><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 10:33:22', '2023-02-24 10:33:22'),
(25, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><div class=\\\"raw-html-embed\\\"><pre><code class=\\\"language-pascal\\\">var i: Integer;\\r\\n    begin\\r\\n        i := 1;\\r\\n    end.<\\/code><\\/pre><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 10:34:07', '2023-02-24 10:34:07'),
(26, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.<\\/span><\\/span><\\/p><p style=\\\"-webkit-text-stroke-width:0px;color:rgb(68, 68, 68);font-family:Roboto, &quot;Helvetica Neue Light&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;Lucida Grande&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:3.2rem;margin:1em 0px;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Install the CLI using the <code style=\\\"background-color:rgba(219, 219, 219, 0.3);border-radius:4px;color:rgb(68, 68, 68);font-family:&quot;Roboto Mono&quot;, monospace;font-size:14.4px;padding:4px;\\\">npm<\\/code> package manager:<\\/p><pre class=\\\"lang-shell prettyprint\\\" style=\\\"align-items:center;display:flex;margin:16px 24px;min-height:32px;position:relative;white-space:pre-wrap;\\\"><span style=\\\"background-color:rgb(68,68,68);color:rgb(23,255,11);\\\"><span class=\\\"pln\\\">npm install <\\/span><span class=\\\"pun\\\">-<\\/span><span class=\\\"pln\\\">g <\\/span><span class=\\\"lit\\\">@angular<\\/span><span class=\\\"pun\\\">\\/<\\/span><span class=\\\"pln\\\">cli<\\/span><\\/span>\\r\\n<\\/pre><div class=\\\"raw-html-embed\\\"><pre><code class=\\\"language-pascal\\\">var i: Integer;\\r\\n    begin\\r\\n        i := 1;\\r\\n    end.<\\/code><\\/pre><\\/div><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 11:16:02', '2023-02-24 11:16:02'),
(27, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"color:rgb(68,68,68);font-family:Roboto, \'Helvetica Neue Light\', \'Helvetica Neue\', Helvetica, Arial, \'Lucida Grande\', sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:3.2rem;word-spacing:0px;\\\">Install the CLI using the <code style=\\\"background-color:rgba(219,219,219,0.3);color:rgb(68,68,68);font-family:\'Roboto Mono\', monospace;font-size:14.4px;\\\">npm<\\/code> package manager:<\\/p><pre class=\\\"lang-shell prettyprint\\\" style=\\\"min-height:32px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);color:rgb(23,255,11);\\\"><span class=\\\"pln\\\">npm install <\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><span class=\\\"pun\\\">-<\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><span class=\\\"pln\\\">g <\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><span class=\\\"lit\\\">@angular<\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><span class=\\\"pun\\\">\\/<\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><span class=\\\"pln\\\">cli<\\/span><span>\\r\\n\\t\\r\\n\\t<\\/span><\\/span>\\r\\n\\t\\r\\n\\t\\r\\n<\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 12:40:44', '2023-02-24 12:40:44'),
(28, 1, 'post', '{\"name\":\"Installation of Angular\",\"slug\":\"installation-of-angular\",\"slug_id\":\"68\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1 style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Installing Angular<\\/h1><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\">Node Package Manager<\\/a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">Open terminal\\/command window and type <code style=\\\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\\\">node -v<\\/code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.<\\/p><p><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">C:\\\\Users\\\\xyz&gt; node -v<\\/samp>&nbsp;<br><samp style=\\\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\\\">v14.18.0<\\/samp><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\\\"external-link\\\" style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" href=\\\"https:\\/\\/nodejs.org\\/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">https:\\/\\/nodejs.org<\\/a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\\\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Node Package Manager<\\/a>) on your local machine.<\\/p><div class=\\\"raw-html-embed\\\"><hr><\\/div><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"color:rgb(68,68,68);font-family:Roboto, \'Helvetica Neue Light\', \'Helvetica Neue\', Helvetica, Arial, \'Lucida Grande\', sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:3.2rem;word-spacing:0px;\\\">Install the CLI using the <code style=\\\"background-color:rgba(219,219,219,0.3);color:rgb(68,68,68);font-family:\'Roboto Mono\', monospace;font-size:14.4px;\\\">npm<\\/code> package manager:<\\/p><pre class=\\\"lang-shell prettyprint\\\" style=\\\"min-height:32px;\\\"><span style=\\\"background-color:rgb(68,68,68);color:rgb(23,255,11);\\\"><span class=\\\"pln\\\">npm install <\\/span><span class=\\\"pun\\\">-<\\/span><span class=\\\"pln\\\">g <\\/span><span class=\\\"lit\\\">@angular<\\/span><span class=\\\"pun\\\">\\/<\\/span><span class=\\\"pln\\\">cli<\\/span><\\/span>\\r\\n<\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-23\",\"publish_time\":\"17:45\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 22, 'Installation of Angular', 'primary', '2023-02-24 12:41:53', '2023-02-24 12:41:53'),
(29, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'info', '2023-02-24 13:06:05', '2023-02-24 13:06:05'),
(30, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 00:06:10', '2023-02-25 00:06:10'),
(31, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 00:31:28', '2023-02-25 00:31:28'),
(32, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 00:31:58', '2023-02-25 00:31:58'),
(33, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(60, 72, 88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;letter-spacing:normal;line-height:1.3;margin-bottom:1.5rem;margin-top:3rem;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><blockquote><p style=\\\"box-sizing:border-box;font-family:Nunito, sans-serif;margin-bottom:36px;margin-top:0px;\\\">It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.<\\/p><\\/blockquote><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\" style=\\\"margin-left:0px;\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\" style=\\\"margin-left:0px;\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\" style=\\\"margin-left:40px;\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\" style=\\\"margin-left:0px;\\\">&nbsp;<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(237, 248, 255);box-sizing:border-box;color:rgb(38, 38, 38);font-family:Poppins;font-size:14px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:24px;margin:15px 0px 0px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.<\\/span><\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(237, 248, 255);box-sizing:border-box;color:rgb(38, 38, 38);font-family:Poppins;font-size:14px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:24px;margin:15px 0px 0px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:27:30', '2023-02-25 01:27:30'),
(34, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><div class=\\\"raw-html-embed\\\"><blockquote style=\\\"background: #f9f9f9; border-left: 10px solid #ccc; margin: 1.5em 10px; padding: 0.5em 10px;\\\">\\r\\n<p>It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.<\\/p>\\r\\n<\\/blockquote><\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:35:04', '2023-02-25 01:35:04');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(35, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><div class=\\\"raw-html-embed\\\"><blockquote style=\\\"background: #f9f9f9;border-left: 10px solid #ccc;margin: 1.5em 10px;padding: 0.5em 10px;\\\">\\r\\n<p>It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.<\\/p>\\r\\n\\t\\r\\n\\t\\r\\n<\\/blockquote><\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:38:06', '2023-02-25 01:38:06'),
(36, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><div class=\\\"raw-html-embed\\\">\\r\\n    <blockquote style=\\\"background: #f9f9f9;\\r\\n    border-left: 10px solid #ccc;\\r\\n    margin: 1.5em 10px;\\r\\n    padding: 0.5em 10px;\\\">\\r\\n        <p>\\r\\n            It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\\r\\n        <\\/p>\\r\\n    <\\/blockquote>\\r\\n<\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:39:59', '2023-02-25 01:39:59'),
(37, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><div class=\\\"raw-html-embed\\\">\\r\\n        \\r\\n    <blockquote class=\\\"special_block\\\">\\r\\n                \\r\\n        <p>\\r\\n                        It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\\r\\n                    \\r\\n        <\\/p>\\r\\n        \\t\\r\\n        \\t\\r\\n            \\r\\n    <\\/blockquote>\\r\\n<\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:43:11', '2023-02-25 01:43:11'),
(38, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><style>\\r\\n.special_block{\\r\\nbackground: #f9f9f9;\\r\\n    border-left: 10px solid #ccc;\\r\\n    margin: 1.5em 10px;\\r\\n    padding: 0.5em 10px;\\r\\n}\\r\\n<\\/style><div class=\\\"raw-html-embed\\\">\\r\\n            \\r\\n        \\r\\n    <blockquote class=\\\"special_block\\\">\\r\\n                        \\r\\n                \\r\\n        <p>\\r\\n                                    It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\\r\\n                                \\r\\n                    \\r\\n        <\\/p>\\r\\n        \\t\\r\\n        \\t\\r\\n                \\t\\r\\n                \\t\\r\\n                    \\r\\n            \\r\\n    <\\/blockquote>\\r\\n<\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:45:26', '2023-02-25 01:45:26'),
(39, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><p style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\">&nbsp;<\\/p><div class=\\\"raw-html-embed\\\">\\r\\n                \\r\\n     <style>\\r\\n.special_block{\\r\\nbackground: #f9f9f9;\\r\\n    border-left: 10px solid #ccc;\\r\\n    margin: 1.5em 10px;\\r\\n    padding: 0.5em 10px;\\r\\n}\\r\\n<\\/style>\\r\\n        \\r\\n    <blockquote class=\\\"special_block\\\">\\r\\n                                \\r\\n                        \\r\\n                \\r\\n        <p>\\r\\n                                                It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\\r\\n                                            \\r\\n                                \\r\\n                    \\r\\n        <\\/p>\\r\\n    <\\/blockquote>\\r\\n<\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:52:27', '2023-02-25 01:52:27'),
(40, 1, 'post', '{\"name\":\"File and Folder structure of Angular.\",\"slug\":\"file-and-folder-structure-of-angular\",\"slug_id\":\"69\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"The file structure of the angular app.\",\"is_featured\":\"0\",\"content\":\"<h4 style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\"><strong>And what are some best practices to avoid a spaghetti mess?<\\/strong><\\/h4><p style=\\\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\\\">&nbsp;<\\/p><div class=\\\"raw-html-embed\\\">\\r\\n                \\r\\n     \\r\\n        \\r\\n    <blockquote class=\\\"special_block\\\" style=\\\"background: #f9f9f9;\\\">\\r\\n                                \\r\\n                        \\r\\n                \\r\\n        <p>\\r\\n                                                It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\\r\\n                                            \\r\\n                                \\r\\n                    \\r\\n        <\\/p>\\r\\n\\t\\r\\n\\t\\r\\n    <\\/blockquote>\\r\\n<\\/div><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-directory-structure.png\\\" alt=\\\"angular-directory-structure.png\\\"><\\/figure><p>&nbsp;<\\/p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><\\/li><\\/ol><h4 class=\\\"fontsize22\\\">&nbsp;<\\/h4><h3 class=\\\"fontsize22\\\">node_modules<\\/h3><p class=\\\"fontsize22\\\">In this folder, you can find all the third-party libraries that the application may rely on.<\\/p><p class=\\\"fontsize22\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-24\",\"publish_time\":\"18:13\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 23, 'File and Folder structure of Angular.', 'primary', '2023-02-25 01:54:37', '2023-02-25 01:54:37'),
(41, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 11:26:27', '2023-02-25 11:26:27'),
(42, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 11:41:20', '2023-02-25 11:41:20'),
(43, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"what_are_angular_components\\\">What are Angular Components ?<\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><h3 style=\\\"margin-left:0px;\\\"><strong>Creating a Component in Angular 8:<\\/strong><\\/h3><div id=\\\"GFG_AD_gfg_mobile_336x280\\\">&nbsp;<\\/div><p style=\\\"margin-left:0px;\\\">To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'info', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(44, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 11:47:27', '2023-02-25 11:47:27'),
(45, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 11:47:28', '2023-02-25 11:47:28'),
(46, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 11:50:44', '2023-02-25 11:50:44'),
(47, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0, 0%, 90%);\\\"><strong>\\u201ccomponent_name\\u201d,<\\/strong><\\/span><span style=\\\"background-color:hsl(0, 0%, 100%);\\\"> in our example it is header so, in that directory there will be 4 new files created.&nbsp;<\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">&lt;component_name&gt;.component.html<\\/span><\\/li><li><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">&lt;component_name&gt;.component.ts<\\/span><\\/li><li><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]<\\/span><\\/li><li><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">&lt;component_name&gt;.spec.ts<\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0, 0%, 100%);\\\">In these newly files we can define the UI, logic of the newly created component.<\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 12:07:57', '2023-02-25 12:07:57'),
(48, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong><\\/span><\\/span> <span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 12:19:13', '2023-02-25 12:19:13'),
(49, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><strong><u>UI of the component<\\/u><\\/strong> \\u2192<\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><strong><u>Logic of the component<\\/u><\\/strong> \\u2192<\\/span><\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:01:36', '2023-02-25 13:01:36');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(50, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:08:44', '2023-02-25 13:08:44'),
(51, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp;&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:09:22', '2023-02-25 13:09:22'),
(52, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:18:11', '2023-02-25 13:18:11'),
(53, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behavior or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192<\\/span><\\/span><\\/p><pre><code class=\\\"language-javascript\\\">\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:42:51', '2023-02-25 13:42:51'),
(54, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behavior or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-javascript\\\">\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:48:39', '2023-02-25 13:48:39'),
(55, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp;&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-javascript\\\">\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 13:58:29', '2023-02-25 13:58:29'),
(56, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-25 22:12:30', '2023-02-25 22:12:30');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(57, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:;letter-spacing:var(--heading-letter-spacing);line-height:;margin:2rem 0px 0.5rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"the_structure_of_an_angular_application\\\"><a style=\\\"box-sizing:border-box;color:var(--text-primary);text-decoration-skip-ink:auto;text-decoration:none;width:fit-content;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:;letter-spacing:var(--heading-letter-spacing);line-height:;margin:2rem 0px 0.5rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"the_decorator\\\"><a style=\\\"box-sizing:border-box;color:var(--text-primary);text-decoration-skip-ink:auto;text-decoration:none;width:fit-content;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">You use the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:;letter-spacing:var(--heading-letter-spacing);line-height:;margin:2rem 0px 0.5rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" id=\\\"the_class\\\"><a style=\\\"box-sizing:border-box;color:var(--text-primary);text-decoration-skip-ink:auto;text-decoration:none;width:fit-content;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">feature.component.ts<\\/code>, where <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">feature<\\/code> is the name of your component. So, you could have files with names such as <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">header.component.ts<\\/code>, <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">signup.component.ts<\\/code>, or <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">feed.component.ts<\\/code>. You create a component with a <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;color:rgb(27, 27, 27);font-family:var(--font-code);font-size:13.328px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;margin:1rem 0px 2rem;orphans:2;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:pre-wrap;widows:2;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 22:17:35', '2023-02-25 22:17:35');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(58, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:400;letter-spacing:normal;line-height:;margin:1rem 0px 2rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><br>This component is called <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">ItemComponent<\\/code>, and its selector is <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:400;letter-spacing:normal;line-height:;margin:1rem 0px 2rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><strong style=\\\"box-sizing:border-box;font-weight:var(--font-body-strong-weight);letter-spacing:0.02rem;\\\">NOTE:<\\/strong> The name of the component above is <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:400;letter-spacing:normal;line-height:;margin:1rem 0px 2rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"the_html_template\\\"><h3 style=\\\"box-sizing:border-box;font:var(--type-heading-h3);letter-spacing:var(--heading-letter-spacing);margin:2rem 0px 0.5rem;scroll-margin-top:var(--sticky-header-height);\\\" id=\\\"the_html_template\\\"><a style=\\\"box-sizing:border-box;color:var(--text-primary);text-decoration-skip-ink:auto;text-decoration:none;width:fit-content;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"box-sizing:border-box;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">To refer to an external HTML file, use the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"the_html_template\\\"><div><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">To write inline HTML, use the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"the_html_template\\\"><div><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"the_html_template\\\"><div><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">The double curly braces instruct Angular to interpolate the contents within them. The value for <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"the_html_template\\\"><div><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"styles\\\"><h3 style=\\\"box-sizing:border-box;font:var(--type-heading-h3);letter-spacing:var(--heading-letter-spacing);margin:2rem 0px 0.5rem;\\\" id=\\\"styles\\\"><a style=\\\"box-sizing:border-box;color:var(--text-primary);text-decoration-skip-ink:auto;text-decoration:none;width:fit-content;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"box-sizing:border-box;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">A component can inherit global styles from the application\'s <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">To include the styles directly in the component decorator, use the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">styles<\\/code> property:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"styles\\\"><div><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">Typically, a component uses styles in a separate file using the <code style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0.125rem 0.25rem;width:fit-content;\\\">styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--code-default);font-family:var(--font-code);font-size:var(--type-smaller-font-size);position:relative;\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"background-color:var(--code-background-block);border-radius:var(--elem-radius);border:1px solid transparent;box-sizing:border-box;font-family:var(--font-code);font-size:var(--type-smaller-font-size);margin:1rem 0px 2rem;overflow-wrap:break-word;padding:1rem 2.5rem 1rem 1rem;white-space:pre-wrap;\\\"><code class=\\\"language-javascript\\\" style=\\\"border-radius:var(--elem-radius);box-sizing:border-box;color:var(--text-primary);font-family:var(--font-code);font-size:var(--type-smaller-font-size);padding:0px;width:fit-content;\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\" aria-labelledby=\\\"styles\\\"><div class=\\\"section-content\\\" style=\\\"box-sizing:border-box;\\\"><p style=\\\"box-sizing:border-box;font:var(--type-article-p);margin:1rem 0px 2rem;\\\">With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(27, 27, 27);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-stretch:;font-style:normal;font-variant-caps:normal;font-variant-east-asian:;font-variant-ligatures:normal;font-variant-numeric:;font-weight:400;letter-spacing:normal;line-height:;margin:1rem 0px 2rem;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 22:26:35', '2023-02-25 22:26:35');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(59, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(68,68,68);font-size:18px;\\\"><span> } <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"margin-left:0px;\\\">Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);padding:3px 5px;\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);padding:3px 5px;\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p style=\\\"margin-left:0px;\\\">The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p style=\\\"margin-left:0px;\\\">&nbsp;<\\/p><p style=\\\"margin-left:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;padding:3px 5px;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p style=\\\"margin-left:0px;\\\">&nbsp;<\\/p><p style=\\\"margin-left:0px;\\\">&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"margin-left:0px;\\\">The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);padding:3px 5px;\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);padding:3px 5px;\\\">import<\\/code> keyword.<\\/p><p style=\\\"margin-left:0px;\\\">Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243, 243, 243);box-sizing:border-box;color:rgb(68, 68, 68);padding:3px 5px;\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3 style=\\\"margin-left:0px;\\\">What are Lifecycle Hooks?<\\/h3><p style=\\\"margin-left:0px;\\\">Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(239, 246, 255);box-sizing:border-box;color:rgb(45, 52, 54);display:inline-block;font-family:Inconsolata, &quot;PT mono&quot;, &quot;Roboto mono&quot;, &quot;Space mono&quot;, monospace;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:20.8px;orphans:2;overflow-wrap:break-word;padding:0px 3px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-break:break-all;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 23:45:18', '2023-02-25 23:45:18');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(60, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-25 23:52:33', '2023-02-25 23:52:33'),
(61, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\\\"><span style=\\\"font-size:17px;\\\">A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.<\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\\\"><span style=\\\"font-size:17px;\\\">We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.<\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\\\"><span style=\\\"font-size:17px;\\\">To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <em style=\\\"box-sizing:border-box;\\\"><i>hooks<\\/i><\\/em>.<\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><p style=\\\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\\\"><span style=\\\"font-size:17px;\\\">The&nbsp;hooks are executed in&nbsp;this order:<\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'info', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(62, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks<\\/span><\\/i><span>.<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><strong>Constructor \\u2192<\\/strong><\\/span><\\/h2><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(22, 22, 22);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;margin:0px;orphans:2;padding:10px 0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);font-size:16px;\\\">Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.<\\/span><\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(22, 22, 22);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;margin:0px;orphans:2;padding:10px 0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);font-size:16px;\\\">At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp;<\\/span><\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(22, 22, 22);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;margin:0px;orphans:2;padding:10px 0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);font-size:16px;\\\">A simple example of the usage of the constructor would be as:<\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(68, 102, 197);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:30px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:1.3;margin:10px 0px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(245, 129, 29);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:24px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:1.2;margin:20px 0px 15px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><u>ngOnChanges()<\\/u><\\/i><\\/span><\\/h3><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(245, 129, 29);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:24px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:1.2;margin:20px 0px 15px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0, 0%, 100%);color:rgb(22,22,22);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object SimpleChanges of the previous and current value of the property.<\\/span><\\/span><\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(245, 129, 29);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:24px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:1.2;margin:20px 0px 15px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"-webkit-text-stroke-width:0px;background-color:rgb(252, 252, 252);box-sizing:border-box;color:rgb(245, 129, 29);font-family:&quot;Segoe UI&quot;, Arial, sans-serif;font-size:24px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:1.2;margin:20px 0px 15px;orphans:2;padding:0px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 02:50:37', '2023-02-26 02:50:37');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(63, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong><\\/span><\\/span><\\/h2><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u><\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);\\\"><strong style=\\\"-webkit-text-stroke-width:0px;box-sizing:border-box;color:rgb(77, 91, 124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:bolder;letter-spacing:normal;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">ngOnInit<\\/strong><\\/span><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"> hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);\\\"><mark style=\\\"-webkit-text-stroke-width:0px;background-color:rgba(242, 201, 76, 0.35);border-radius:8px;box-sizing:border-box;color:inherit;display:inline;font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:calc(1.4em + 1px);orphans:2;padding:0px 2px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">SimpleChanges<\\/mark><\\/span><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"> object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 02:55:34', '2023-02-26 02:55:34'),
(64, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp;&nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp;<\\/span><\\/span><\\/h2><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong><\\/span><\\/span> <span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges<\\/span><\\/span> <span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span>&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 02:58:30', '2023-02-26 02:58:30'),
(65, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-26 07:10:20', '2023-02-26 07:10:20'),
(66, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h2><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp;&nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong> <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span> &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">hk<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 07:12:21', '2023-02-26 07:12:21'),
(67, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h2><ul><li>Constructor is not a lifecycle hook.<\\/li><\\/ul><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp; &nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong> <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span> &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">hk<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 07:13:07', '2023-02-26 07:13:07');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(68, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><ul><li>Constructor is not a lifecycle hook.<\\/li><\\/ul><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp; &nbsp;&nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong> <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span> &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><strong>ngOnInit()<\\/strong><\\/i><\\/span><span style=\\\"color:hsl(0, 0%, 30%);\\\"> \\u2192<\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\">We use OnInit() mostly for initialization.<\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/parent-oninit-1.png\\\"><\\/figure><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0, 0%, 60%);font-size:16px;\\\">Notice = <\\/span><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">how we import <\\/span><\\/span><mark style=\\\"-webkit-text-stroke-width:0px;background-color:rgba(242, 201, 76, 0.35);border-radius:8px;box-sizing:border-box;color:inherit;display:inline;font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:calc(1.4em + 1px);orphans:2;padding:0px 2px;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">OnInit<\\/mark><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">, but we implement it with the <\\/span><\\/span><mark style=\\\"-webkit-text-stroke-width:0px;background-color:rgba(242, 201, 76, 0.35);border-radius:8px;box-sizing:border-box;color:inherit;display:inline;font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:calc(1.4em + 1px);orphans:2;padding:0px 2px;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">ngOnInit<\\/mark><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:Inter, sans-serif;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\"> method. It\\u2019s the same principle for the other lifecycle hooks.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 08:03:32', '2023-02-26 08:03:32'),
(69, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h2><ul><li>Constructor is not a lifecycle hook.<\\/li><\\/ul><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp; &nbsp; &nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong> <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span> &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><strong>ngOnInit()<\\/strong><\\/span><\\/i><\\/span> <span style=\\\"color:hsl(0,0%,30%);\\\"><span>\\u2192<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>We use OnInit() mostly for initialization.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/parent-oninit-1.png\\\" alt=\\\"parent-oninit-1.png\\\"><\\/figure><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,60%);font-size:16px;\\\"><span>Notice = <\\/span><\\/span><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\">how we import <\\/span><\\/span><span style=\\\"font-size:16px;\\\">OnInit<\\/span><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\">, but we implement it with the <\\/span><\\/span><span style=\\\"font-size:16px;\\\">ngOnInit<\\/span><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\"> method. It\\u2019s the same principle for the other lifecycle hooks.<\\/span><span>&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 08:04:03', '2023-02-26 08:04:03'),
(70, 1, 'post', '{\"name\":\"Angular Lifecycle Hooks.\",\"slug\":\"angular-lifecycle-hooks\",\"slug_id\":\"71\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Phases<\\/h2><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\\\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <\\/span><i><span>hooks <\\/span><\\/i><span>.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/div><div class=\\\"paragraph\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p style=\\\"font-weight:400;\\\"><span style=\\\"font-size:16px;\\\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:50%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/lifecycle-hooks-1.webp\\\" alt=\\\"lifecycle-hooks-1.webp\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:18px;\\\"><span><strong>Constructor \\u2192<\\/strong>&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><ul><li>Constructor is not a lifecycle hook.<\\/li><\\/ul><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);font-size:16px;\\\"><span>A simple example of the usage of the constructor would be as:&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import {Component} from \'angular2\\/core\';\\r\\nimport {ValService} from \'.\\/valService\';\\r\\n\\r\\n@Component({\\r\\n selector: \\u2018app-root\\u2019,\\r\\n template: `\\r\\n `\\r\\n})\\r\\nclass AppComponent {\\r\\n value: String;\\r\\n constructor(private _valService: ValService) {\\r\\n this.value = _valService.getValue();\\r\\n }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\\\">About the Lifecycle Hook methods<\\/h2><h3 style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><u>ngOnChanges()<\\/u>&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/i><\\/span><\\/h3><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\\\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges<\\/strong> of the previous and current value of the property.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\\\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">Called every time a data-bound input property changes. It\\u2019s called a first time before the <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span><strong style=\\\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\\\">ngOnInit<\\/strong> <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">hook. The hook receives a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:17px;\\\"><span>SimpleChanges <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\\\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it\\u2019s a good idea to limit the amount of processing it does.<\\/span><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"font-size:17px;\\\"><i><span><strong>ngOnInit()<\\/strong> <\\/span><\\/i><\\/span><span style=\\\"color:hsl(0,0%,30%);\\\"><span>\\u2192&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>We use OnInit() mostly for initialization. It is called after&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/parent-oninit-1.png\\\" alt=\\\"parent-oninit-1.png\\\"><\\/figure><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\"><span style=\\\"color:hsl(0,0%,60%);font-size:16px;\\\"><span>Notice = <\\/span><\\/span><span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\">how we import <\\/span><\\/span><span style=\\\"font-size:16px;\\\"><span>OnInit<\\/span><\\/span> <span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\">, but we implement it with the <\\/span><\\/span><span style=\\\"font-size:16px;\\\"><span>ngOnInit<\\/span><\\/span> <span style=\\\"color:rgb(77,91,124);font-size:16px;\\\"><span style=\\\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\\\">method. It\\u2019s the same principle for the other lifecycle hooks.<\\/span><span> &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngonit.png\\\"><\\/figure><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\\\">&nbsp;<\\/p><\\/div>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"7:07\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 25, 'Angular Lifecycle Hooks.', 'primary', '2023-02-26 08:15:56', '2023-02-26 08:15:56'),
(71, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p style=\\\"margin-left:0px;\\\"><a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong style=\\\"box-sizing:inherit;\\\">Angular<\\/strong><\\/a><strong style=\\\"box-sizing:inherit;\\\"> interpolation<\\/strong> is used display a <a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p style=\\\"margin-left:0px;\\\">Data binding consist of <em style=\\\"box-sizing:inherit;\\\"><i>one way data binding<\\/i><\\/em> and <em style=\\\"box-sizing:inherit;\\\"><i>two way data binding<\\/i><\\/em>. Interpolation is used for <strong style=\\\"box-sizing:inherit;\\\">one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p style=\\\"margin-left:0px;\\\">Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p style=\\\"margin-left:0px;\\\">We use curly braces inside other curly braces to render dynamic data: <code>{{ data }}<\\/code> and this representation is called string interpolation.<\\/p><p style=\\\"margin-left:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.<\\/span><\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'info', '2023-02-26 09:00:13', '2023-02-26 09:00:13'),
(72, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0, 0%, 30%);\\\">We use curly braces inside other curly braces to render dynamic data: <code>{{ data }}<\\/code> and this representation is called string interpolation.<\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 60%);font-size:16px;\\\"><span>&nbsp;<\\/span><\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 09:05:15', '2023-02-26 09:05:15'),
(73, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }}<\\/span><\\/code><span> and this representation is called string interpolation.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,60%);font-size:16px;\\\"><span> &nbsp;<\\/span><\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 09:07:33', '2023-02-26 09:07:33');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(74, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }}<\\/span><\\/code><span> and this representation is called string interpolation.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,60%);font-size:16px;\\\"><span> &nbsp;<\\/span><\\/span><\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 09:07:34', '2023-02-26 09:07:34'),
(75, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.<\\/span><\\/span><\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 10:24:15', '2023-02-26 10:24:15'),
(76, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 10:28:08', '2023-02-26 10:28:08'),
(77, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 10:28:48', '2023-02-26 10:28:48'),
(78, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 10:29:05', '2023-02-26 10:29:05'),
(79, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 10:29:41', '2023-02-26 10:29:41'),
(80, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong><\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.<\\/span><\\/span><\\/h5><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:17:16', '2023-02-26 12:17:16'),
(81, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:&quot;Times New Roman&quot;;font-size:medium;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:24:32', '2023-02-26 12:24:32'),
(82, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span>&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong><\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>The expression that is enclosed in the double curly braces is commonly called <\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\">Template Expression<\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span> and the template expression can also be a <\\/span><\\/span><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\">ternary operator<\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>.<\\/span><\\/span><\\/h5><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"-webkit-text-stroke-width:0px;display:inline !important;float:none;font-family:&quot;Times New Roman&quot;;font-size:medium;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\\\">Address Not Available<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:33:48', '2023-02-26 12:33:48');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(83, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>The expression that is enclosed in the double curly braces is commonly called <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Template Expression<\\/span><\\/span> <span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>and the template expression can also be a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>ternary operator<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>.&nbsp;<\\/span><\\/span><\\/h5><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span>&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:36:21', '2023-02-26 12:36:21'),
(84, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>The expression that is enclosed in the double curly braces is commonly called <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Template Expression <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>and the template expression can also be a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>ternary operator <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>.&nbsp;&nbsp;<\\/span><\\/span><\\/h5><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Method Interpolation in Angular Application:<\\/strong><\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>Let\\u2019s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. So, what we will do here is, we will create one method let say GetFullName, and that method will return the full name by combining the first name and last name properties.<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>HTML =&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:48:10', '2023-02-26 12:48:10'),
(85, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>The expression that is enclosed in the double curly braces is commonly called <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Template Expression <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>and the template expression can also be a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>ternary operator <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>.&nbsp; &nbsp;<\\/span><\\/span><\\/h5><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Method Interpolation in Angular Application:<\\/strong>&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Let\\u2019s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. So, what we will do here is, we will create one method let say GetFullName, and that method will return the full name by combining the first name and last name properties.&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:54:13', '2023-02-26 12:54:13'),
(86, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>The expression that is enclosed in the double curly braces is commonly called <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>Template Expression <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>and the template expression can also be a <\\/span><\\/span><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>ternary operator <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Method Interpolation in Angular Application:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Let\\u2019s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. So, what we will do here is, we will create one method let say GetFullName, and that method will return the full name by combining the first name and last name properties.&nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:55:26', '2023-02-26 12:55:26'),
(87, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>It is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName Property and Last Name before the LastName property. If this is your requirement then you could do this as shown in the below image.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong><\\/span><\\/span><\\/h5><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Method Interpolation in Angular Application:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Let\\u2019s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. So, what we will do here is, we will create one method let say GetFullName, and that method will return the full name by combining the first name and last name properties.&nbsp; &nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 12:59:47', '2023-02-26 12:59:47');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(88, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:17px;\\\"><strong>Angular Interpolation with hardcoded string:<\\/strong><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp;<\\/span><\\/span><\\/h5><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Method Interpolation in Angular Application:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Let\\u2019s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. So, what we will do here is, we will create one method let say GetFullName, and that method will return the full name by combining the first name and last name properties.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:06:39', '2023-02-26 13:06:39'),
(89, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong><\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =&nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h5><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p><span style=\\\"font-size:17px;\\\"><strong>Method Interpolation in Angular application:<\\/strong><\\/span><\\/p><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:09:38', '2023-02-26 13:09:38'),
(90, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =&nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h5><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p><span style=\\\"font-size:17px;\\\"><span><strong>Method Interpolation in Angular application:<\\/strong><\\/span><\\/span><\\/p><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:09:53', '2023-02-26 13:09:53'),
(91, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h2 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Method Interpolation in Angular application:<\\/strong>&nbsp;<\\/span><\\/span><\\/h2><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><h5 style=\\\"text-align:justify;\\\"><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h5><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:12:03', '2023-02-26 13:12:03'),
(92, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h2 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h2><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Method Interpolation in Angular application:<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/h2><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><p>HTML = <span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:13:25', '2023-02-26 13:13:25');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(93, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><h2><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0, 0%, 30%);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =&nbsp; &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h2 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Method Interpolation in Angular application:<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/h2><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><p>HTML =&nbsp;<span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-26 13:15:28', '2023-02-26 13:15:28'),
(94, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-27 08:47:13', '2023-02-27 08:47:13'),
(95, 1, 'post', '{\"name\":\"Interpolation in Angular.\",\"slug\":\"interpolation-in-angular\",\"slug_id\":\"72\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h3>What is Angular Interpolation?<\\/h3><p><a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/dev-workspace-setup\\/\\\"><strong>Angular<\\/strong><\\/a><strong> interpolation<\\/strong> is used display a <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-component\\/\\\">component<\\/a> property in the respective view <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/angular\\/angular-templates-and-views\\/\\\">template<\\/a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/literal-types\\/\\\">string<\\/a>, number, date, <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/arrays\\/\\\">arrays<\\/a>, list or <a style=\\\"color:rgb(5,86,243);text-decoration:none;\\\" href=\\\"https:\\/\\/howtodoinjava.com\\/typescript\\/maps\\/\\\">map<\\/a>.<\\/p><p>Data binding consist of <i>one way data binding<\\/i> and <i>two way data binding<\\/i>. Interpolation is used for <strong>one way data binding<\\/strong>. Interpolation moves data in one direction from our components to HTML elements.<\\/p><p>Components render data, but data can change in time, so it needs to be dynamic.<\\/p><p><span style=\\\"color:hsl(0,0%,30%);\\\"><span>We use curly braces inside other curly braces to render dynamic data: <\\/span><code><span>{{ data }} <\\/span><\\/code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;Header Component&lt;\\/p&gt;\\r\\n&lt;p&gt;{{userName}}&lt;\\/p&gt;\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\\\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">import { Component, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent implements OnInit {\\r\\n\\r\\n  userName = \\\"MaK\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n  }\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"parent OnInit is called.\\\");\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>Output =<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/interpolation-output.png\\\" alt=\\\"interpolation-output.png\\\"><\\/figure><h2><span style=\\\"font-size:17px;\\\"><span><strong>Angular Interpolation with hardcoded string:<\\/strong>&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h2><p><span style=\\\"color:hsl(0,0%,30%);font-size:16px;\\\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"color:rgb(0,0,0);font-size:16px;\\\"><span>HTML =<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">export class HeaderComponent implements OnInit {\\r\\n\\r\\n  firstName = \\\"MaK\\\";\\r\\n  secondName = \\\"Jaat\\\";\\r\\n\\r\\n}<\\/code><\\/pre><p>Output:&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">First Name MaK , Second Name Jaat<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><h5 style=\\\"text-align:justify;\\\">&nbsp;<\\/h5><h2 style=\\\"text-align:justify;\\\"><span style=\\\"color:rgb(0,0,0);font-size:18px;\\\"><span><strong>Interpolation in Angular with Ternary Operator:<\\/strong>&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/h2><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.<\\/p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;<\\/p><p>HTML =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n  address = \\\"\\\";\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p><span style=\\\"color:rgb(0,0,0);\\\"><span style=\\\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\\\">Address Not Available<\\/span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display \\u2018Address Not Available\'<\\/li><\\/ul><p>&nbsp;<\\/p><h2><span style=\\\"font-size:17px;\\\"><span><strong>Method Interpolation in Angular application:<\\/strong>&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/h2><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.<\\/p><p>HTML =&nbsp;<span style=\\\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\\\"><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;{{getFullName()}}&lt;\\/p&gt;<\\/code><\\/pre><p>TS =&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">export class HeaderComponent {\\r\\n\\r\\n  firstName = \\\"\\\";\\r\\n  lastName = \\\"\\\";\\r\\n  address = \\\"\\\";\\r\\n  constructor(){\\r\\n    console.log(\\\"parent constructor is called.\\\");\\r\\n    this.firstName = \\\"MaK\\\";\\r\\n    this.lastName = \\\"Jaat\\\";\\r\\n    this.address = \\\"HR\\\";\\r\\n  }\\r\\n\\r\\n  getFullName(){\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n}<\\/code><\\/pre><p>Output =&nbsp;<\\/p><blockquote><p>MaK Jaat<\\/p><\\/blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-26\",\"publish_time\":\"13:50\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 26, 'Interpolation in Angular.', 'primary', '2023-02-27 08:51:58', '2023-02-27 08:51:58'),
(96, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-27 10:31:47', '2023-02-27 10:31:47');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(97, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>. &nbsp; &nbsp;<\\/span><\\/span><\\/p><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-27 10:33:05', '2023-02-27 10:33:05');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(98, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves<\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>A Component consists of three things:<\\/span><\\/span><\\/p><ul><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">A component class = Handles data and functionality<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">An HTML template = Determines the UI<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Component-specific styles = Define the look and feel.<\\/li><\\/ul><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-27 10:43:28', '2023-02-27 10:43:28');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(99, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>A Component consists of three things:&nbsp;<\\/span><\\/span><\\/p><ul><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">A component class = Handles data and functionality<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">An HTML template = Determines the UI<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Component-specific styles = Define the look and feel.<\\/li><\\/ul><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-02-27 10:57:41', '2023-02-27 10:57:41'),
(100, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'info', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(101, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h3>From the Component to the DOM<\\/h3><p>Interpolation: {{value}}<\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>Property binding: [property]=\\\"value\\\"<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p>Event binding: (event)=\\\"function\\\"<\\/p><p>When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 11:19:11', '2023-02-27 11:19:11'),
(102, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h3>From the Component to the DOM<\\/h3><p>Interpolation: {{value}}<\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>Property binding: [property]=\\\"value\\\"<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p>Event binding: (event)=\\\"function\\\"<\\/p><p>When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way<\\/h2><h4>Two-way data binding: [(ngModel)]=\\\"value\\\"<\\/h4><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 11:27:09', '2023-02-27 11:27:09'),
(103, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>One-way Data Binding<\\/h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/one-waydatabinding.webp\\\"><\\/figure><h3>From the Component to the DOM<\\/h3><p><span style=\\\"background-color:hsl(150, 75%, 60%);\\\">Interpolation: {{value}}<\\/span><\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150, 75%, 60%);\\\">Property binding: [property]=\\\"value\\\"<\\/span><\\/p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>Attribute Binding:<\\/p><p>It is used to set a attribute of elements from the components to the view template.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p>Event binding: (event)=\\\"function\\\"<\\/p><p>When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way<\\/h2><h4>Two-way data binding: [(ngModel)]=\\\"value\\\"<\\/h4><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 12:06:51', '2023-02-27 12:06:51'),
(104, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>One-way Data Binding<\\/h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/one-waydatabinding.webp\\\" alt=\\\"one-waydatabinding.webp\\\"><\\/figure><h3>From the Component to the DOM<\\/h3><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Interpolation: {{value}}<\\/span><\\/span><\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Property binding: [property]=\\\"value\\\"<\\/span><\\/span><\\/p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\">Attribute Binding: [attr.attribute-you-are-targeting]=\\\"expression\\\"<\\/span><\\/p><p>It is used to set attribute of elements from the components to the view template.<\\/p><p>example \\u2192 [attr.colspan]=\\\"{{colspanVal}}\\\"<\\/p><p>When property corresponding to the attribute does not exist for example colspan does not have corresponding dom property so attribute binding is required.<\\/p><p>Error is thrown in console if we try to use colspan=\\\"{{colspanVal}}\\\" -property binding.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p>Event binding: (event)=\\\"function\\\"<\\/p><p>When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way<\\/h2><h4>Two-way data binding: [(ngModel)]=\\\"value\\\"<\\/h4><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 12:23:50', '2023-02-27 12:23:50');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(105, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>One-way Data Binding<\\/h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/one-waydatabinding.webp\\\" alt=\\\"one-waydatabinding.webp\\\"><\\/figure><h3>From the Component to the DOM<\\/h3><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Interpolation: {{value}}&nbsp;<\\/span><\\/span><\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Property binding: [property]=\\\"value\\\"&nbsp;<\\/span><\\/span><\\/p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Attribute Binding: [attr.attribute-you-are-targeting]=\\\"expression\\\"<\\/span><\\/span><\\/p><p>It is used to set attribute of elements from the components to the view template.<\\/p><p>example \\u2192 [attr.colspan]=\\\"{{colspanVal}}\\\"<\\/p><p>When property corresponding to the attribute does not exist for example colspan does not have corresponding dom property so attribute binding is required.<\\/p><p>Error is thrown in console if we try to use colspan=\\\"{{colspanVal}}\\\" -property binding.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\">Event binding: (event)=\\\"function\\\"<\\/span><\\/p><p>When a specific DOM event happens (e.g.: click, change, keyup), call the specified method in the component.<\\/p><p>Event Binding allows us to bind events such as keystrokes, clicks, hover, touch, etc to a method in component. It is one way from view to component. for example, when the user changes input in a text box, we can update the model in the component, run some validations, etc. When the user submits the button, we can then save the model to the backend server.<\\/p><p>(event)=\\\"TemplateStatement\\\"<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way<\\/h2><h4>Two-way data binding: [(ngModel)]=\\\"value\\\"<\\/h4><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><p>It means that changes made to our model in the component are propagated to the view and that any changes made in the view are immediately updated in the underlying component.<\\/p><p>[()] =&gt; banana in a box.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 12:35:16', '2023-02-27 12:35:16'),
(106, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>One-way Data Binding<\\/h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/one-waydatabinding.webp\\\" alt=\\\"one-waydatabinding.webp\\\"><\\/figure><h3>From the Component to the DOM<\\/h3><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Interpolation: {{value}}&nbsp;&nbsp;<\\/span><\\/span><\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Property binding: [property]=\\\"value\\\"&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Attribute Binding: [attr.attribute-you-are-targeting]=\\\"expression\\\"&nbsp;<\\/span><\\/span><\\/p><p>It is used to set attribute of elements from the components to the view template.<\\/p><p>example \\u2192 [attr.colspan]=\\\"{{colspanVal}}\\\"<\\/p><p>When property corresponding to the attribute does not exist for example colspan does not have corresponding dom property so attribute binding is required.<\\/p><p>Error is thrown in console if we try to use colspan=\\\"{{colspanVal}}\\\" -property binding.<\\/p><p><span style=\\\"background-color:hsl(150, 75%, 60%);\\\">Style Binding: [style.style-property]=\\\"value\\\"<\\/span><\\/p><p>Style binding is used to specify inline styling for template elements in your component.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;h2 [style.font-size] = \\\"\'100px\'\\\"&gt; Resources&lt;\\/h2&gt;\\r\\n&lt;h2 [style.fontSize] = \\\"rule\\\"&gt;Get from rule&lt;\\/h2&gt;\\r\\n&lt;h2 [style.fontSize] = \\\"check?\'100px\':\'200px\'\\\"&gt; Ternary Operator&lt;\\/h2&gt;\\r\\n\\r\\n\\/\\/check = true; \\/\\/it is defined in the component.<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Event binding: (event)=\\\"function\\\"<\\/span><\\/span><\\/p><p>When a specific DOM event happens (e.g.: click, change, keyup), call the specified method in the component.<\\/p><p>Event Binding allows us to bind events such as keystrokes, clicks, hover, touch, etc to a method in component. It is one way from view to component. for example, when the user changes input in a text box, we can update the model in the component, run some validations, etc. When the user submits the button, we can then save the model to the backend server.<\\/p><p>(event)=\\\"TemplateStatement\\\"<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way<\\/h2><h4>Two-way data binding: [(ngModel)]=\\\"value\\\"<\\/h4><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><p>It means that changes made to our model in the component are propagated to the view and that any changes made in the view are immediately updated in the underlying component.<\\/p><p>[()] =&gt; banana in a box.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-27 12:53:28', '2023-02-27 12:53:28'),
(107, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-02-28 08:41:24', '2023-02-28 08:41:24'),
(108, 1, 'post', '{\"name\":\"Angular Data Binding.\",\"slug\":\"angular-data-binding\",\"slug_id\":\"73\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.<\\/p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.<\\/p><ul><li>It allows communication between a component and the DOM.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>One-way Data Binding<\\/h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.<\\/p><figure class=\\\"image image_resized\\\" style=\\\"width:75%;\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/one-waydatabinding.webp\\\" alt=\\\"one-waydatabinding.webp\\\"><\\/figure><h3>From the Component to the DOM<\\/h3><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Interpolation: {{value}}&nbsp; &nbsp;<\\/span><\\/span><\\/p><ul><li>This adds the value of a property from the component.<\\/li><\\/ul><pre><code class=\\\"language-typescript\\\">&lt;p&gt; Name: {{user.name}} &lt;\\/p&gt;\\r\\n&lt;p&gt; Age: {{user.age}} &lt;\\/p&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Property binding: [property]=\\\"value\\\"&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.<\\/p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;input type=\\\"email\\\" [value]=\\\"user.email\\\"&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Attribute Binding: [attr.attribute-you-are-targeting]=\\\"expression\\\"&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>It is used to set attribute of elements from the components to the view template.<\\/p><p>example \\u2192 [attr.colspan]=\\\"{{colspanVal}}\\\"<\\/p><p>When property corresponding to the attribute does not exist for example colspan does not have corresponding dom property so attribute binding is required.<\\/p><p>Error is thrown in console if we try to use colspan=\\\"{{colspanVal}}\\\" -property binding.<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Style Binding: [style.style-property]=\\\"value\\\"<\\/span><\\/span><\\/p><p>Style binding is used to specify inline styling for template elements in your component.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;h2 [style.font-size] = \\\"\'100px\'\\\"&gt; Resources&lt;\\/h2&gt;\\r\\n&lt;h2 [style.fontSize] = \\\"rule\\\"&gt;Get from rule&lt;\\/h2&gt;\\r\\n&lt;h2 [style.fontSize] = \\\"check?\'100px\':\'200px\'\\\"&gt; Ternary Operator&lt;\\/h2&gt;\\r\\n\\r\\n\\/\\/check = true; \\/\\/it is defined in the component.<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>From the DOM to the Component<\\/h3><p>&nbsp;<\\/p><p><span style=\\\"background-color:hsl(150,75%,60%);\\\"><span>Event binding: (event)=\\\"function\\\"&nbsp;<\\/span><\\/span><\\/p><p>When a specific DOM event happens (e.g.: click, change, keyup), call the specified method in the component.<\\/p><p>Event Binding allows us to bind events such as keystrokes, clicks, hover, touch, etc to a method in component. It is one way from view to component. for example, when the user changes input in a text box, we can update the model in the component, run some validations, etc. When the user submits the button, we can then save the model to the backend server.<\\/p><p>(event)=\\\"TemplateStatement\\\"<\\/p><pre><code class=\\\"language-typescript\\\">&lt;button (click)=\\\"fire()\\\"&gt;CLICK ME&lt;\\/button&gt;<\\/code><\\/pre><ul><li>Here, when we click the button then fire() method is called from the component.<\\/li><\\/ul><p>&nbsp;<\\/p><h2>Two-way\\u2192<\\/h2><h4>Two-way data binding:<\\/h4><p>syntax \\u2192 [(ngModel)]=\\\"value\\\"<\\/p><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.<\\/p><p>It means that changes made to our model in the component are propagated to the view and that any changes made in the view are immediately updated in the underlying component.<\\/p><p>[()] =&gt; banana in a box.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"email\\\" [(ngModel)]=\\\"user.email\\\"&gt;<\\/code><\\/pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:<\\/li><\\/ul><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-27\",\"publish_time\":\"16:27\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 27, 'Angular Data Binding.', 'primary', '2023-02-28 08:48:56', '2023-02-28 08:48:56'),
(109, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'info', '2023-02-28 10:14:20', '2023-02-28 10:14:20'),
(110, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180, 75%, 60%);\\\">let user<\\/span> creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180, 75%, 60%);\\\">of users<\\/span> means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180, 75%, 60%);\\\">*<\\/span> character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180, 75%, 60%);\\\">template=\\\"ngFor let item of items\\\"<\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>variable visibility, the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/p><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-02-28 11:05:07', '2023-02-28 11:05:07'),
(111, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user<\\/span><\\/span> creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users<\\/span><\\/span> means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>*<\\/span><\\/span> character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>variable visibility, the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/p><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><p>&nbsp;<\\/p><p>Stripe a table using even and odd = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/p><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-02-28 12:22:10', '2023-02-28 12:22:10'),
(112, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>variable visibility, the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/p><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><p>&nbsp;<\\/p><p>Stripe a table using even and odd = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/p><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><p>Identifying the first and the last element of a list =&nbsp;<\\/p><p>just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-02-28 12:28:36', '2023-02-28 12:28:36'),
(113, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>variable visibility, the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/p><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><p>&nbsp;<\\/p><p>Stripe a table using even and odd = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/p><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><p>Identifying the first and the last element of a list =&nbsp;<\\/p><p>just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-02-28 12:35:26', '2023-02-28 12:35:26');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(114, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-02-28 12:40:59', '2023-02-28 12:40:59'),
(115, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-01 08:39:05', '2023-03-01 08:39:05'),
(116, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-01 08:39:06', '2023-03-01 08:39:06'),
(117, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-01 11:35:06', '2023-03-01 11:35:06'),
(118, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 11:35:57', '2023-03-01 11:35:57'),
(119, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.<\\/p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.<\\/p><p>The following command can be used to generate a directive in the project.<\\/p><blockquote><p>ng generate directive alterBackground<\\/p><\\/blockquote><p>Tha command above creates the directive file alter-background.directive.ts in the angular project.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive } from \'@angular\\/core\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[appAlterBackground]\'\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>use the @Directive decorator to manage a custom directive.<\\/p><p>Furthermore, AlterBackgroundDirective class is declared for our directive. At this point, we can start writing the code for the background color. Import and add Elementref instance in the constructor to grant access to the DOM element. Also, use native element property of ElementRef to change the background color of the element as follows:<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive, ElementRef } from \\\"@angular\\/core\\\";\\r\\n\\r\\n@Directive({\\r\\n  selector: \\\"[appAlterBackground]\\\"\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n  constructor(private el: ElementRef) {\\r\\n    this.el.nativeElement.style.backgroundColor = \\\"blue\\\";\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 11:55:05', '2023-03-01 11:55:05'),
(120, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.<\\/p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.<\\/p><p>The following command can be used to generate a directive in the project.<\\/p><blockquote><p>ng generate directive alterBackground<\\/p><\\/blockquote><p>Tha command above creates the directive file alter-background.directive.ts in the angular project.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive } from \'@angular\\/core\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[appAlterBackground]\'\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>use the @Directive decorator to manage a custom directive.<\\/p><p>Furthermore, AlterBackgroundDirective class is declared for our directive. At this point, we can start writing the code for the background color. Import and add Elementref instance in the constructor to grant access to the DOM element. Also, use native element property of ElementRef to change the background color of the element as follows:<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive, ElementRef } from \\\"@angular\\/core\\\";\\r\\n\\r\\n@Directive({\\r\\n  selector: \\\"[appAlterBackground]\\\"\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n  constructor(private el: ElementRef) {\\r\\n    this.el.nativeElement.style.backgroundColor = \\\"blue\\\";\\r\\n  }\\r\\n}<\\/code><\\/pre><p>To apply the custom directive to a DOM element, add a &lt;h1&gt; tag and introduce appAlterBackground inside the tag. Have a look at the tags in the below app.component.html file.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;div&gt;\\r\\n\\t&lt;h1 appAlterBackground&gt; This should be in the blue&lt;\\/h1&gt;\\r\\n&lt;\\/div&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 11:58:09', '2023-03-01 11:58:09'),
(121, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.<\\/p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.<\\/p><p>The following command can be used to generate a directive in the project.<\\/p><blockquote><p>ng generate directive alterBackground<\\/p><\\/blockquote><p>Tha command above creates the directive file alter-background.directive.ts in the angular project.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive } from \'@angular\\/core\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[appAlterBackground]\'\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>use the @Directive decorator to manage a custom directive.<\\/p><p>Furthermore, AlterBackgroundDirective class is declared for our directive. At this point, we can start writing the code for the background color. Import and add Elementref instance in the constructor to grant access to the DOM element. Also, use native element property of ElementRef to change the background color of the element as follows:<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive, ElementRef } from \\\"@angular\\/core\\\";\\r\\n\\r\\n@Directive({\\r\\n  selector: \\\"[appAlterBackground]\\\"\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n  constructor(private el: ElementRef) {\\r\\n    this.el.nativeElement.style.backgroundColor = \\\"blue\\\";\\r\\n  }\\r\\n}<\\/code><\\/pre><p>To apply the custom directive to a DOM element, add a &lt;h1&gt; tag and introduce appAlterBackground inside the tag. Have a look at the tags in the below app.component.html file.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;div&gt;\\r\\n\\t&lt;h1 appAlterBackground&gt; This should be in the blue&lt;\\/h1&gt;\\r\\n&lt;\\/div&gt;<\\/code><\\/pre><p>Output -<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/custom-directive-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 12:04:49', '2023-03-01 12:04:49');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(122, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.<\\/p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.<\\/p><p>The following command can be used to generate a directive in the project.<\\/p><blockquote><p>ng generate directive alterBackground<\\/p><\\/blockquote><p>Tha command above creates the directive file <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">alter-background.directive.ts<\\/span> in the angular project.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive } from \'@angular\\/core\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[appAlterBackground]\'\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>use the<span style=\\\"background-color:hsl(0, 0%, 90%);\\\"> @Directive decorator<\\/span> to manage a custom directive.<\\/p><p>Furthermore, <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">AlterBackgroundDirective<\\/span> class is declared for our directive. At this point, we can start writing the code for the background color. Import and add ElementRef instance in the constructor to grant access to the DOM element. Also, use native element property of <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">ElementRef<\\/span> to change the background color of the element as follows:<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive, ElementRef } from \\\"@angular\\/core\\\";\\r\\n\\r\\n@Directive({\\r\\n  selector: \\\"[appAlterBackground]\\\"\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n  constructor(private el: ElementRef) {\\r\\n    this.el.nativeElement.style.backgroundColor = \\\"blue\\\";\\r\\n  }\\r\\n}<\\/code><\\/pre><p>To apply the custom directive to a DOM element, add a &lt;h1&gt; tag and introduce <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">appAlterBackground<\\/span> inside the tag. Have a look at the tags in the below app.component.html file.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;div&gt;\\r\\n\\t&lt;h1 appAlterBackground&gt; This should be in the blue&lt;\\/h1&gt;\\r\\n&lt;\\/div&gt;<\\/code><\\/pre><p>Output -<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/custom-directive-output.png\\\" alt=\\\"custom-directive-output.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 12:19:35', '2023-03-01 12:19:35'),
(123, 1, 'post', '{\"name\":\"Angular Directives.\",\"slug\":\"angular-directives\",\"slug_id\":\"74\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>What are Angular Directives?<\\/h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.<\\/p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-angular-8-directives.png\\\" alt=\\\"types-of-angular-8-directives.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Types of Directives in Angular:<\\/h1><p>The Directives are classified into three types based on their behaviour.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/types-of-directives.png\\\" alt=\\\"types-of-directives.png\\\"><\\/figure><ol><li>Structural Directive<\\/li><li>Attribute Directive<\\/li><li>Component Directives<\\/li><\\/ol><h2>Structural Directive \\u2192<\\/h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.<\\/p><p>In angular there are three structural directives available.&nbsp;<\\/p><ol><li>NgFor \\u2192 (*ngFor)<\\/li><li>NgIf \\u2192 (*ngIf)<\\/li><li>NgSwitch \\u2192 (*ngSwitch)<\\/li><\\/ol><p>&nbsp;<\\/p><h1>ngFor \\u2192<\\/h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li *ngFor=\\\"let user of users\\\"&gt;{{user.name}}&lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;\\r\\n\\r\\n--Output--\\r\\n&lt;ul&gt;\\r\\n\\t&lt;li&gt; Mukesh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Suresh &lt;\\/li&gt;\\r\\n\\t&lt;li&gt; Ram &lt;\\/li&gt;\\r\\n&lt;\\/ul&gt;<\\/code><\\/pre><p><u>Explanation<\\/u>&nbsp;<\\/p><ul><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>let user <\\/span><\\/span>creates a local variable that will be available in the template<\\/li><li><span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>of users <\\/span><\\/span>means that we will be iterating over the users iterable that should be made available in our component.<\\/li><li>The <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>* <\\/span><\\/span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\\\"background-color:hsl(180,75%,60%);\\\"><span>template=\\\"ngFor let item of items\\\"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/li><\\/ul><p>another example:<\\/p><pre><code class=\\\"language-typescript\\\">\\/\\/ defined in component\\r\\nconst HEROES = [\\r\\n    {id: 1, name:\'Superman\'},\\r\\n    {id: 2, name:\'Batman\'},\\r\\n    {id: 5, name:\'BatGirl\'},\\r\\n    {id: 3, name:\'Robin\'},\\r\\n    {id: 4, name:\'Flash\'}\\r\\n];\\r\\n\\r\\nheros = HEROES;\\r\\n\\r\\n\\r\\n&lt;table&gt;\\r\\n        &lt;thead&gt;\\r\\n            &lt;th&gt;Name&lt;\\/th&gt;\\r\\n            &lt;th&gt;Index&lt;\\/th&gt;\\r\\n        &lt;\\/thead&gt;\\r\\n        &lt;tbody&gt;\\r\\n            &lt;tr *ngFor=\\\"let hero of heroes\\\"&gt;\\r\\n                &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n            &lt;\\/tr&gt;\\r\\n        &lt;\\/tbody&gt;\\r\\n    &lt;\\/table&gt;<\\/code><\\/pre><p>&nbsp;<\\/p><h2>Available local variable =<\\/h2><ul><li><strong>variable visibility <\\/strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.<\\/li><\\/ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.<\\/p><pre><code class=\\\"language-typescript\\\">&lt;tr *ngFor=\\\"let hero of heroes; let i = index\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n    &lt;td&gt;{{i}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-index.png\\\" alt=\\\"ngfor-index.png\\\"><\\/figure><hr><ul><li><strong>Stripe a table using even and odd<\\/strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.<\\/li><\\/ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.<\\/p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.<\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let even = even; let odd = odd\\\" \\r\\n    [ngClass]=\\\"{ odd: odd, even: even }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css \\r\\n.odd{\\r\\n    font-size: larger;\\r\\n    background-color: aqua;\\r\\n}\\r\\n\\r\\n.even{\\r\\n    font-size: small;\\r\\n    background-color: bisque;\\r\\n}<\\/code><\\/pre><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-even-odd-row-class.png\\\" alt=\\\"ngfor-even-odd-row-class.png\\\"><\\/figure><hr><ul><li><strong>Identifying the first and the last element of a list<\\/strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:<\\/li><\\/ul><pre><code class=\\\"language-plaintext\\\">&lt;tr *ngFor=\\\"let hero of heroes; let first = first; let last = last\\\" \\r\\n    [ngClass]=\\\"{ first: first, last: last }\\\"&gt;\\r\\n    &lt;td&gt;{{hero.name}}&lt;\\/td&gt;\\r\\n&lt;\\/tr&gt;\\r\\n\\r\\n\\/\\/ css\\r\\n.first{\\r\\n    background-color: cornflowerblue;\\r\\n}\\r\\n.last{\\r\\n    background-color: deeppink;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/ngfor-first-last-class.png\\\" alt=\\\"ngfor-first-last-class.png\\\"><\\/figure><h1>Component Directives \\u2192<\\/h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.<\\/p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.<\\/p><p>The following command can be used to generate a directive in the project.<\\/p><blockquote><p>ng generate directive alterBackground<\\/p><\\/blockquote><p>Tha command above creates the directive file <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>alter-background.directive.ts<\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 100%);\\\"><span> , a corresponding test file (.spec.ts) and declares the directive class in the root AppModule.<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive } from \'@angular\\/core\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[appAlterBackground]\'\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n}\\r\\n\\r\\n\\/\\/ app.module.ts\\r\\ndeclarations: [\\r\\n    AppComponent,\\r\\n    AlterBackgroundDirective\\r\\n\\t\\/\\/ adds the reference of our directive class.\\r\\n  ],<\\/code><\\/pre><p>use the<span style=\\\"background-color:hsl(0,0%,90%);\\\"><span> @Directive decorator<\\/span><\\/span> to manage a custom directive.<\\/p><p>Furthermore, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>AlterBackgroundDirective<\\/span><\\/span> class is declared for our directive. At this point, we can start writing the code for the background color. Import and add ElementRef instance in the constructor to grant access to the DOM element. Also, use native element property of <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>ElementRef<\\/span><\\/span> to change the background color of the element as follows:<\\/p><pre><code class=\\\"language-typescript\\\">import { Directive, ElementRef } from \\\"@angular\\/core\\\";\\r\\n\\r\\n@Directive({\\r\\n  selector: \\\"[appAlterBackground]\\\"\\r\\n})\\r\\nexport class AlterBackgroundDirective {\\r\\n  constructor(private el: ElementRef) {\\r\\n    this.el.nativeElement.style.backgroundColor = \\\"blue\\\";\\r\\n  }\\r\\n}<\\/code><\\/pre><p>To apply the custom directive to a DOM element, add a &lt;h1&gt; tag and introduce <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>appAlterBackground<\\/span><\\/span> inside the tag. Have a look at the tags in the below app.component.html file.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;div&gt;\\r\\n\\t&lt;h1 appAlterBackground&gt; This should be in the blue&lt;\\/h1&gt;\\r\\n&lt;\\/div&gt;<\\/code><\\/pre><p>Output -<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/custom-directive-output.png\\\" alt=\\\"custom-directive-output.png\\\"><\\/figure><p>&nbsp;<\\/p><h1>Attributes Directives \\u2192<\\/h1><p>This type of directive changes the appearance or behaviour of an element, component, or another directive.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-28\",\"publish_time\":\"15:26\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 28, 'Angular Directives.', 'primary', '2023-03-01 12:31:30', '2023-03-01 12:31:30'),
(124, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-02 09:34:33', '2023-03-02 09:34:33'),
(125, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-03 10:43:44', '2023-03-03 10:43:44'),
(126, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'info', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(127, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 12:11:39', '2023-03-03 12:11:39'),
(128, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p style=\\\"margin-left:40px;\\\">In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p style=\\\"margin-left:40px;\\\">In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\"<\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d<\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p style=\\\"margin-left:40px;\\\">In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><p style=\\\"margin-left:40px;\\\">&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li>~version Approximately equivalent to version.<\\/li><li>^version Compatible with version.<\\/li><li>version Must match version exactly.<\\/li><li>&gt;version Must be greater than version, and same logic for \\u2265 version, &lt;version and \\u2264version.<\\/li><li>*Matches any version.<\\/li><li>latest Obtains the latest release.<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 12:28:57', '2023-03-03 12:28:57'),
(129, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">~version <\\/span>Approximately equivalent to version.<\\/li><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">^version <\\/span>Compatible with version.<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">&gt;version<\\/span> Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">\\u2265 version<\\/span>, <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">&lt;version<\\/span> and <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">\\u2264version<\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">*<\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">latest<\\/span> Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">@angular\\/core: ~9.1.1<\\/span> this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">~<\\/span>, <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm<\\/span> will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span>.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 12:36:31', '2023-03-03 12:36:31'),
(130, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version <\\/span><\\/span>Approximately equivalent to version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version.<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version<\\/span><\\/span> Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version<\\/span><\\/span> , <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version<\\/span><\\/span> and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version<\\/span><\\/span> .<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>*<\\/span><\\/span> Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest<\\/span><\\/span> Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1<\\/span><\\/span> this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~<\\/span><\\/span> , <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm<\\/span><\\/span> will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> .<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 12:48:30', '2023-03-03 12:48:30');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(131, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p>MAJOR.MINOR.PATCH<\\/p><p>Major \\u2192<\\/p><p style=\\\"margin-left:40px;\\\">The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p style=\\\"margin-left:40px;\\\">&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version <\\/span><\\/span>Approximately equivalent to version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version.<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 13:08:18', '2023-03-03 13:08:18'),
(132, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\">MAJOR.MINOR.PATCH<\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version <\\/span><\\/span>Approximately equivalent to version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version.<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 13:09:47', '2023-03-03 13:09:47'),
(133, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version <\\/span><\\/span>Approximately equivalent to version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign)<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-03 13:13:55', '2023-03-03 13:13:55'),
(134, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-03 23:59:08', '2023-03-03 23:59:08'),
(135, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 100%);\\\"><span> (tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 00:48:26', '2023-03-04 00:48:26'),
(136, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>&nbsp;<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 00:57:09', '2023-03-04 00:57:09'),
(137, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-04 08:43:45', '2023-03-04 08:43:45');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(138, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>package.json is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 08:47:11', '2023-03-04 08:47:11'),
(139, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>package.json is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 08:55:48', '2023-03-04 08:55:48'),
(140, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>&nbsp;<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><p>Below are the various purposes for package-lock.json file:<\\/p><ol><li>The guarantee to install exactly the same dependencies for deployments, and continuous integration.<\\/li><li>&nbsp;<\\/li><\\/ol><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 08:57:49', '2023-03-04 08:57:49'),
(141, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>&nbsp;<\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 09:44:22', '2023-03-04 09:44:22');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(142, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p>Should you commit your package-lock.json?<\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 10:18:07', '2023-03-04 10:18:07'),
(143, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p><span style=\\\"font-size:16px;\\\"><strong>Should you commit your package-lock.json?<\\/strong><\\/span><\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p>Why\\/When does npm install rewrite package-lock.json?<\\/p><ul><li>npm install considers package-lock.json only if the packages(s) to be installed are within the version range of package.json.<\\/li><\\/ul><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 10:33:53', '2023-03-04 10:33:53'),
(144, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p><span style=\\\"font-size:16px;\\\"><span><strong>Should you commit your package-lock.json?<\\/strong><\\/span><\\/span><\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p>Why\\/When does npm install rewrite package-lock.json?<\\/p><ul><li>npm install considers package-lock.json only if the packages(s) to be installed are within the version range of package.json.<\\/li><li>If the package version given in the lockfile is not in the version range of the package.json file, packages are updates &amp; package-lock.json is overwritten.<\\/li><li>If you want the installation to fail instead of overwriting packkage-lock.json, use npm ci.<\\/li><\\/ul><p>For example,<\\/p><p>you declare a dependency in package.json like:<\\/p><p>\\u201cfoo\\u201d: \\u201c^2.3.0\\u201d<\\/p><p>Then you do, npm install which will generate a package-lock.json with:<\\/p><p>\\u201cfoo\\u201d:\\\"2.3.0\\\"<\\/p><p>Few days later, a new minor version of \\u201cfoo\\u201d is released, say \\u201c2.4.0\\u201d, then this happens:<\\/p><p>npm install \\u2013 package-lock version is within the range (i.e. ^2.3.0) so 2.3.0 is installed.<\\/p><p>npm ci \\u2013 This anyway only looks at the package-lock.json so 2.3.0 is installed<\\/p><p>Next, you manually update your package.json to:<\\/p><p>\\u201cfoo\\u201d:\\\"^2.4.0\\\"<\\/p><p>Then rerun:<\\/p><p>npm install \\u2013 package-lock version is not within the range (i.e. ^2.4.0) so 2.4.0 is installed and the package-lock.json is re-written to now sho:<\\/p><p>\\u201cfoo\\u201d:\\\"2.4.0\\\"<\\/p><p>npm ci \\u2013 This anyway only looks at the package-lock.json, but since the version is not within the range, it throws an error.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 10:51:06', '2023-03-04 10:51:06');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(145, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p><span style=\\\"font-size:16px;\\\"><span><strong>Should you commit your package-lock.json?<\\/strong>&nbsp;<\\/span><\\/span><\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p>Why\\/When does <span style=\\\"background-color:hsl(0,0%,90%);\\\">npm<\\/span> install rewrite <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package-lock.json<\\/span>?<\\/p><ul><li><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm install<\\/span> considers package-lock.json only if the packages(s) to be installed are within the version range of package.json.<\\/li><li>If the package version given in the lockfile is not in the version range of the package.json file, packages are updates &amp; package-lock.json is overwritten.<\\/li><li>If you want the installation to fail instead of overwriting packkage-lock.json, use npm ci.<\\/li><\\/ul><p>For example,<\\/p><p>you declare a dependency in <span style=\\\"background-color:hsl(0,0%,90%);\\\">package.json<\\/span> like:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d: \\u201c^2.3.0\\u201d<\\/code><\\/pre><p>Then you do, <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm<\\/span> install which will generate a <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package-lock.json<\\/span> with:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.3.0\\\"<\\/code><\\/pre><p>Few days later, a new minor version of \\u201cfoo\\u201d is released, say \\u201c2.4.0\\u201d, then this happens:<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm install<\\/span> \\u2013 package-lock version is within the range (i.e. ^2.3.0) so 2.3.0 is installed.<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm ci<\\/span> \\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package-lock.json<\\/span> so 2.3.0 is installed<\\/p><p>Next, you manually update your <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> to:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"^2.4.0\\\"<\\/code><\\/pre><p>Then rerun:<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm install<\\/span> \\u2013 package-lock version is not within the range (i.e. ^2.4.0) so 2.4.0 is installed and the <span style=\\\"background-color:hsl(0,0%,90%);\\\">package-lock.json<\\/span> is re-written to now show:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.4.0\\\"<\\/code><\\/pre><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm ci<\\/span> \\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0,0%,90%);\\\">package-lock.json<\\/span>, but since the version is not within the range, it throws an error.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 10:54:30', '2023-03-04 10:54:30'),
(146, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>When you work with large projects you would need lot of javascript frameworks. So in one project you would need jquery, angular and so on. Doing \\u201cnpm install\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201cnpm\\u201d team has given package.json. In this file package.json file you can make an entry to all javascript references and load them in one go.<\\/p><p>If you have ever working on javascript or related framework projects then definitely you came across the file named package.json.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to npm that allows to identify the project and its dependencies.<\\/p><p>To create a package.json file manually you need to run a command npm init &nbsp;which will ask you a bunch of questions that is not compulsory. Just hit enter to complete those. You can change it later. If you do not want to answer these questions then you can run npm init -y which will create a file named package.json with the defaults.<\\/p><p>&nbsp;<\\/p><h2>What is a package.json file?<\\/h2><p>The package.json is a file, which contains mainly information about the application libraries or third party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide package.json file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p><span style=\\\"font-size:16px;\\\"><span><strong>Should you commit your package-lock.json?<\\/strong>&nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:17px;\\\"><strong>Why\\/When does <\\/strong><\\/span><span style=\\\"background-color:hsl(0,0%,90%);font-size:17px;\\\"><span><strong>npm<\\/strong><\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 90%);font-size:17px;\\\"><strong> install<\\/strong><\\/span><span style=\\\"font-size:17px;\\\"><strong> rewrite <\\/strong><\\/span><span style=\\\"background-color:hsl(0,0%,90%);font-size:17px;\\\"><span><strong>package-lock.json<\\/strong><\\/span><\\/span><span style=\\\"font-size:17px;\\\"><strong>?<\\/strong><\\/span><\\/p><ul><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install<\\/span><\\/span> considers <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package-lock.json<\\/span> only if the packages(s) to be installed are within the version range of <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span>.<\\/li><li>If the package version given in the lock file is not in the version range of the <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> file, packages are updates &amp; <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package-lock.json<\\/span> is overwritten.<\\/li><li>If you want the installation to fail instead of overwriting packkage-lock.json, use <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm ci<\\/span>.<\\/li><\\/ul><p>For example,<\\/p><p>you declare a dependency in <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> like:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d: \\u201c^2.3.0\\u201d<\\/code><\\/pre><p>Then you do, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm<\\/span><\\/span><span style=\\\"background-color:hsl(0, 0%, 90%);\\\"> install<\\/span> which will generate a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> with:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.3.0\\\"<\\/code><\\/pre><p>Few days later, a new minor version of \\u201cfoo\\u201d is released, say \\u201c2.4.0\\u201d, then this happens:<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install<\\/span><\\/span> \\u2013 package-lock version is within the range (i.e. ^2.3.0) so 2.3.0 is installed.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm ci<\\/span><\\/span> \\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> so 2.3.0 is installed<\\/p><p>Next, you manually update your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> to:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"^2.4.0\\\"<\\/code><\\/pre><p>Then rerun:<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install<\\/span><\\/span> \\u2013 package-lock version is not within the range (i.e. ^2.4.0) so 2.4.0 is installed and the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> is re-written to now show:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.4.0\\\"<\\/code><\\/pre><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm ci<\\/span><\\/span> \\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> , but since the version is not within the range, it throws an error.<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 11:10:39', '2023-03-04 11:10:39'),
(147, 1, 'post', '{\"name\":\"Package.json\",\"slug\":\"packagejson\",\"slug_id\":\"75\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h1>Package.json file \\u2192<\\/h1><p>When you work with large projects you would need lot of javascript frameworks, so in one project you would need jquery, angular and so on. Doing \\u201c<span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm install<\\/span>\\u201d again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go \\u201c<span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm<\\/span>\\u201d team has given <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span>. In this <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> file you can make an entry to all javascript references and load them in one go.<\\/p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">npm<\\/span> that allows to identify the project and its dependencies.<\\/p><h2>What is a <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> file?<\\/h2><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.<\\/p><p>The <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> is a file, which contains mainly information about the application libraries or third-party libraries included in the application and its version and all packages and dependencies it needs to make the application working.<\\/p><pre><code class=\\\"language-plaintext\\\">{\\r\\n  \\\"name\\\": \\\"hello-world-app\\\",\\r\\n  \\\"version\\\": \\\"0.0.0\\\",\\r\\n  \\\"scripts\\\": {\\r\\n    \\\"ng\\\": \\\"ng\\\",\\r\\n    \\\"start\\\": \\\"ng serve\\\",\\r\\n    \\\"build\\\": \\\"ng build\\\",\\r\\n    \\\"watch\\\": \\\"ng build --watch --configuration development\\\",\\r\\n    \\\"test\\\": \\\"ng test\\\"\\r\\n  },\\r\\n  \\\"private\\\": true,\\r\\n  \\\"dependencies\\\": {\\r\\n    \\\"@angular\\/animations\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/common\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/compiler\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/core\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/forms\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/platform-browser-dynamic\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@angular\\/router\\\": \\\"^15.0.0\\\",\\r\\n    \\\"rxjs\\\": \\\"~7.5.0\\\",\\r\\n    \\\"tslib\\\": \\\"^2.3.0\\\",\\r\\n    \\\"zone.js\\\": \\\"~0.12.0\\\"\\r\\n  },\\r\\n  \\\"devDependencies\\\": {\\r\\n    \\\"@angular-devkit\\/build-angular\\\": \\\"^15.0.3\\\",\\r\\n    \\\"@angular\\/cli\\\": \\\"~15.0.3\\\",\\r\\n    \\\"@angular\\/compiler-cli\\\": \\\"^15.0.0\\\",\\r\\n    \\\"@types\\/jasmine\\\": \\\"~4.3.0\\\",\\r\\n    \\\"jasmine-core\\\": \\\"~4.5.0\\\",\\r\\n    \\\"karma\\\": \\\"~6.4.0\\\",\\r\\n    \\\"karma-chrome-launcher\\\": \\\"~3.1.0\\\",\\r\\n    \\\"karma-coverage\\\": \\\"~2.2.0\\\",\\r\\n    \\\"karma-jasmine\\\": \\\"~5.1.0\\\",\\r\\n    \\\"karma-jasmine-html-reporter\\\": \\\"~2.0.0\\\",\\r\\n    \\\"typescript\\\": \\\"~4.8.2\\\"\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>We can divide <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">package.json<\\/span> file into mainly three parts:<\\/p><ol><li>Application identity part:<\\/li><\\/ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.<\\/p><p>2. Dependencies part<\\/p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\\\"color:#0451a5;\\\"><span>@angular\\/router\\\" <\\/span><\\/span><span style=\\\"color:#000000;\\\"><span>: <\\/span><\\/span><span style=\\\"color:#a31515;\\\"><span>\\u201c^15.1.0\\u201d <\\/span><\\/span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/dependencies.webp\\\" alt=\\\"dependencies.webp\\\"><\\/figure><p>3. DevDependencies part<\\/p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.<\\/p><h2>Understanding Versioning system in package.json<\\/h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>Major \\u2192<\\/p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.<\\/p><p>Minor \\u2192<\\/p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.<\\/p><p>Patch \\u2192<\\/p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><h3>Syntaxes you need to know with package.json?<\\/h3><p>In the package.json we have many syntaxes that we can use to install a package version:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/semver-versioning.jpg\\\" alt=\\\"semver-versioning.jpg\\\"><\\/figure><ol><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>(tilde sign) <\\/span><\\/span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>^version <\\/span><\\/span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).<\\/li><li>version Must match version exactly.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&gt;version <\\/span><\\/span>Must be greater than version, and same logic for <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2265 version <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>&lt;version <\\/span><\\/span>and <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>\\u2264version <\\/span><\\/span>.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>* <\\/span><\\/span>Matches any version.<\\/li><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>latest <\\/span><\\/span>Obtains the latest release.<\\/li><\\/ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>@angular\\/core: ~9.1.1 <\\/span><\\/span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>~ <\\/span><\\/span>, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm <\\/span><\\/span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>.<\\/p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.<\\/p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;<\\/p><p>The package-lock.json file<\\/p><p>is a lockfile that contains information about the dependencies\\/packages with their exact version numbers that were installed for the project.<\\/p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.<\\/p><ul><li>It is used to lock dependencies to a specific version number.<\\/li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.<\\/li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines\\/environments.<\\/li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.<\\/li><\\/ul><p><span style=\\\"font-size:16px;\\\"><span><strong>Should you commit your package-lock.json?<\\/strong>&nbsp; &nbsp;<\\/span><\\/span><\\/p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine\\/environment. This is basically to replicate node.js environments as it is on different machines.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:17px;\\\"><span><strong>Why\\/When does <\\/strong><\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,90%);font-size:17px;\\\"><span><strong>npm<\\/strong> <strong>install<\\/strong><\\/span><\\/span> <span style=\\\"font-size:17px;\\\"><span><strong>rewrite <\\/strong><\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,90%);font-size:17px;\\\"><span><strong>package-lock.json<\\/strong> <\\/span><\\/span><span style=\\\"font-size:17px;\\\"><span><strong>?<\\/strong><\\/span><\\/span><\\/p><ul><li><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install <\\/span><\\/span>considers <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> only if the packages(s) to be installed are within the version range of <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> .<\\/li><li>If the package version given in the lock file is not in the version range of the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json<\\/span><\\/span> file, packages are updates &amp; <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json<\\/span><\\/span> is overwritten.<\\/li><li>If you want the installation to fail instead of overwriting packkage-lock.json, use <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm ci<\\/span><\\/span> .<\\/li><\\/ul><p>For example,<\\/p><p>you declare a dependency in <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>like:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d: \\u201c^2.3.0\\u201d<\\/code><\\/pre><p>Then you do, <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install<\\/span><\\/span> which will generate a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json <\\/span><\\/span>with:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.3.0\\\"<\\/code><\\/pre><p>Few days later, a new minor version of \\u201cfoo\\u201d is released, say \\u201c2.4.0\\u201d, then this happens:<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install <\\/span><\\/span>\\u2013 package-lock version is within the range (i.e. ^2.3.0) so 2.3.0 is installed.<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm ci <\\/span><\\/span>\\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json <\\/span><\\/span>so 2.3.0 is installed<\\/p><p>Next, you manually update your <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package.json <\\/span><\\/span>to:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"^2.4.0\\\"<\\/code><\\/pre><p>Then rerun:<\\/p><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm install <\\/span><\\/span>\\u2013 package-lock version is not within the range (i.e. ^2.4.0) so 2.4.0 is installed and the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json <\\/span><\\/span>is re-written to now show:<\\/p><pre><code class=\\\"language-plaintext\\\">\\u201cfoo\\u201d:\\\"2.4.0\\\"<\\/code><\\/pre><p><span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>npm ci <\\/span><\\/span>\\u2013 This anyway only looks at the <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>package-lock.json <\\/span><\\/span>, but since the version is not within the range, it throws an error.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-03\",\"publish_time\":\"17:12\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 29, 'Package.json', 'primary', '2023-03-04 11:16:26', '2023-03-04 11:16:26');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(148, 1, 'post', '{\"name\":\"Angular Components.\",\"slug\":\"angular-components\",\"slug_id\":\"70\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":\"Everything about angular components.\",\"is_featured\":\"0\",\"content\":\"<h3 style=\\\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\\\">What are Angular Components?<\\/h3><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\\\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\\\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\\\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves <\\/span><\\/span><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\\\"><span>.&nbsp;&nbsp;<\\/span><\\/span><\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\"><span style=\\\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\\\"><span>A Component consists of three things:&nbsp;&nbsp;<\\/span><\\/span><\\/p><ul><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">A component class = Handles data and functionality<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">An HTML template = Determines the UI<\\/li><li style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">Component-specific styles = Define the look and feel.<\\/li><\\/ul><h3><strong>Creating a Component in Angular:<\\/strong><\\/h3><div>&nbsp;<\\/div><p>To create a component in any angular application, follow the below steps:<\\/p><ul><li>Get Inside the workspace of the angular app via your terminal.<\\/li><li>Create a component using the following command:<\\/li><\\/ul><pre>ng g c  \\r\\nOR\\r\\nng generate component  <\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\\\">You will see the below Output:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/angular-create-component.png\\\" alt=\\\"angular-create-component.png\\\"><\\/figure><p>It will create a directory named as <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span><strong>\\u201ccomponent_name\\u201d,<\\/strong> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><ol><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><li><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/li><\\/ol><p><span style=\\\"background-color:hsl(0,0%,100%);\\\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>The modified file is <strong><u>app.module.ts<\\/u><\\/strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;<\\/strong> is added.<\\/p><p>So, our component is registered in app.module.ts file (AppModule).<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>UI of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].<\\/p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-html.png\\\" alt=\\\"component-html.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-scss.png\\\" alt=\\\"component-scss.png\\\"><\\/figure><p>Right now our component does not contains any stylesheet rules.<\\/p><p>&nbsp;<\\/p><p><span style=\\\"font-size:19px;\\\"><span><strong><u>Logic of the component<\\/u><\\/strong> \\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/component-ts.png\\\" alt=\\\"component-ts.png\\\"><\\/figure><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span class=\\\"hljs-keyword\\\"><strong>import<\\/strong><\\/span><span> { <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>Component<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>, <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-title class_\\\"><strong>OnInit<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>} <\\/span><span class=\\\"hljs-keyword\\\"><strong>from<\\/strong><\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\\\"><span class=\\\"hljs-string\\\">\'@angular\\/core\'<\\/span><span> <\\/span><\\/span><span style=\\\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\\\"><span>;&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>Using import statement, we can import npm packages and\\/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({ selector: \'app-hello-world\',\\r\\n templateUrl: \'.\\/hello-world.component.html\',\\r\\n styleUrls: [\'.\\/hello-world.component.css\'] \\r\\n })<\\/code><\\/pre><p>&nbsp;<\\/p><p>Here, <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">@Component<\\/code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\\\"hljs language-html\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">&lt;app-hello-world&gt;&lt;\\/app-hello-world&gt;<\\/code><\\/p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:<\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styleUrls: [\'.\\/hello-world.component.css\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span>The next statement <\\/span><\\/span><code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\\\">styleUrls: [\'.\\/hello-world.component.css\']<\\/code><span style=\\\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\\\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><pre><code class=\\\"language-typescript\\\">@Component({\\r\\n    selector: \'app-hello-world\',\\r\\n    template: \'&lt;h2&gt;Hello World!&lt;\\/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;\\/p&gt;\',\\r\\n    styles: [\'h2 { color: red; font-weight: 600; }\']\\r\\n})<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p><span style=\\\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\\\"><span>example:\\u2192&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<\\/span><\\/span><\\/p><p>&nbsp;<\\/p><pre><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-header\',\\r\\n  templateUrl: \'.\\/header.component.html\',\\r\\n  styleUrls: [\'.\\/header.component.scss\']\\r\\n})\\r\\nexport class HeaderComponent {\\r\\n\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><h2 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_structure_of_an_angular_application\\\">The structure of an Angular application<\\/a><\\/h2><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.<\\/p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()<\\/code> decorator.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_decorator\\\">The decorator<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>You use the <code>@Component()<\\/code> decorator to specify metadata (HTML template and styles) about a class.<\\/p><\\/div><h3 style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\\\"><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_class\\\">The class<\\/a><\\/h3><div class=\\\"section-content\\\" style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts<\\/code>, where <code>feature<\\/code> is the name of your component. So, you could have files with names such as <code>header.component.ts<\\/code>, <code>signup.component.ts<\\/code>, or <code>feed.component.ts<\\/code>. You create a component with a <code>@Component()<\\/code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:<\\/p><\\/div><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-item\',\\r\\n    \\/\\/ the following metadata specifies the location of the other parts of the component\\r\\n  templateUrl: \'.\\/item.component.html\',\\r\\n  styleUrls: [\'.\\/item.component.css\']\\r\\n})\\r\\n\\r\\nexport class ItemComponent {\\r\\n\\/\\/ your code goes here\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><br>This component is called <code>ItemComponent<\\/code>, and its selector is <code>app-item<\\/code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><strong>NOTE:<\\/strong> The name of the component above is <code>ItemComponent<\\/code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><pre style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><code class=\\\"language-typescript\\\">export class HelloWorldComponent implements OnInit {\\r\\n\\r\\n    constructor() { }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n    }\\r\\n\\r\\n}<\\/code><\\/pre><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>The next line of code <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">export class HelloWorldComponent<\\/code> denotes that this is a class with name \\\"HelloWorldComponent\\\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">import<\\/code> keyword.<\\/p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\\\"hljs language-ts\\\" style=\\\"background-color:rgb(243,243,243);color:rgb(68,68,68);\\\">ngOnInit()<\\/code> is a lifecycle hook which in itself is a big concept in Angular.<\\/p><h3>What are Lifecycle Hooks?<\\/h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.<\\/p><blockquote><p>ngOnChanges = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>When an input\\/output binding value changes.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After the first <\\/span><\\/span><code style=\\\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\\\">ngOnChanges.<\\/code><\\/p><\\/blockquote><blockquote><p>ngDoCheck = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Developer\'s custom change detection.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After component content initialized.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterContentChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of component content.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewInit = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>fter a component\'s views are initialized.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngAfterViewChecked = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>After every check of a component\'s views.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><blockquote><p>ngOnDestroy = <span style=\\\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\\\"><span>Just before the component\\/directive is destroyed.&nbsp; &nbsp; &nbsp;&nbsp;<\\/span><\\/span><\\/p><\\/blockquote><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#the_html_template\\\">The HTML template<\\/a><\\/h3><div class=\\\"section-content\\\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.<\\/p><p>To refer to an external HTML file, use the <code>templateUrl<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\'\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>To write inline HTML, use the <code>template<\\/code> property and write your HTML within backticks:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  template: `&lt;h1&gt;Hi!&lt;\\/h1&gt;`,\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;{{ title }}&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title<\\/code> comes from the component class:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component ({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n\\r\\nexport class AppComponent {\\r\\n    title = \'To do application\';\\r\\n}\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>When the application loads the component and its template, the browser sees the following:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: html notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">&lt;h1&gt;To do application&lt;\\/h1&gt;\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><h3><a style=\\\"text-decoration:none;\\\" href=\\\"https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Learn\\/Tools_and_testing\\/Client-side_JavaScript_frameworks\\/Angular_getting_started#styles\\\">Styles<\\/a><\\/h3><div class=\\\"section-content\\\"><p>A component can inherit global styles from the application\'s <code>styles.css<\\/code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()<\\/code> decorator or specify the path to a CSS file.<\\/p><p>To include the styles directly in the component decorator, use the <code>styles<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styles: [\'h1 { color: red; }\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><p>&nbsp;<\\/p><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls<\\/code> property:<\\/p><div class=\\\"code-example\\\"><pre class=\\\"brush: js notranslate\\\" style=\\\"border:1px solid transparent;\\\"><code class=\\\"language-javascript\\\">@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.css\']\\r\\n})\\r\\n<\\/code><\\/pre><\\/div><\\/div><\\/section><section style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\"><div class=\\\"section-content\\\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.<\\/p><\\/div><\\/section><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p style=\\\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\\\">&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-02-25\",\"publish_time\":\"17:11\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57', '127.0.0.1', 1, 24, 'Angular Components.', 'primary', '2023-03-04 11:47:28', '2023-03-04 11:47:28'),
(149, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-05 06:17:01', '2023-03-05 06:17:01'),
(150, 1, 'post', '{\"name\":\"Passing data between parent and child component.\",\"slug\":\"passing-data-between-parent-and-child-component\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Input, Output decorators:<\\/h2><ul><li>@Output \\u2013 A decorator that lets the child component communicates with the parent component.<\\/li><li>@Input \\u2013 A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.<\\/li><\\/ul><p>Pass data from parent to child:<\\/p><p>suppose we have a child component named as child.<\\/p><p>child.component.ts<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\/\\/ we import the `Input` decorator from Angular Core first.\\r\\nimport { Component, Input, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.css\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit {\\r\\n\\r\\n  \\/\\/ in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\\r\\n\\r\\n  @Input () authorName: string | undefined;\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-03-05\",\"publish_time\":\"12:24\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 30, 'Passing data between parent and child component.', 'info', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(151, 1, 'post', '{\"name\":\"Passing data between parent and child component.\",\"slug\":\"passing-data-between-parent-and-child-component\",\"slug_id\":\"76\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Input, Output decorators:<\\/h2><ul><li>@Output \\u2013 A decorator that lets the child component communicates with the parent component.<\\/li><li>@Input \\u2013 A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.<\\/li><\\/ul><p>Pass data from parent to child:<\\/p><p>suppose we have a child component named as child.<\\/p><p>child.component.ts<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\/\\/ we import the `Input` decorator from Angular Core first.\\r\\nimport { Component, Input, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.css\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit {\\r\\n\\r\\n  \\/\\/ in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\\r\\n\\r\\n  @Input () authorName: string | undefined;\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}<\\/code><\\/pre><p>As shown above, the @Input decorator is applied to the authorName property, consequently decorating it. This implies that the value of the authorName will be derived from the parent component.<\\/p><p>child component view =<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt; The author name is, {{authorName}}&lt;\\/p&gt;<\\/code><\\/pre><p>Using parent component. Now that we have defined our authorName property in the child component, let us see how we can pass it a value from the parent component.<\\/p><p>In the app.component.html which is our parent component, do some changes:<\\/p><p>app.component.ts:<\\/p><pre><code class=\\\"language-plaintext\\\">export class AppComponent{\\r\\n\\tname = \\\"Mr. Jaat\\\";\\r\\n}<\\/code><\\/pre><p>Now that we have the author name, the parent component passes this value to the child component with @Output decorator:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\"&gt;&lt;\\/app-child&gt;<\\/code><\\/pre><p>In the above example, we pass the value of the authorName using the parent name property component and assigned the value to it.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-05\",\"publish_time\":\"12:24\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 30, 'Passing data between parent and child component.', 'primary', '2023-03-05 07:14:53', '2023-03-05 07:14:53'),
(152, 1, 'post', '{\"name\":\"Passing data between parent and child component.\",\"slug\":\"passing-data-between-parent-and-child-component\",\"slug_id\":\"76\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Input, Output decorators:<\\/h2><ul><li>@Output \\u2013 A decorator that lets the child component communicates with the parent component.<\\/li><li>@Input \\u2013 A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.<\\/li><\\/ul><p>Pass data from parent to child:<\\/p><p>suppose we have a child component named as child.<\\/p><p>child.component.ts<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\/\\/ we import the `Input` decorator from Angular Core first.\\r\\nimport { Component, Input, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.css\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit {\\r\\n\\r\\n  \\/\\/ in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\\r\\n\\r\\n  @Input() authorName: string | undefined;\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}<\\/code><\\/pre><p>As shown above, the @Input decorator is applied to the authorName property, consequently decorating it. This implies that the value of the authorName will be derived from the parent component.<\\/p><p>child component view =<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt; The author name is, {{authorName}}&lt;\\/p&gt;<\\/code><\\/pre><p>Using parent component. Now that we have defined our authorName property in the child component, let us see how we can pass it a value from the parent component.<\\/p><p>In the app.component.html which is our parent component, do some changes:<\\/p><p>app.component.ts:<\\/p><pre><code class=\\\"language-plaintext\\\">export class AppComponent{\\r\\n\\tname = \\\"Mr. Jaat\\\";\\r\\n}<\\/code><\\/pre><p>Now that we have the author name, the parent component passes this value to the child component with @Output decorator:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\"&gt;&lt;\\/app-child&gt;<\\/code><\\/pre><p>In the above example, we pass the value of the authorName using the parent name property component and assigned the value to it.<\\/p><p>Output\\u2192<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/input-decorator.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-05\",\"publish_time\":\"12:24\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 30, 'Passing data between parent and child component.', 'primary', '2023-03-05 07:22:25', '2023-03-05 07:22:25'),
(153, 1, 'post', '{\"name\":\"Passing data between parent and child component.\",\"slug\":\"passing-data-between-parent-and-child-component\",\"slug_id\":\"76\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Input, Output decorators:<\\/h2><ul><li>@Output \\u2013 A decorator that lets the child component communicates with the parent component.<\\/li><li>@Input \\u2013 A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.<\\/li><\\/ul><p>Pass data from parent to child:<\\/p><p>suppose we have a child component named as child.<\\/p><p>child.component.ts<\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\/\\/ we import the `Input` decorator from Angular Core first.\\r\\nimport { Component, Input, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.css\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit {\\r\\n\\r\\n  \\/\\/ in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\\r\\n\\r\\n  @Input() authorName: string | undefined;\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}<\\/code><\\/pre><p>As shown above, the @Input decorator is applied to the authorName property, consequently decorating it. This implies that the value of the authorName will be derived from the parent component.<\\/p><p>child component view =<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt; The author name is, {{authorName}}&lt;\\/p&gt;<\\/code><\\/pre><p>Using parent component. Now that we have defined our authorName property in the child component, let us see how we can pass it a value from the parent component.<\\/p><p>In the app.component.html which is our parent component, do some changes:<\\/p><p>app.component.ts:<\\/p><pre><code class=\\\"language-plaintext\\\">export class AppComponent{\\r\\n\\tname = \\\"Mr. Jaat\\\";\\r\\n}<\\/code><\\/pre><p>Now that we have the author name, the parent component passes this value to the child component with @Output decorator:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\"&gt;&lt;\\/app-child&gt;<\\/code><\\/pre><p>In the above example, we pass the value of the authorName using the parent name property component and assigned the value to it.<\\/p><p>Output\\u2192<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/input-decorator.png\\\" alt=\\\"input-decorator.png\\\"><\\/figure><h2>How does Angular`s @Output work?<\\/h2><p>The decorator allows for the sharing of data from child component. It invokes an event that in turn notifies the parent component.<\\/p><p>child.component.ts<\\/p><pre><code class=\\\"language-plaintext\\\">import { Component, EventEmitter, Input, OnInit, Output } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.scss\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit{\\r\\n\\r\\n  @Input() authorName: string | undefined; \\/\\/ used before\\r\\n  @Output() newEvent = new EventEmitter&lt;string&gt;(); \\/\\/ event emitter\\r\\n  constructor(){\\r\\n    console.log(\\\"child constructor is called.\\\");\\r\\n  }\\r\\n\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"child Oninit is called.\\\");\\r\\n  }\\r\\n\\r\\n  buttonClicked(){\\r\\n    this.newEvent.emit(\\\"Message from child\\\");\\r\\n  }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>child-component.html<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;The author name is: {{authorName}}&lt;\\/p&gt;\\r\\n&lt;button (click)=\\\"buttonClicked\\\"&gt;&lt;\\/button&gt;<\\/code><\\/pre><p>app-component.html:<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\" (newEvent)=\\\"receiveFromChild($event)\\\"&gt;&lt;\\/app-child&gt;\\r\\n&lt;p&gt; The child message: {{msg}}&lt;\\/p&gt;<\\/code><\\/pre><p>In the above example, we may encounter (newEvent)=\\\"receiveFromChild($event)\\\" = this means that when the parent component receives the newEvent then it will call the receiveFormChild function with the $event as the argument.<\\/p><p>app-component.ts:<\\/p><pre><code class=\\\"language-plaintext\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.scss\']\\r\\n})\\r\\nexport class AppComponent {\\r\\n  title = \'angular-app\';\\r\\n  name = \\\"Mr. Jaat\\\";\\r\\n\\r\\n  msg = \\\"\\\";\\r\\n\\r\\n  receiveFromChild(msg:any){\\r\\n    this.msg = msg;\\r\\n  }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-05\",\"publish_time\":\"12:24\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 30, 'Passing data between parent and child component.', 'primary', '2023-03-05 07:52:39', '2023-03-05 07:52:39');
INSERT INTO `audit_histories` (`id`, `user_id`, `module`, `request`, `action`, `user_agent`, `ip_address`, `reference_user`, `reference_id`, `reference_name`, `type`, `created_at`, `updated_at`) VALUES
(154, 1, 'post', '{\"name\":\"Passing data between parent and child component.\",\"slug\":\"passing-data-between-parent-and-child-component\",\"slug_id\":\"76\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<h2>Input, Output decorators:<\\/h2><ul><li>@Output \\u2013 A decorator that lets the child component communicates with the parent component.<\\/li><li>@Input \\u2013 A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.<\\/li><\\/ul><p>Pass data from parent to child:<\\/p><p>suppose we have a child component named as child.<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">child.component.ts:<\\/span><\\/p><pre><code class=\\\"language-typescript\\\">\\r\\n\\/\\/ we import the `Input` decorator from Angular Core first.\\r\\nimport { Component, Input, OnInit } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.css\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit {\\r\\n\\r\\n  \\/\\/ in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\\r\\n\\r\\n  @Input() authorName: string | undefined;\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n}<\\/code><\\/pre><p>As shown above, the @Input decorator is applied to the authorName property, consequently decorating it. This implies that the value of the authorName will be derived from the parent component.<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">child-component.html:<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt; The author name is, {{authorName}}&lt;\\/p&gt;<\\/code><\\/pre><p>Using parent component. Now that we have defined our authorName property in the child component, let us see how we can pass it a value from the parent component.<\\/p><p>In the app.component.html which is our parent component, do some changes:<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">app.component.ts:<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">export class AppComponent{\\r\\n\\tname = \\\"Mr. Jaat\\\";\\r\\n}<\\/code><\\/pre><p>Now that we have the author name, the parent component passes this value to the child component with @Output decorator:<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">app-component.html:<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\"&gt;&lt;\\/app-child&gt;<\\/code><\\/pre><p>In the above example, we pass the value of the authorName using the parent name property component and assigned the value to it.<\\/p><p>Output\\u2192<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/input-decorator.png\\\" alt=\\\"input-decorator.png\\\"><\\/figure><h2>How does Angular`s @Output work?<\\/h2><p>The decorator allows for the sharing of data from child component. It invokes an event that in turn notifies the parent component.<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">child.component.ts<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">import { Component, EventEmitter, Input, OnInit, Output } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-child\',\\r\\n  templateUrl: \'.\\/child.component.html\',\\r\\n  styleUrls: [\'.\\/child.component.scss\']\\r\\n})\\r\\nexport class ChildComponent implements OnInit{\\r\\n\\r\\n  @Input() authorName: string | undefined; \\/\\/ used before\\r\\n  @Output() newEvent = new EventEmitter&lt;string&gt;(); \\/\\/ event emitter\\r\\n  constructor(){\\r\\n    console.log(\\\"child constructor is called.\\\");\\r\\n  }\\r\\n\\r\\n  ngOnInit():void{\\r\\n    console.log(\\\"child Oninit is called.\\\");\\r\\n  }\\r\\n\\r\\n  buttonClicked(){\\r\\n    this.newEvent.emit(\\\"Message from child\\\");\\r\\n  }\\r\\n\\r\\n}\\r\\n<\\/code><\\/pre><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">child-component.html<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;p&gt;The author name is: {{authorName}}&lt;\\/p&gt;\\r\\n&lt;button (click)=\\\"buttonClicked\\\"&gt;&lt;\\/button&gt;<\\/code><\\/pre><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">app-component.html:<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">&lt;app-child [authorName]=\\\"name\\\" (newEvent)=\\\"receiveFromChild($event)\\\"&gt;&lt;\\/app-child&gt;\\r\\n&lt;p&gt; The child message: {{msg}}&lt;\\/p&gt;<\\/code><\\/pre><p>In the above example, we may encounter (newEvent)=\\\"receiveFromChild($event)\\\" = this means that when the parent component receives the newEvent then it will call the receiveFormChild function with the $event as the argument.<\\/p><p><span style=\\\"background-color:hsl(0, 0%, 90%);\\\">app-component.ts:<\\/span><\\/p><pre><code class=\\\"language-plaintext\\\">import { Component } from \'@angular\\/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-root\',\\r\\n  templateUrl: \'.\\/app.component.html\',\\r\\n  styleUrls: [\'.\\/app.component.scss\']\\r\\n})\\r\\nexport class AppComponent {\\r\\n  title = \'angular-app\';\\r\\n  name = \\\"Mr. Jaat\\\";\\r\\n\\r\\n  msg = \\\"\\\";\\r\\n\\r\\n  receiveFromChild(msg:any){\\r\\n    this.msg = msg;\\r\\n  }\\r\\n\\r\\n}<\\/code><\\/pre><p>Output when button clicked:<\\/p><figure class=\\\"image\\\"><img src=\\\"http:\\/\\/127.0.0.1:8000\\/storage\\/child-to-parent.png\\\"><\\/figure><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-05\",\"publish_time\":\"12:24\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 30, 'Passing data between parent and child component.', 'primary', '2023-03-05 08:00:45', '2023-03-05 08:00:45'),
(155, 1, 'to the system', NULL, 'logged in', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 0, 1, 'System Admin', 'info', '2023-03-06 10:46:47', '2023-03-06 10:46:47'),
(156, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"0\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">#firstNameInput<\\/span> declares a <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">firstNameInput<\\/span> variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"update_time_to_current\":\"0\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'created', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'info', '2023-03-06 10:51:50', '2023-03-06 10:51:50'),
(157, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"77\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>#firstNameInput<\\/span><\\/span> declares a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>firstNameInput<\\/span><\\/span> variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"text\\\" #firstNameInput&gt;\\r\\n&lt;input type=\\\"text\\\" #lastNameInput&gt;<\\/code><\\/pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;button (click)=\\\"show(lastNameInput)\\\"&gt;Show&lt;\\/button&gt;<\\/code><\\/pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n\\tconsole.log(lastName.value);\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'primary', '2023-03-06 10:57:26', '2023-03-06 10:57:26'),
(158, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"77\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>#firstNameInput <\\/span><\\/span>declares a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>firstNameInput <\\/span><\\/span>variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"text\\\" #firstNameInput&gt;\\r\\n&lt;input type=\\\"text\\\" #lastNameInput&gt;<\\/code><\\/pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;button (click)=\\\"show(lastNameInput)\\\"&gt;Show&lt;\\/button&gt;<\\/code><\\/pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n\\tconsole.log(lastName.value);\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'primary', '2023-03-06 11:08:23', '2023-03-06 11:08:23'),
(159, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"77\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>#firstNameInput <\\/span><\\/span>declares a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>firstNameInput <\\/span><\\/span>variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"text\\\" #firstNameInput&gt;\\r\\n&lt;input type=\\\"text\\\" #lastNameInput&gt;<\\/code><\\/pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;button (click)=\\\"show(lastNameInput)\\\"&gt;Show&lt;\\/button&gt;<\\/code><\\/pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n\\tconsole.log(lastName.value);\\r\\n}<\\/code><\\/pre><p>Usually, the reference variable can only be accessed inside the template. However, you can use <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">ViewChild<\\/span> decorator to reference it inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">import {ViewChild, ElementRef} from \'@angular\\/core\'\\r\\n\\/\\/ Reference firstNameInput variable inside component\\r\\n@ViewChild(\'firstNameInput\') nameInputRef: ElementRef;<\\/code><\\/pre><p>After that, you &nbsp;can use <span style=\\\"background-color:hsl(0, 0%, 90%);\\\">this.nameInputRef<\\/span> anywhere inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n  this.fullName = this.nameInputRef.nativeElement.value + \' \' + lastName.value;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'primary', '2023-03-06 11:14:04', '2023-03-06 11:14:04'),
(160, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"77\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>In Angular, components have a template property, that holds elements and other components. A template reference variable is a feature that allows us to gain access to a part of our template.<\\/p><p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>#firstNameInput <\\/span><\\/span>declares a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>firstNameInput <\\/span><\\/span>variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"text\\\" #firstNameInput&gt;\\r\\n&lt;input type=\\\"text\\\" #lastNameInput&gt;<\\/code><\\/pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;button (click)=\\\"show(lastNameInput)\\\"&gt;Show&lt;\\/button&gt;<\\/code><\\/pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n\\tconsole.log(lastName.value);\\r\\n}<\\/code><\\/pre><p>Usually, the reference variable can only be accessed inside the template. However, you can use <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>ViewChild<\\/span><\\/span> decorator to reference it inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">import {ViewChild, ElementRef} from \'@angular\\/core\'\\r\\n\\/\\/ Reference firstNameInput variable inside component\\r\\n@ViewChild(\'firstNameInput\') nameInputRef: ElementRef;<\\/code><\\/pre><p>After that, you &nbsp;can use <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>this.nameInputRef<\\/span><\\/span> anywhere inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n  this.fullName = this.nameInputRef.nativeElement.value + \' \' + lastName.value;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'primary', '2023-03-06 11:20:05', '2023-03-06 11:20:05'),
(161, 1, 'post', '{\"name\":\"Reference Variables\",\"slug\":\"reference-variables\",\"slug_id\":\"77\",\"is_slug_editable\":\"1\",\"model\":\"Botble\\\\Blog\\\\Models\\\\Post\",\"description\":null,\"is_featured\":\"0\",\"content\":\"<p>In Angular, components have a template property, that holds elements and other components. A template reference variable is a feature that allows us to gain access to a part of our template.<\\/p><p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.<\\/p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>#firstNameInput <\\/span><\\/span>declares a <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>firstNameInput <\\/span><\\/span>variable on an <strong>&lt;input&gt;<\\/strong> element.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;input type=\\\"text\\\" #firstNameInput&gt;\\r\\n&lt;input type=\\\"text\\\" #lastNameInput&gt;<\\/code><\\/pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.<\\/p><pre><code class=\\\"language-plaintext\\\">&lt;button (click)=\\\"show(lastNameInput)\\\"&gt;Show&lt;\\/button&gt;<\\/code><\\/pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n\\tconsole.log(lastName.value);\\r\\n}<\\/code><\\/pre><p>Usually, the reference variable can only be accessed inside the template. However, you can use <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>ViewChild <\\/span><\\/span>decorator to reference it inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">import {ViewChild, ElementRef} from \'@angular\\/core\'\\r\\n\\/\\/ Reference firstNameInput variable inside component\\r\\n@ViewChild(\'firstNameInput\') nameInputRef: ElementRef;<\\/code><\\/pre><p>After that, you &nbsp;can use <span style=\\\"background-color:hsl(0,0%,90%);\\\"><span>this.nameInputRef <\\/span><\\/span>anywhere inside your component.<\\/p><pre><code class=\\\"language-plaintext\\\">show(lastName: HTMLInputElement){\\r\\n  this.fullName = this.nameInputRef.nativeElement.value + \' \' + lastName.value;\\r\\n}<\\/code><\\/pre><p>&nbsp;<\\/p><p>&nbsp;<\\/p>\",\"video_link\":null,\"video_embed_code\":null,\"video_upload_id\":null,\"gallery\":null,\"seo_meta\":{\"seo_title\":null,\"seo_description\":null},\"submit\":\"apply\",\"language\":\"en_US\",\"publish_date\":\"2023-03-06\",\"publish_time\":\"16:17\",\"time_to_read\":null,\"layout\":null,\"status\":\"published\",\"author_id\":\"1\",\"format_type\":null,\"categories\":[\"1\"],\"image\":null,\"tag\":null,\"comment_status\":\"1\",\"show_toc_in_content\":\"yes\"}', 'updated', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63', '127.0.0.1', 1, 31, 'Reference Variables', 'primary', '2023-03-06 11:22:30', '2023-03-06 11:22:30');

-- --------------------------------------------------------

--
-- Table structure for table `bb_comments`
--

CREATE TABLE `bb_comments` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `comment` longtext DEFAULT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(120) NOT NULL,
  `ip_address` varchar(39) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `like_count` int(11) NOT NULL DEFAULT 0,
  `reply_count` int(11) NOT NULL DEFAULT 0,
  `parent_id` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `bb_comments`
--

INSERT INTO `bb_comments` (`id`, `comment`, `reference_id`, `reference_type`, `ip_address`, `user_id`, `status`, `like_count`, `reply_count`, `parent_id`, `created_at`, `updated_at`) VALUES
(1, 'March Hare. \'I didn\'t write it, and burning with curiosity, she ran with all speed back to the.', 1, 'Botble\\Blog\\Models\\Post', '155.253.221.10', 8, 'published', 0, 0, 0, '2023-02-14 11:46:33', '2023-02-22 12:16:51'),
(2, 'King. \'It began with the Duchess, as she came upon a neat little house, and have next to her. \'I.', 1, 'Botble\\Blog\\Models\\Post', '58.197.195.168', 3, 'published', 0, 2, 0, '2023-02-08 01:44:41', '2023-02-22 12:16:51'),
(3, 'Alice. \'Now we shall have to beat time when she turned the corner, but the Dodo could not swim. He.', 1, 'Botble\\Blog\\Models\\Post', '15.147.158.111', 10, 'published', 0, 0, 0, '2023-02-18 07:08:30', '2023-02-22 12:16:51'),
(4, 'Gryphon. Alice did not like to show you! A little bright-eyed terrier, you know, as we were. My.', 1, 'Botble\\Blog\\Models\\Post', '84.53.202.249', 10, 'published', 0, 0, 0, '2023-02-09 13:46:41', '2023-02-22 12:16:51'),
(5, 'I know who I am! But I\'d better take him his fan and a large flower-pot that stood near the house.', 1, 'Botble\\Blog\\Models\\Post', '155.124.39.171', 6, 'published', 0, 0, 0, '2023-02-20 16:50:34', '2023-02-22 12:16:51'),
(6, 'White Rabbit read out, at the bottom of a dance is it?\' \'Why,\' said the King. Here one of them.\'.', 1, 'Botble\\Blog\\Models\\Post', '122.245.118.172', 8, 'published', 0, 0, 0, '2023-01-25 19:38:12', '2023-02-22 12:16:51'),
(7, 'She got up and bawled out, \"He\'s murdering the time! Off with his knuckles. It was so full of the.', 1, 'Botble\\Blog\\Models\\Post', '117.217.237.232', 8, 'published', 0, 0, 2, '2023-02-12 15:53:38', '2023-02-22 12:16:51'),
(8, 'She did not notice this question, but hurriedly went on, \'What HAVE you been doing here?\' \'May it.', 1, 'Botble\\Blog\\Models\\Post', '18.162.164.150', 5, 'published', 0, 0, 2, '2023-02-12 23:18:53', '2023-02-22 12:16:51'),
(9, 'Gryphon, and the jury wrote it down into its nest. Alice crouched down among the party. Some of.', 2, 'Botble\\Blog\\Models\\Post', '163.224.253.81', 2, 'published', 0, 1, 0, '2023-01-30 00:39:35', '2023-02-22 12:16:51'),
(10, 'Alice went on, looking anxiously about as she passed; it was empty: she did not seem to be\"--or if.', 2, 'Botble\\Blog\\Models\\Post', '213.21.247.248', 8, 'published', 0, 0, 0, '2023-02-20 07:53:49', '2023-02-22 12:16:51'),
(11, 'Come on!\' \'Everybody says \"come on!\" here,\' thought Alice, as she could, \'If you do. I\'ll set.', 2, 'Botble\\Blog\\Models\\Post', '134.51.127.33', 8, 'published', 0, 0, 0, '2023-02-15 18:50:48', '2023-02-22 12:16:51'),
(12, 'Alice said very humbly; \'I won\'t interrupt again. I dare say you\'re wondering why I don\'t remember.', 2, 'Botble\\Blog\\Models\\Post', '150.140.225.215', 5, 'published', 0, 1, 0, '2023-02-01 14:57:28', '2023-02-22 12:16:51'),
(13, 'Alice, jumping up in such a nice soft thing to nurse--and she\'s such a subject! Our family always.', 2, 'Botble\\Blog\\Models\\Post', '75.169.239.159', 8, 'published', 0, 0, 0, '2023-02-20 11:53:01', '2023-02-22 12:16:51'),
(14, 'Mock Turtle. \'Seals, turtles, salmon, and so on; then, when you\'ve cleared all the way YOU.', 2, 'Botble\\Blog\\Models\\Post', '75.16.123.114', 8, 'published', 0, 0, 0, '2023-02-09 19:02:26', '2023-02-22 12:16:51'),
(15, 'And the Eaglet bent down its head impatiently, and walked a little girl or a serpent?\' \'It matters.', 2, 'Botble\\Blog\\Models\\Post', '136.140.222.16', 3, 'published', 0, 0, 9, '2023-02-19 19:24:27', '2023-02-22 12:16:51'),
(16, 'Rabbit began. Alice thought the whole head appeared, and then nodded. \'It\'s no business of MINE.\'.', 2, 'Botble\\Blog\\Models\\Post', '54.131.27.46', 2, 'published', 0, 0, 12, '2023-02-20 12:41:46', '2023-02-22 12:16:51'),
(17, 'Down, down, down. There was a very deep well. Either the well was very nearly carried it off. \'If.', 3, 'Botble\\Blog\\Models\\Post', '194.4.172.62', 5, 'published', 0, 0, 0, '2023-02-07 12:02:00', '2023-02-22 12:16:51'),
(18, 'Then the Queen till she had caught the baby with some surprise that the cause of this rope--Will.', 3, 'Botble\\Blog\\Models\\Post', '15.101.166.206', 6, 'published', 0, 0, 0, '2023-01-31 18:12:06', '2023-02-22 12:16:51'),
(19, 'I needn\'t be so stingy about it, and on it in time,\' said the Mouse was swimming away from her as.', 3, 'Botble\\Blog\\Models\\Post', '212.121.37.216', 7, 'published', 0, 0, 0, '2023-02-01 09:34:16', '2023-02-22 12:16:51'),
(20, 'I can go back by railway,\' she said to herself; \'I should have liked teaching it tricks very much.', 3, 'Botble\\Blog\\Models\\Post', '57.61.27.97', 6, 'published', 0, 0, 0, '2023-02-12 10:16:57', '2023-02-22 12:16:51'),
(21, 'Alice could speak again. In a minute or two the Caterpillar called after her. \'I\'ve something.', 3, 'Botble\\Blog\\Models\\Post', '207.143.223.162', 3, 'published', 0, 2, 0, '2023-02-02 10:23:24', '2023-02-22 12:16:51'),
(22, 'Dinah, and saying \"Come up again, dear!\" I shall be punished for it flashed across her mind that.', 3, 'Botble\\Blog\\Models\\Post', '21.192.62.63', 1, 'published', 0, 0, 0, '2023-01-29 18:11:11', '2023-02-22 12:16:51'),
(23, 'She is such a nice little histories about children who had been anything near the entrance of the.', 3, 'Botble\\Blog\\Models\\Post', '159.156.40.170', 4, 'published', 0, 0, 21, '2023-02-14 13:34:31', '2023-02-22 12:16:51'),
(24, 'Gryphon. \'How the creatures wouldn\'t be so proud as all that.\' \'With extras?\' asked the Gryphon.', 3, 'Botble\\Blog\\Models\\Post', '241.191.56.143', 1, 'published', 0, 0, 21, '2023-02-11 09:28:45', '2023-02-22 12:16:51'),
(25, 'But they HAVE their tails in their mouths; and the jury had a bone in his note-book, cackled out.', 21, 'Botble\\Blog\\Models\\Post', '1.2.166.129', 2, 'published', 0, 1, 0, '2023-02-03 14:46:20', '2023-02-22 12:16:51'),
(26, 'Rabbit whispered in a great hurry; \'and their names were Elsie, Lacie, and Tillie; and they walked.', 21, 'Botble\\Blog\\Models\\Post', '210.146.178.178', 1, 'published', 0, 0, 0, '2023-01-25 12:07:02', '2023-02-22 12:16:51'),
(27, 'I get\" is the capital of Paris, and Paris is the same as they lay on the floor: in another moment.', 21, 'Botble\\Blog\\Models\\Post', '138.122.39.29', 2, 'published', 0, 1, 0, '2023-02-18 23:28:54', '2023-02-22 12:16:51'),
(28, 'Mock Turtle; \'but it doesn\'t matter much,\' thought Alice, \'shall I NEVER get any older than you.', 21, 'Botble\\Blog\\Models\\Post', '145.180.184.49', 1, 'published', 0, 0, 0, '2023-02-02 18:36:37', '2023-02-22 12:16:51'),
(29, 'Alice, so please your Majesty,\' he began, \'for bringing these in: but I think you\'d take a fancy.', 21, 'Botble\\Blog\\Models\\Post', '14.151.165.16', 2, 'published', 0, 0, 0, '2023-02-20 13:22:46', '2023-02-22 12:16:51'),
(30, 'WAS a narrow escape!\' said Alice, \'because I\'m not used to read fairy-tales, I fancied that kind.', 21, 'Botble\\Blog\\Models\\Post', '65.100.154.234', 1, 'published', 0, 0, 0, '2023-01-27 10:19:37', '2023-02-22 12:16:51'),
(31, 'Gryphon. \'Well, I should say \"With what porpoise?\"\' \'Don\'t you mean by that?\' said the March Hare.', 21, 'Botble\\Blog\\Models\\Post', '223.155.126.145', 3, 'published', 0, 0, 27, '2023-02-22 12:09:03', '2023-02-22 12:16:51'),
(32, 'Come on!\' \'Everybody says \"come on!\" here,\' thought Alice, \'or perhaps they won\'t walk the way.', 21, 'Botble\\Blog\\Models\\Post', '184.55.240.96', 3, 'published', 0, 0, 25, '2023-02-16 21:39:01', '2023-02-22 12:16:51'),
(33, 'However, she soon made out the answer to shillings and pence. \'Take off your hat,\' the King was.', 22, 'Botble\\Blog\\Models\\Post', '152.49.28.178', 1, 'published', 0, 1, 0, '2023-02-15 17:15:31', '2023-02-22 12:16:51'),
(34, 'King. The next witness was the first sentence in her haste, she had been wandering, when a sharp.', 22, 'Botble\\Blog\\Models\\Post', '232.7.197.121', 5, 'published', 0, 0, 0, '2023-02-06 03:45:27', '2023-02-22 12:16:51'),
(35, 'Duchess, the Duchess! Oh! won\'t she be savage if I\'ve kept her eyes anxiously fixed on it, for she.', 22, 'Botble\\Blog\\Models\\Post', '81.4.239.179', 2, 'published', 0, 0, 0, '2023-02-03 21:25:48', '2023-02-22 12:16:51'),
(36, 'Mock Turtle, and said to Alice; and Alice looked round, eager to see what I eat\" is the same size.', 22, 'Botble\\Blog\\Models\\Post', '127.205.67.254', 3, 'published', 0, 0, 0, '2023-02-03 16:24:23', '2023-02-22 12:16:51'),
(37, 'Soup! \'Beautiful Soup! Who cares for fish, Game, or any other dish? Who would not open any of.', 22, 'Botble\\Blog\\Models\\Post', '166.96.128.118', 4, 'published', 0, 1, 0, '2023-02-15 16:57:28', '2023-02-22 12:16:51'),
(38, 'Hatter, with an anxious look at the top of his tail. \'As if I would talk on such a thing before.', 22, 'Botble\\Blog\\Models\\Post', '246.193.192.43', 8, 'published', 0, 0, 0, '2023-01-25 20:15:16', '2023-02-22 12:16:51'),
(39, 'Elsie, Lacie, and Tillie; and they sat down with her head!\' Those whom she sentenced were taken.', 22, 'Botble\\Blog\\Models\\Post', '46.139.126.3', 6, 'published', 0, 0, 37, '2023-02-14 04:33:28', '2023-02-22 12:16:51'),
(40, 'Tarts? The King turned pale, and shut his eyes.--\'Tell her about the twentieth time that day. \'No.', 22, 'Botble\\Blog\\Models\\Post', '139.126.2.21', 3, 'published', 0, 0, 33, '2023-02-14 05:33:24', '2023-02-22 12:16:51'),
(41, 'But if I\'m Mabel, I\'ll stay down here with me! There are no mice in the sky. Twinkle, twinkle--\"\'.', 23, 'Botble\\Blog\\Models\\Post', '152.120.48.56', 8, 'published', 0, 0, 0, '2023-02-14 07:48:28', '2023-02-22 12:16:51'),
(42, 'And here Alice began to repeat it, but her voice sounded hoarse and strange, and the three.', 23, 'Botble\\Blog\\Models\\Post', '205.106.108.221', 5, 'published', 0, 0, 0, '2023-02-17 10:53:11', '2023-02-22 12:16:51'),
(43, 'But at any rate: go and live in that poky little house, on the bank, with her friend. When she got.', 23, 'Botble\\Blog\\Models\\Post', '97.85.188.238', 1, 'published', 0, 1, 0, '2023-02-13 04:41:46', '2023-02-22 12:16:51'),
(44, 'Conqueror, whose cause was favoured by the officers of the window, and on both sides at once. The.', 23, 'Botble\\Blog\\Models\\Post', '102.69.22.57', 4, 'published', 0, 1, 0, '2023-02-03 16:01:05', '2023-02-22 12:16:51'),
(45, 'Gryphon. \'It\'s all her life. Indeed, she had never before seen a rabbit with either a.', 23, 'Botble\\Blog\\Models\\Post', '227.44.171.155', 4, 'published', 0, 0, 0, '2023-02-20 06:10:31', '2023-02-22 12:16:51'),
(46, 'There was no longer to be an old Turtle--we used to it as you might like to drop the jar for fear.', 23, 'Botble\\Blog\\Models\\Post', '134.37.248.246', 4, 'published', 0, 0, 0, '2023-02-03 18:36:12', '2023-02-22 12:16:51'),
(47, 'Don\'t let me help to undo it!\' \'I shall sit here,\' the Footman went on again:-- \'I didn\'t write.', 23, 'Botble\\Blog\\Models\\Post', '42.122.173.223', 10, 'published', 0, 0, 43, '2023-02-10 14:09:36', '2023-02-22 12:16:51'),
(48, 'Alice. \'That\'s very curious!\' she thought. \'But everything\'s curious today. I think you\'d take a.', 23, 'Botble\\Blog\\Models\\Post', '251.144.133.94', 8, 'published', 0, 0, 44, '2023-02-20 03:01:12', '2023-02-22 12:16:51');

-- --------------------------------------------------------

--
-- Table structure for table `bb_comment_likes`
--

CREATE TABLE `bb_comment_likes` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `comment_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `bb_comment_recommends`
--

CREATE TABLE `bb_comment_recommends` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(120) NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `bb_comment_users`
--

CREATE TABLE `bb_comment_users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(191) NOT NULL,
  `password` varchar(191) NOT NULL,
  `user_type` varchar(255) NOT NULL DEFAULT 'Botble\\ACL\\Models\\User',
  `avatar_id` int(10) UNSIGNED DEFAULT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `parent_id` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `description` varchar(400) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `author_id` int(11) NOT NULL,
  `author_type` varchar(255) NOT NULL DEFAULT 'Botble\\ACL\\Models\\User',
  `icon` varchar(60) DEFAULT NULL,
  `order` tinyint(4) NOT NULL DEFAULT 0,
  `is_featured` tinyint(4) NOT NULL DEFAULT 0,
  `is_default` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `parent_id`, `description`, `status`, `author_id`, `author_type`, `icon`, `order`, `is_featured`, `is_default`, `created_at`, `updated_at`) VALUES
(1, 'Design', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(2, 'Lifestyle', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(3, 'Travel Tips', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(4, 'Healthy', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(5, 'Fashion', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(6, 'Hotel', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(7, 'Nature', 0, NULL, 'published', 1, 'Botble\\ACL\\Models\\User', NULL, 0, 0, 0, '2023-02-22 12:16:42', '2023-02-22 12:16:42');

-- --------------------------------------------------------

--
-- Table structure for table `categories_translations`
--

CREATE TABLE `categories_translations` (
  `lang_code` varchar(191) NOT NULL,
  `categories_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(400) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `categories_translations`
--

INSERT INTO `categories_translations` (`lang_code`, `categories_id`, `name`, `description`) VALUES
('vi', 1, 'Phong cách sống', NULL),
('vi', 2, 'Sức khỏe', NULL),
('vi', 3, 'Món ngon', NULL),
('vi', 4, 'Sách', NULL),
('vi', 5, 'Mẹo du lịch', NULL),
('vi', 6, 'Khách sạn', NULL),
('vi', 7, 'Thiên nhiên', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `contacts`
--

CREATE TABLE `contacts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(60) NOT NULL,
  `email` varchar(60) NOT NULL,
  `phone` varchar(60) DEFAULT NULL,
  `address` varchar(120) DEFAULT NULL,
  `subject` varchar(120) DEFAULT NULL,
  `content` longtext NOT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'unread',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `contacts`
--

INSERT INTO `contacts` (`id`, `name`, `email`, `phone`, `address`, `subject`, `content`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Prof. Reina Mraz DVM', 'pgreen@example.com', '1-417-421-6356', '4496 Pouros Flats\nLake Tad, AZ 00585-5456', 'Minus ut placeat velit laudantium.', 'Dolor minus dolor corrupti et. Unde nemo enim id hic quae. Ipsam mollitia illo rerum molestiae. Numquam consequatur perspiciatis inventore cum. Et consectetur facere beatae sit exercitationem tempore nemo. Fugiat dolor cupiditate culpa dolore. Magni pariatur vel ad et. Optio et sed harum debitis possimus a sit. Iusto saepe et officia. Tempora consequatur est nesciunt aut.', 'read', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(2, 'August Vandervort', 'greg23@example.com', '(352) 666-0563', '8065 Okuneva Drives\nWest Kailey, IA 30479-1879', 'Aut aut voluptas aliquid.', 'Et eius quia eum in aut. Qui omnis dicta voluptate veritatis vitae. Ipsum voluptatibus perspiciatis doloremque veritatis. Maiores deleniti rem consequatur ut non soluta molestiae. Reprehenderit perferendis et accusamus et et non. Dolor rem accusamus consectetur voluptatem et eius. Pariatur rerum aliquam voluptatum nisi. Iure natus aut ut vel pariatur. Harum assumenda repudiandae ad accusantium occaecati. Et harum quo ea praesentium minus distinctio cupiditate magni.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(3, 'Ms. Macie Altenwerth PhD', 'ewald04@example.org', '812-329-9886', '55993 Geovanni Harbors\nPort Isabella, DE 17551', 'Et ut unde animi quod aut tempore.', 'Et qui ex accusantium molestias. Voluptatem voluptates commodi non reiciendis dicta quibusdam doloribus. Commodi perferendis qui suscipit et non quos accusantium. Quidem expedita quaerat corporis neque. Distinctio repudiandae libero nam vel officia animi numquam. Doloremque minima ducimus cupiditate quia dolores voluptatem. Et dolorem praesentium dolor qui. Nisi itaque molestias quia dolorem esse. Eaque ut est ipsa repudiandae. Quos repellendus enim saepe ex voluptas.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(4, 'Dortha Reichel I', 'zemlak.damon@example.org', '+1-831-867-9680', '90608 Zoila Lock Apt. 822\nLake Lula, WV 63464-2679', 'Excepturi distinctio perferendis non quae.', 'Qui qui perspiciatis ut quis ad voluptate. Consequatur temporibus excepturi quis odio velit. Praesentium sequi facilis amet rerum. Eos aut consequatur qui dolores non maxime doloremque. Ullam autem dolorum saepe quia harum. Quam assumenda qui quia. Necessitatibus aliquid et voluptatum est. Tempora beatae voluptate voluptatum doloribus qui rerum eos.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(5, 'Mrs. Shyanne Littel', 'raymundo.jacobs@example.com', '1-978-558-5804', '99071 Cordelia Forest Apt. 098\nHarveyberg, CT 60485-9928', 'Eligendi ut quos et assumenda eligendi.', 'Qui ipsam et quia. Adipisci quibusdam nisi veniam distinctio. Dolorum sapiente quasi et in. Quaerat totam repudiandae sit voluptatem. Fuga reprehenderit culpa veniam ullam. Dignissimos minima reiciendis ut est doloremque qui accusantium ipsam. Quo modi omnis facilis sapiente impedit iure est. Doloribus eaque eaque harum iusto voluptas.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(6, 'Courtney Hilpert IV', 'jarrell.schaden@example.org', '(385) 452-8850', '63202 Hessel Rapids\nSouth Trenttown, MO 51338', 'Perferendis esse ut voluptatem.', 'Laudantium repellat earum exercitationem. Ut possimus placeat vel pariatur. Et qui repellat molestiae ea alias sed maiores. Eum doloribus id et dolores. Vel voluptatem quas deleniti. Velit non eveniet perferendis atque omnis recusandae ipsam. Omnis quidem reiciendis ut animi et provident perferendis. Cum iusto omnis repellat repellat est.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(7, 'Darwin Weimann', 'kilback.nathen@example.net', '605-282-1508', '588 Darren Ports Suite 948\nNew Dessie, NH 03003-4000', 'Fugiat architecto sint minima nihil ut ut.', 'Doloremque vel voluptas facere. Quis sit voluptates est magnam deleniti. Nihil quo quas sed dolor facilis. Culpa non dolorem voluptatem voluptate nisi quidem magnam. Facilis dolores qui ducimus ducimus ad voluptas. Et a amet sapiente dolor magni rem enim. Rerum laboriosam est laborum. Natus ut odio excepturi animi. Error dolor consequatur eos ipsa harum qui expedita. Commodi labore quia ipsa.', 'read', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(8, 'Kaelyn Hodkiewicz', 'jacques06@example.org', '501-887-7455', '7432 Muhammad Meadows\nPort Jakobside, OR 20312', 'Eum ut natus eum nihil.', 'Non possimus asperiores dolorem debitis in. Molestiae voluptatibus veniam et id. Ut quasi ipsum a aut quia. Quod distinctio enim distinctio non est. Laboriosam ut omnis maxime corrupti. Aut culpa ipsum tempora est. Aut expedita iure voluptatem vel at enim. Repellat fugiat tempora quia dolor. Laborum eaque animi suscipit natus nam quia.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(9, 'Miracle Crona', 'brant.abshire@example.net', '520-807-0255', '5621 Hadley Spur\nHegmannview, NE 70997-5790', 'Officiis omnis ab hic.', 'Quasi hic dolores magni sequi. Animi nisi aliquam maxime est doloribus quia quia. Voluptatibus hic similique soluta velit doloremque necessitatibus. Possimus nihil sint rerum dolores. Eveniet eum iste eos optio et voluptatum. Assumenda dolorem consequatur expedita beatae sed delectus cupiditate. Qui dolorem non sunt odio. Velit vero non perspiciatis omnis et. Voluptatibus sapiente error modi tempora ex tenetur. Minima deserunt mollitia voluptatem ex minima sit non.', 'unread', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(10, 'Lavinia DuBuque', 'skiles.freddie@example.net', '(978) 477-7114', '6010 Sadye Route\nKhalilburgh, KS 73223-3694', 'Tenetur non corrupti voluptatem ut non saepe.', 'Cum minus temporibus et unde enim. Asperiores eaque quod perferendis suscipit accusamus voluptatum. Animi harum nostrum quaerat commodi sint tempora sit nisi. Officiis est ad et eum. Quo explicabo distinctio atque ipsum expedita eligendi. Ut et esse dignissimos temporibus id. Iure magni ut id. Corporis temporibus aut ut distinctio repudiandae dolorem eius. Quibusdam dolorum ut dolor placeat qui tempore culpa. Illo deleniti odit blanditiis autem.', 'read', '2023-02-22 12:16:28', '2023-02-22 12:16:28');

-- --------------------------------------------------------

--
-- Table structure for table `contact_replies`
--

CREATE TABLE `contact_replies` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `message` longtext NOT NULL,
  `contact_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `dashboard_widgets`
--

CREATE TABLE `dashboard_widgets` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `dashboard_widgets`
--

INSERT INTO `dashboard_widgets` (`id`, `name`, `created_at`, `updated_at`) VALUES
(1, 'widget_total_themes', '2023-02-22 12:22:29', '2023-02-22 12:22:29'),
(2, 'widget_total_users', '2023-02-22 12:22:29', '2023-02-22 12:22:29'),
(3, 'widget_total_pages', '2023-02-22 12:22:29', '2023-02-22 12:22:29'),
(4, 'widget_total_plugins', '2023-02-22 12:22:29', '2023-02-22 12:22:29'),
(5, 'widget_analytics_general', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(6, 'widget_analytics_page', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(7, 'widget_analytics_browser', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(8, 'widget_posts_recent', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(9, 'widget_analytics_referrer', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(10, 'widget_audit_logs', '2023-02-22 12:22:30', '2023-02-22 12:22:30'),
(11, 'widget_request_errors', '2023-02-22 12:22:30', '2023-02-22 12:22:30');

-- --------------------------------------------------------

--
-- Table structure for table `dashboard_widget_settings`
--

CREATE TABLE `dashboard_widget_settings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `settings` text DEFAULT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `widget_id` int(10) UNSIGNED NOT NULL,
  `order` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `status` tinyint(3) UNSIGNED NOT NULL DEFAULT 1,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `failed_jobs`
--

CREATE TABLE `failed_jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uuid` varchar(191) NOT NULL,
  `connection` text NOT NULL,
  `queue` text NOT NULL,
  `payload` longtext NOT NULL,
  `exception` longtext NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `favorite_posts`
--

CREATE TABLE `favorite_posts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `post_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `type` enum('favorite','bookmark') NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `galleries`
--

CREATE TABLE `galleries` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `description` longtext NOT NULL,
  `is_featured` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `order` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `image` varchar(255) DEFAULT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `galleries`
--

INSERT INTO `galleries` (`id`, `name`, `description`, `is_featured`, `order`, `image`, `user_id`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Perfect', 'Accusamus nihil eum amet neque in sit quis. Totam illum incidunt alias laboriosam. Consectetur hic ut dicta accusamus quos.', 1, 0, 'galleries/1.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(2, 'New Day', 'In quam ab voluptatum minus velit nemo. Voluptates quo qui quas porro. Consectetur laboriosam tenetur odit autem distinctio pariatur.', 1, 0, 'galleries/2.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(3, 'Happy Day', 'Quis consequatur saepe quibusdam sit. Dolorem voluptatem nulla in iure soluta. Est culpa dolor aliquam fugiat voluptatem ut ipsum.', 1, 0, 'galleries/3.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(4, 'Nature', 'Qui tempora inventore sed consequatur quasi facere dolores. Est occaecati minus eaque alias assumenda illo dolore. Odio a inventore sint qui cumque.', 1, 0, 'galleries/4.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(5, 'Morning', 'Velit officia et est voluptatum ex iusto atque. Iste sed et omnis quo. Odio dolor et beatae qui.', 1, 0, 'galleries/5.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(6, 'Photography', 'Optio et minus debitis consequatur neque sit. Officiis fuga repellat recusandae autem placeat. Cupiditate nostrum harum eum voluptatibus esse.', 1, 0, 'galleries/6.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(7, 'Building', 'Eum ut odio asperiores debitis numquam quo aut. Officiis sit sint quo est. Mollitia quidem corrupti cumque hic.', 1, 0, 'galleries/7.jpg', 1, 'published', '2023-02-22 12:16:28', '2023-02-22 12:16:28');

-- --------------------------------------------------------

--
-- Table structure for table `galleries_translations`
--

CREATE TABLE `galleries_translations` (
  `lang_code` varchar(191) NOT NULL,
  `galleries_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` longtext DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `galleries_translations`
--

INSERT INTO `galleries_translations` (`lang_code`, `galleries_id`, `name`, `description`) VALUES
('vi', 1, 'Hoàn hảo', NULL),
('vi', 2, 'Ngày mới', NULL),
('vi', 3, 'Ngày hạnh phúc', NULL),
('vi', 4, 'Thiên nhiên', NULL),
('vi', 5, 'Buổi sáng', NULL),
('vi', 6, 'Nghệ thuật', NULL),
('vi', 7, 'Kiến trúc', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `gallery_meta`
--

CREATE TABLE `gallery_meta` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `images` text DEFAULT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(120) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `gallery_meta`
--

INSERT INTO `gallery_meta` (`id`, `images`, `reference_id`, `reference_type`, `created_at`, `updated_at`) VALUES
(1, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 1, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(2, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 2, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(3, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 3, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(4, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 4, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(5, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 5, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(6, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 6, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(7, '\"[{\\\"img\\\":\\\"galleries\\\\\\/1.jpg\\\",\\\"description\\\":\\\"Quia nihil necessitatibus impedit nihil velit eaque. Sunt nobis dolor pariatur recusandae. Dolores ad enim voluptatem ad soluta.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/2.jpg\\\",\\\"description\\\":\\\"Fugit a consequuntur quis qui ad ratione. Illum qui omnis velit non. Placeat ad quae natus voluptas molestias.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/3.jpg\\\",\\\"description\\\":\\\"Omnis voluptates architecto voluptatem vel est. Qui deleniti ea autem et. Cumque qui nulla aut aut tempora.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/4.jpg\\\",\\\"description\\\":\\\"Vero est illo eveniet ea soluta. Voluptatibus tenetur est distinctio ut. Consequatur et qui quo nihil.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/5.jpg\\\",\\\"description\\\":\\\"Sed culpa facere maiores. Nesciunt esse commodi asperiores minus facere. Est consequatur ut ea tempora iure hic ea.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/6.jpg\\\",\\\"description\\\":\\\"Maiores neque magnam quia rerum. Consequatur quia qui qui iusto quas. Dolores ut distinctio consequatur. Sed aut eius odio velit commodi.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/7.jpg\\\",\\\"description\\\":\\\"Autem sit inventore rem eaque sed culpa aut. Atque maiores unde alias dolor quaerat. Vitae deleniti sint expedita. Ipsum eos delectus aliquam.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/8.jpg\\\",\\\"description\\\":\\\"Eaque doloribus quaerat earum qui. Aut ex doloremque sed quas porro dolorum mollitia.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/9.jpg\\\",\\\"description\\\":\\\"Et non ducimus voluptatem dolorum maiores. Animi ut ab et impedit provident omnis id. Est accusamus eum qui voluptas atque.\\\"},{\\\"img\\\":\\\"galleries\\\\\\/10.jpg\\\",\\\"description\\\":\\\"Minus quod non illo ullam et aspernatur. Provident aut similique voluptate aut adipisci. Ab et vero cum ipsam.\\\"}]\"', 7, 'Botble\\Gallery\\Models\\Gallery', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(14, NULL, 21, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:01:17', '2023-02-23 12:01:17'),
(37, NULL, 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 08:15:56', '2023-02-26 08:15:56'),
(74, NULL, 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 08:00:45', '2023-03-05 08:00:45');

-- --------------------------------------------------------

--
-- Table structure for table `gallery_meta_translations`
--

CREATE TABLE `gallery_meta_translations` (
  `lang_code` varchar(191) NOT NULL,
  `gallery_meta_id` int(11) NOT NULL,
  `images` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `jobs`
--

CREATE TABLE `jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `queue` varchar(191) NOT NULL,
  `payload` longtext NOT NULL,
  `attempts` tinyint(3) UNSIGNED NOT NULL,
  `reserved_at` int(10) UNSIGNED DEFAULT NULL,
  `available_at` int(10) UNSIGNED NOT NULL,
  `created_at` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `languages`
--

CREATE TABLE `languages` (
  `lang_id` int(10) UNSIGNED NOT NULL,
  `lang_name` varchar(120) NOT NULL,
  `lang_locale` varchar(20) NOT NULL,
  `lang_code` varchar(20) NOT NULL,
  `lang_flag` varchar(20) DEFAULT NULL,
  `lang_is_default` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `lang_order` int(11) NOT NULL DEFAULT 0,
  `lang_is_rtl` tinyint(3) UNSIGNED NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `languages`
--

INSERT INTO `languages` (`lang_id`, `lang_name`, `lang_locale`, `lang_code`, `lang_flag`, `lang_is_default`, `lang_order`, `lang_is_rtl`) VALUES
(1, 'English', 'en', 'en_US', 'us', 1, 0, 0),
(2, 'Tiếng Việt', 'vi', 'vi', 'vn', 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `language_meta`
--

CREATE TABLE `language_meta` (
  `lang_meta_id` int(10) UNSIGNED NOT NULL,
  `lang_meta_code` text DEFAULT NULL,
  `lang_meta_origin` varchar(255) NOT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(120) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `language_meta`
--

INSERT INTO `language_meta` (`lang_meta_id`, `lang_meta_code`, `lang_meta_origin`, `reference_id`, `reference_type`) VALUES
(1, 'en_US', '3c316a8763b4cc6ce6725fd168db047d', 1, 'Botble\\Menu\\Models\\MenuLocation'),
(2, 'en_US', '2878a32c261674e12c1cbe04142b8702', 1, 'Botble\\Menu\\Models\\Menu'),
(3, 'en_US', 'bc0c1dbbb2f2a350bd1eb92b8ec8fa9c', 2, 'Botble\\Menu\\Models\\Menu'),
(4, 'vi', 'ab6cdcd8fb5bc7f52d63abdff619bc80', 2, 'Botble\\Menu\\Models\\MenuLocation'),
(5, 'vi', '2878a32c261674e12c1cbe04142b8702', 3, 'Botble\\Menu\\Models\\Menu'),
(6, 'vi', 'bc0c1dbbb2f2a350bd1eb92b8ec8fa9c', 4, 'Botble\\Menu\\Models\\Menu'),
(7, 'en_US', '126959a03c9d9e60296db5af19b535c5', 1, 'Botble\\PostCollection\\Models\\PostCollection'),
(8, 'en_US', 'b1dc876b99fd4fa11a8dbaf5b9ebcf41', 2, 'Botble\\PostCollection\\Models\\PostCollection'),
(9, 'vi', 'a14fa8796e258c9dd3e476e858f86ca9', 3, 'Botble\\PostCollection\\Models\\PostCollection'),
(10, 'vi', 'cf4e5e3fec5062d3647abdedf0a9b564', 4, 'Botble\\PostCollection\\Models\\PostCollection');

-- --------------------------------------------------------

--
-- Table structure for table `media_files`
--

CREATE TABLE `media_files` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `folder_id` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `mime_type` varchar(120) NOT NULL,
  `size` int(11) NOT NULL,
  `url` varchar(255) NOT NULL,
  `options` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `media_files`
--

INSERT INTO `media_files` (`id`, `user_id`, `name`, `folder_id`, `mime_type`, `size`, `url`, `options`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 0, 'image-1', 1, 'image/jpeg', 2165, 'banners/image-1.jpg', '[]', '2023-02-22 12:16:22', '2023-02-22 12:16:22', NULL),
(2, 0, 'image-2', 1, 'image/jpeg', 2165, 'banners/image-2.jpg', '[]', '2023-02-22 12:16:22', '2023-02-22 12:16:22', NULL),
(3, 0, 'image-3', 1, 'image/jpeg', 2165, 'banners/image-3.jpg', '[]', '2023-02-22 12:16:23', '2023-02-22 12:16:23', NULL),
(4, 0, 'image-4', 1, 'image/jpeg', 2165, 'banners/image-4.jpg', '[]', '2023-02-22 12:16:23', '2023-02-22 12:16:23', NULL),
(5, 0, '1', 2, 'image/jpeg', 2165, 'galleries/1.jpg', '[]', '2023-02-22 12:16:24', '2023-02-22 12:16:24', NULL),
(6, 0, '10', 2, 'image/jpeg', 2165, 'galleries/10.jpg', '[]', '2023-02-22 12:16:24', '2023-02-22 12:16:24', NULL),
(7, 0, '2', 2, 'image/jpeg', 2165, 'galleries/2.jpg', '[]', '2023-02-22 12:16:25', '2023-02-22 12:16:25', NULL),
(8, 0, '3', 2, 'image/jpeg', 2165, 'galleries/3.jpg', '[]', '2023-02-22 12:16:25', '2023-02-22 12:16:25', NULL),
(9, 0, '4', 2, 'image/jpeg', 2165, 'galleries/4.jpg', '[]', '2023-02-22 12:16:25', '2023-02-22 12:16:25', NULL),
(10, 0, '5', 2, 'image/jpeg', 2165, 'galleries/5.jpg', '[]', '2023-02-22 12:16:26', '2023-02-22 12:16:26', NULL),
(11, 0, '6', 2, 'image/jpeg', 2165, 'galleries/6.jpg', '[]', '2023-02-22 12:16:26', '2023-02-22 12:16:26', NULL),
(12, 0, '7', 2, 'image/jpeg', 2165, 'galleries/7.jpg', '[]', '2023-02-22 12:16:27', '2023-02-22 12:16:27', NULL),
(13, 0, '8', 2, 'image/jpeg', 2165, 'galleries/8.jpg', '[]', '2023-02-22 12:16:27', '2023-02-22 12:16:27', NULL),
(14, 0, '9', 2, 'image/jpeg', 2165, 'galleries/9.jpg', '[]', '2023-02-22 12:16:27', '2023-02-22 12:16:27', NULL),
(15, 0, 'news-1', 3, 'image/jpeg', 2165, 'news/news-1.jpg', '[]', '2023-02-22 12:16:29', '2023-02-22 12:16:29', NULL),
(16, 0, 'news-10', 3, 'image/jpeg', 2165, 'news/news-10.jpg', '[]', '2023-02-22 12:16:29', '2023-02-22 12:16:29', NULL),
(17, 0, 'news-11', 3, 'image/jpeg', 2165, 'news/news-11.jpg', '[]', '2023-02-22 12:16:30', '2023-02-22 12:16:30', NULL),
(18, 0, 'news-12', 3, 'image/jpeg', 2165, 'news/news-12.jpg', '[]', '2023-02-22 12:16:30', '2023-02-22 12:16:30', NULL),
(19, 0, 'news-13', 3, 'image/jpeg', 2165, 'news/news-13.jpg', '[]', '2023-02-22 12:16:30', '2023-02-22 12:16:30', NULL),
(20, 0, 'news-14', 3, 'image/jpeg', 2165, 'news/news-14.jpg', '[]', '2023-02-22 12:16:31', '2023-02-22 12:16:31', NULL),
(21, 0, 'news-15', 3, 'image/jpeg', 2165, 'news/news-15.jpg', '[]', '2023-02-22 12:16:31', '2023-02-22 12:16:31', NULL),
(22, 0, 'news-16', 3, 'image/jpeg', 2165, 'news/news-16.jpg', '[]', '2023-02-22 12:16:32', '2023-02-22 12:16:32', NULL),
(23, 0, 'news-17', 3, 'image/jpeg', 2165, 'news/news-17.jpg', '[]', '2023-02-22 12:16:32', '2023-02-22 12:16:32', NULL),
(24, 0, 'news-18', 3, 'image/jpeg', 2165, 'news/news-18.jpg', '[]', '2023-02-22 12:16:33', '2023-02-22 12:16:33', NULL),
(25, 0, 'news-19', 3, 'image/jpeg', 2165, 'news/news-19.jpg', '[]', '2023-02-22 12:16:33', '2023-02-22 12:16:33', NULL),
(26, 0, 'news-2', 3, 'image/jpeg', 2165, 'news/news-2.jpg', '[]', '2023-02-22 12:16:33', '2023-02-22 12:16:33', NULL),
(27, 0, 'news-20', 3, 'image/jpeg', 2165, 'news/news-20.jpg', '[]', '2023-02-22 12:16:34', '2023-02-22 12:16:34', NULL),
(28, 0, 'news-21', 3, 'image/jpeg', 2165, 'news/news-21.jpg', '[]', '2023-02-22 12:16:34', '2023-02-22 12:16:34', NULL),
(29, 0, 'news-22', 3, 'image/jpeg', 2165, 'news/news-22.jpg', '[]', '2023-02-22 12:16:35', '2023-02-22 12:16:35', NULL),
(30, 0, 'news-23', 3, 'image/jpeg', 2165, 'news/news-23.jpg', '[]', '2023-02-22 12:16:35', '2023-02-22 12:16:35', NULL),
(31, 0, 'news-24', 3, 'image/jpeg', 2165, 'news/news-24.jpg', '[]', '2023-02-22 12:16:35', '2023-02-22 12:16:35', NULL),
(32, 0, 'news-3', 3, 'image/jpeg', 2165, 'news/news-3.jpg', '[]', '2023-02-22 12:16:36', '2023-02-22 12:16:36', NULL),
(33, 0, 'news-4', 3, 'image/jpeg', 2165, 'news/news-4.jpg', '[]', '2023-02-22 12:16:36', '2023-02-22 12:16:36', NULL),
(34, 0, 'news-5', 3, 'image/jpeg', 2165, 'news/news-5.jpg', '[]', '2023-02-22 12:16:37', '2023-02-22 12:16:37', NULL),
(35, 0, 'news-6', 3, 'image/jpeg', 2165, 'news/news-6.jpg', '[]', '2023-02-22 12:16:37', '2023-02-22 12:16:37', NULL),
(36, 0, 'news-7', 3, 'image/jpeg', 2165, 'news/news-7.jpg', '[]', '2023-02-22 12:16:38', '2023-02-22 12:16:38', NULL),
(37, 0, 'news-8', 3, 'image/jpeg', 2165, 'news/news-8.jpg', '[]', '2023-02-22 12:16:38', '2023-02-22 12:16:38', NULL),
(38, 0, 'news-9', 3, 'image/jpeg', 2165, 'news/news-9.jpg', '[]', '2023-02-22 12:16:38', '2023-02-22 12:16:38', NULL),
(39, 0, 'thumbnail-1', 3, 'image/jpeg', 2165, 'news/thumbnail-1.jpg', '[]', '2023-02-22 12:16:39', '2023-02-22 12:16:39', NULL),
(40, 0, 'thumbnail-2', 3, 'image/jpeg', 2165, 'news/thumbnail-2.jpg', '[]', '2023-02-22 12:16:39', '2023-02-22 12:16:39', NULL),
(41, 0, 'thumbnail-3', 3, 'image/jpeg', 2165, 'news/thumbnail-3.jpg', '[]', '2023-02-22 12:16:40', '2023-02-22 12:16:40', NULL),
(42, 0, 'thumbnail-4', 3, 'image/jpeg', 2165, 'news/thumbnail-4.jpg', '[]', '2023-02-22 12:16:40', '2023-02-22 12:16:40', NULL),
(43, 0, 'thumbnail-5', 3, 'image/jpeg', 2165, 'news/thumbnail-5.jpg', '[]', '2023-02-22 12:16:40', '2023-02-22 12:16:40', NULL),
(44, 0, 'thumbnail-6', 3, 'image/jpeg', 2165, 'news/thumbnail-6.jpg', '[]', '2023-02-22 12:16:41', '2023-02-22 12:16:41', NULL),
(45, 0, 'video1', 4, 'video/mp4', 6378345, 'videos/video1.mp4', '[]', '2023-02-22 12:16:41', '2023-02-22 12:16:41', NULL),
(46, 0, '1', 5, 'image/jpeg', 2165, 'authors/1.jpg', '[]', '2023-02-22 12:16:44', '2023-02-22 12:16:44', NULL),
(47, 0, '10', 5, 'image/jpeg', 2165, 'authors/10.jpg', '[]', '2023-02-22 12:16:45', '2023-02-22 12:16:45', NULL),
(48, 0, '2', 5, 'image/jpeg', 2165, 'authors/2.jpg', '[]', '2023-02-22 12:16:45', '2023-02-22 12:16:45', NULL),
(49, 0, '3', 5, 'image/jpeg', 2165, 'authors/3.jpg', '[]', '2023-02-22 12:16:45', '2023-02-22 12:16:45', NULL),
(50, 0, '4', 5, 'image/jpeg', 2165, 'authors/4.jpg', '[]', '2023-02-22 12:16:46', '2023-02-22 12:16:46', NULL),
(51, 0, '5', 5, 'image/jpeg', 2165, 'authors/5.jpg', '[]', '2023-02-22 12:16:46', '2023-02-22 12:16:46', NULL),
(52, 0, '6', 5, 'image/jpeg', 2165, 'authors/6.jpg', '[]', '2023-02-22 12:16:47', '2023-02-22 12:16:47', NULL),
(53, 0, '7', 5, 'image/jpeg', 2165, 'authors/7.jpg', '[]', '2023-02-22 12:16:47', '2023-02-22 12:16:47', NULL),
(54, 0, '8', 5, 'image/jpeg', 2165, 'authors/8.jpg', '[]', '2023-02-22 12:16:47', '2023-02-22 12:16:47', NULL),
(55, 0, '9', 5, 'image/jpeg', 2165, 'authors/9.jpg', '[]', '2023-02-22 12:16:48', '2023-02-22 12:16:48', NULL),
(56, 0, 'favicon', 6, 'image/png', 2165, 'general/favicon.png', '[]', '2023-02-22 12:16:52', '2023-02-22 12:16:52', NULL),
(57, 0, 'img-loading', 6, 'image/jpeg', 2165, 'general/img-loading.jpg', '[]', '2023-02-22 12:16:53', '2023-02-22 12:16:53', NULL),
(58, 0, 'logo-mobile', 6, 'image/png', 2165, 'general/logo-mobile.png', '[]', '2023-02-22 12:16:53', '2023-02-22 12:16:53', NULL),
(59, 0, 'logo-tablet', 6, 'image/png', 2165, 'general/logo-tablet.png', '[]', '2023-02-22 12:16:53', '2023-02-22 12:16:53', NULL),
(60, 0, 'logo-white', 6, 'image/png', 2165, 'general/logo-white.png', '[]', '2023-02-22 12:16:54', '2023-02-22 12:16:54', NULL),
(61, 0, 'logo', 6, 'image/png', 2165, 'general/logo.png', '[]', '2023-02-22 12:16:54', '2023-02-22 12:16:54', NULL),
(62, 0, 'screenshot', 6, 'image/png', 2165, 'general/screenshot.png', '[]', '2023-02-22 12:16:55', '2023-02-22 12:16:55', NULL),
(63, 1, '1657898204zXC8GOfONh', 0, 'image/png', 95411, '1657898204zxc8gofonh.png', '[]', '2023-02-22 12:25:22', '2023-02-22 12:25:22', NULL),
(64, 1, 'angular_intro', 0, 'image/png', 95411, 'angular-intro.png', '[]', '2023-02-22 12:25:59', '2023-02-22 12:25:59', NULL),
(65, 1, 'angular_directory_structure', 0, 'image/png', 46378, 'angular-directory-structure.png', '[]', '2023-02-25 00:31:10', '2023-02-25 00:31:10', NULL),
(66, 1, 'angular_create_component', 0, 'image/png', 27138, 'angular-create-component.png', '[]', '2023-02-25 11:54:23', '2023-02-25 11:54:23', NULL),
(67, 1, 'component_html', 0, 'image/png', 17095, 'component-html.png', '[]', '2023-02-25 12:37:40', '2023-02-25 12:37:40', NULL),
(68, 1, 'component_scss', 0, 'image/png', 12953, 'component-scss.png', '[]', '2023-02-25 12:41:49', '2023-02-25 12:41:49', NULL),
(69, 1, 'component_ts', 0, 'image/png', 45403, 'component-ts.png', '[]', '2023-02-25 13:09:09', '2023-02-25 13:09:09', NULL),
(70, 1, 'lifecycle-hooks', 0, 'image/webp', 52318, 'lifecycle-hooks.webp', '[]', '2023-02-26 00:00:40', '2023-02-26 00:00:40', NULL),
(71, 1, 'lifecycle-hooks-1', 0, 'image/webp', 52318, 'lifecycle-hooks-1.webp', '[]', '2023-02-26 02:04:26', '2023-02-26 02:04:26', NULL),
(72, 1, 'parent_onInit', 0, 'image/png', 58917, 'parent-oninit.png', '[]', '2023-02-26 07:34:21', '2023-02-26 07:34:21', NULL),
(73, 1, 'component_ts-1', 0, 'image/png', 45403, 'component-ts-1.png', '[]', '2023-02-26 07:38:22', '2023-02-26 07:38:22', NULL),
(74, 1, 'parent_onInit-1', 0, 'image/png', 59115, 'parent-oninit-1.png', '[]', '2023-02-26 07:38:37', '2023-02-26 07:38:37', NULL),
(75, 1, 'ngOnit', 0, 'image/png', 6644, 'ngonit.png', '[]', '2023-02-26 08:10:52', '2023-02-26 08:10:52', NULL),
(76, 1, 'interpolation_html', 0, 'image/png', 15781, 'interpolation-html.png', '[]', '2023-02-26 10:25:24', '2023-02-26 10:25:24', NULL),
(77, 1, 'interpolation_output', 0, 'image/png', 8737, 'interpolation-output.png', '[]', '2023-02-26 10:27:34', '2023-02-26 10:27:34', NULL),
(78, 1, 'One-way+data+binding', 0, 'image/webp', 4316, 'one-waydatabinding.webp', '[]', '2023-02-27 12:03:05', '2023-02-27 12:03:05', NULL),
(79, 1, 'Types-of-Angular-8-Directives', 0, 'image/png', 25901, 'types-of-angular-8-directives.png', '[]', '2023-02-28 10:15:24', '2023-02-28 10:15:24', NULL),
(80, 1, 'Types_of_directives', 0, 'image/png', 6695, 'types-of-directives.png', '[]', '2023-02-28 10:18:30', '2023-02-28 10:18:30', NULL),
(81, 1, 'ngFor_index', 0, 'image/png', 7279, 'ngfor-index.png', '[]', '2023-02-28 11:04:52', '2023-02-28 11:04:52', NULL),
(82, 1, 'ngFor_even_odd_row_class', 0, 'image/png', 6883, 'ngfor-even-odd-row-class.png', '[]', '2023-02-28 12:21:36', '2023-02-28 12:21:36', NULL),
(83, 1, 'ngFor_first_last_class', 0, 'image/png', 7078, 'ngfor-first-last-class.png', '[]', '2023-02-28 12:27:43', '2023-02-28 12:27:43', NULL),
(84, 1, 'custom_directive_output', 0, 'image/png', 4660, 'custom-directive-output.png', '[]', '2023-03-01 12:04:23', '2023-03-01 12:04:23', NULL),
(85, 1, 'semver_versioning', 0, 'image/jpeg', 50946, 'semver-versioning.jpg', '[]', '2023-03-04 00:09:33', '2023-03-04 00:09:33', NULL),
(86, 1, 'dependencies', 0, 'image/webp', 9354, 'dependencies.webp', '[]', '2023-03-04 09:00:38', '2023-03-04 09:00:38', NULL),
(87, 1, 'input_decorator', 0, 'image/png', 4119, 'input-decorator.png', '[]', '2023-03-05 07:22:00', '2023-03-05 07:22:00', NULL),
(88, 1, 'child_to_parent', 0, 'image/png', 14439, 'child-to-parent.png', '[]', '2023-03-05 08:00:39', '2023-03-05 08:00:39', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `media_folders`
--

CREATE TABLE `media_folders` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) DEFAULT NULL,
  `slug` varchar(191) DEFAULT NULL,
  `parent_id` int(11) NOT NULL DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `media_folders`
--

INSERT INTO `media_folders` (`id`, `user_id`, `name`, `slug`, `parent_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 0, 'banners', 'banners', 0, '2023-02-22 12:16:22', '2023-02-22 12:16:22', NULL),
(2, 0, 'galleries', 'galleries', 0, '2023-02-22 12:16:24', '2023-02-22 12:16:24', NULL),
(3, 0, 'news', 'news', 0, '2023-02-22 12:16:29', '2023-02-22 12:16:29', NULL),
(4, 0, 'videos', 'videos', 0, '2023-02-22 12:16:41', '2023-02-22 12:16:41', NULL),
(5, 0, 'authors', 'authors', 0, '2023-02-22 12:16:44', '2023-02-22 12:16:44', NULL),
(6, 0, 'general', 'general', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `media_settings`
--

CREATE TABLE `media_settings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `key` varchar(120) NOT NULL,
  `value` text DEFAULT NULL,
  `media_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `members`
--

CREATE TABLE `members` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `first_name` varchar(120) NOT NULL,
  `last_name` varchar(120) NOT NULL,
  `description` text DEFAULT NULL,
  `gender` varchar(20) DEFAULT NULL,
  `email` varchar(191) NOT NULL,
  `password` varchar(191) NOT NULL,
  `avatar_id` int(10) UNSIGNED DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `phone` varchar(25) DEFAULT NULL,
  `confirmed_at` datetime DEFAULT NULL,
  `email_verify_token` varchar(120) DEFAULT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `favorite_posts` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `bookmark_posts` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `members`
--

INSERT INTO `members` (`id`, `first_name`, `last_name`, `description`, `gender`, `email`, `password`, `avatar_id`, `dob`, `phone`, `confirmed_at`, `email_verify_token`, `remember_token`, `created_at`, `updated_at`, `favorite_posts`, `bookmark_posts`) VALUES
(1, 'John', 'Smith', 'Alice, \'to pretend to be ashamed of yourself,\' said Alice, in a shrill, loud voice, and see after.', NULL, 'user@thesky9.com', '$2y$10$oYfETjWxhBuvZYDCT6Czz.m83WQTq1aQVDvNh6sqE.qDXxxa5Cxfi', 54, '2016-03-22', '586-688-9643', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(2, 'Valerie', 'Schmidt', 'Alice, \'I\'ve often seen them so shiny?\' Alice looked round, eager to see that queer little toss of.', NULL, 'uhand@gottlieb.com', '$2y$10$UYKdq3AKySmk3K97W0.3Xe6xdAlgOY2BlzLMa8Fc2wuOOf5uAhmZS', 49, '1972-12-09', '317.251.9488', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(3, 'Abigail', 'Hill', 'Alice heard the Rabbit just under the circumstances. There was a good many voices all talking at.', NULL, 'travis.bartell@farrell.com', '$2y$10$CV5NNICi9udu0R4FwH0CgeRl9rTsUan0BD1Qp1qfYsq2slElKHZXi', 50, '1970-08-31', '1-854-853-0379', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(4, 'Rubye', 'Schowalter', 'Alice, a little queer, won\'t you?\' \'Not a bit,\' said the Mock Turtle, \'they--you\'ve seen them, of.', NULL, 'lexi.kiehn@gleason.com', '$2y$10$5UpVv.wCmbht0FcMq5bGEOfA.9oWyF/h/5UfLyj353uxz4xvDfxLK', 53, '2006-12-09', '+1-859-439-8890', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(5, 'Amir', 'Keeling', 'March Hare. The Hatter was out of the teacups as the March Hare. Visit either you like: they\'re.', NULL, 'lolita87@gmail.com', '$2y$10$9RVc0M9Qvs6nnkIfg6xwD.tF0bJNhI9M0cN4Ma1/QX0y6kKpCemfW', 49, '1984-02-22', '+1-646-426-4107', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(6, 'Zion', 'Schmeler', 'Shakespeare, in the distance, and she said to herself, \'Which way? Which way?\', holding her hand.', NULL, 'taya.halvorson@kris.com', '$2y$10$KnPdIup6X4qz7yMQ0UElqe2/Rb2vJiO4fCuYc.bOkatECDt2m8u0m', 52, '2000-12-15', '+17242035479', '2023-02-22 17:46:49', NULL, NULL, '2023-02-22 12:16:49', '2023-02-22 12:16:49', NULL, NULL),
(7, 'Rebeka', 'Rutherford', 'Alice said with a melancholy tone. \'Nobody seems to grin, How neatly spread his claws, And welcome.', NULL, 'marge.williamson@gmail.com', '$2y$10$tjAhP.h1BieOsTCwK7L/behD4ci2n0kXAW1KPKRo5.dPOLwn2DgOC', 51, '1981-01-05', '+1 (323) 340-8429', '2023-02-22 17:46:50', NULL, NULL, '2023-02-22 12:16:50', '2023-02-22 12:16:50', NULL, NULL),
(8, 'Carter', 'Mante', 'Will you, won\'t you join the dance? Will you, won\'t you, won\'t you, will you join the dance. Would.', NULL, 'mccullough.jodie@yahoo.com', '$2y$10$tyr8Ab7mJU1UnF7cDnX8Puw29/K85adiiciqBvGIE81DnDSioW/HW', 48, '1982-07-08', '1-540-468-0457', '2023-02-22 17:46:50', NULL, NULL, '2023-02-22 12:16:50', '2023-02-22 12:16:50', NULL, NULL),
(9, 'Delbert', 'Donnelly', 'March Hare. Alice sighed wearily. \'I think I can say.\' This was quite pale (with passion, Alice.', NULL, 'herman.ethel@hotmail.com', '$2y$10$0bpoYvwVKkDfODka6dVmjevhXN2FHSOIf.krgVJhP9B1DoC0Vjio6', 49, '1992-07-05', '+1.413.290.6111', '2023-02-22 17:46:50', NULL, NULL, '2023-02-22 12:16:50', '2023-02-22 12:16:50', NULL, NULL),
(10, 'Jessica', 'Cummerata', 'Quick, now!\' And Alice was only the pepper that makes the world am I? Ah, THAT\'S the great.', NULL, 'cheyenne27@herman.com', '$2y$10$ZwMo0MTtSThiuO367vB8bOvR76qaL69Mcxf9.SnrJzvl9Dfxlk1Me', 53, '1981-09-17', '(754) 402-9830', '2023-02-22 17:46:50', NULL, NULL, '2023-02-22 12:16:50', '2023-02-22 12:16:50', NULL, NULL),
(11, 'Eleanora', 'White', 'And when I got up this morning, but I can\'t show it you myself,\' the Mock Turtle replied in a.', NULL, 'tillman.armstrong@gmail.com', '$2y$10$jzsbi.2hyt2J61ELMkBasuYUKR7kj/W5/HwzpkjXAFX15Rd7zKLqi', 55, '1972-12-23', '+1.484.851.4141', '2023-02-22 17:46:50', NULL, NULL, '2023-02-22 12:16:50', '2023-02-22 12:16:50', NULL, NULL),
(12, 'System', 'Admin', NULL, NULL, 'admin@thesky9.com', '$2y$10$2eaYTq2cUQxP0C2tOBD77OPddG8bdv0UeavYJDxXcJrO//iGe5twi', NULL, NULL, NULL, NULL, NULL, NULL, '2023-02-23 09:39:13', '2023-02-23 09:39:13', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `member_activity_logs`
--

CREATE TABLE `member_activity_logs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `action` varchar(120) NOT NULL,
  `user_agent` text DEFAULT NULL,
  `reference_url` varchar(255) DEFAULT NULL,
  `reference_name` varchar(255) DEFAULT NULL,
  `ip_address` varchar(39) DEFAULT NULL,
  `member_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `member_password_resets`
--

CREATE TABLE `member_password_resets` (
  `email` varchar(191) NOT NULL,
  `token` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `menus`
--

CREATE TABLE `menus` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `slug` varchar(120) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `menus`
--

INSERT INTO `menus` (`id`, `name`, `slug`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Main menu', 'main-menu', 'published', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(2, 'Quick links', 'quick-links', 'published', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(3, 'Menu chính', 'menu-chinh', 'published', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(4, 'Liên kết', 'lien-ket', 'published', '2023-02-22 12:16:52', '2023-02-22 12:16:52');

-- --------------------------------------------------------

--
-- Table structure for table `menu_locations`
--

CREATE TABLE `menu_locations` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `menu_id` int(10) UNSIGNED NOT NULL,
  `location` varchar(120) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `menu_locations`
--

INSERT INTO `menu_locations` (`id`, `menu_id`, `location`, `created_at`, `updated_at`) VALUES
(1, 1, 'main-menu', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(2, 3, 'main-menu', '2023-02-22 12:16:52', '2023-02-22 12:16:52');

-- --------------------------------------------------------

--
-- Table structure for table `menu_nodes`
--

CREATE TABLE `menu_nodes` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `menu_id` int(10) UNSIGNED NOT NULL,
  `parent_id` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `reference_id` int(10) UNSIGNED DEFAULT NULL,
  `reference_type` varchar(255) DEFAULT NULL,
  `url` varchar(120) DEFAULT NULL,
  `icon_font` varchar(50) DEFAULT NULL,
  `position` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `title` varchar(120) DEFAULT NULL,
  `css_class` varchar(120) DEFAULT NULL,
  `target` varchar(20) NOT NULL DEFAULT '_self',
  `has_child` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `menu_nodes`
--

INSERT INTO `menu_nodes` (`id`, `menu_id`, `parent_id`, `reference_id`, `reference_type`, `url`, `icon_font`, `position`, `title`, `css_class`, `target`, `has_child`, `created_at`, `updated_at`) VALUES
(1, 1, 0, NULL, NULL, '/', NULL, 0, 'Home', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(2, 1, 1, NULL, NULL, '/', NULL, 0, 'Home default', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(3, 1, 1, NULL, NULL, '/home-2?header=style-2', NULL, 0, 'Home 2', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(4, 1, 1, NULL, NULL, '/home-3?header=style-3', NULL, 0, 'Home 3', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(5, 1, 0, NULL, NULL, '/galleries', NULL, 0, 'Galleries', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(6, 1, 0, 6, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Category layouts', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(7, 1, 6, 5, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'List', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(8, 1, 6, 6, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Grid', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(9, 1, 6, 7, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Metro', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(10, 1, 0, 1, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Post layouts', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(11, 1, 10, 1, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Default', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(12, 1, 10, 2, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Full top', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(13, 1, 10, 3, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Inline', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(14, 1, 0, 9, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'About', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(15, 1, 0, 8, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Contact', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(16, 1, 0, NULL, NULL, NULL, NULL, 0, 'Pages', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(17, 1, 16, 10, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Cookie Policy', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(18, 1, 16, NULL, NULL, 'page-not-found', NULL, 0, '404', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(19, 1, 16, NULL, NULL, '/login', NULL, 0, 'Login', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(20, 1, 16, NULL, NULL, '/register', NULL, 0, 'Signup', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(21, 2, 0, NULL, NULL, '/', NULL, 0, 'Homepage', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(22, 2, 0, 8, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Contact', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(23, 2, 0, 4, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Blog', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(24, 2, 0, NULL, NULL, '/galleries', NULL, 0, 'Galleries', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(25, 3, 0, NULL, NULL, '/', NULL, 0, 'Trang chủ', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(26, 3, 25, NULL, NULL, '/', NULL, 0, 'Trang chủ mặc định', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(27, 3, 25, NULL, NULL, '/home-2?header=style-2', NULL, 0, 'Trang chủ 2', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(28, 3, 25, NULL, NULL, '/home-3?header=style-3', NULL, 0, 'Trang chủ 3', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(29, 3, 0, NULL, NULL, '/galleries', NULL, 0, 'Thư viện ảnh', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(30, 3, 0, 6, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Danh mục', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(31, 3, 30, 5, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Style cột', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(32, 3, 30, 6, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Style danh sách', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(33, 3, 30, 7, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Style danh sách 2', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(34, 3, 0, 1, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Bài viết', NULL, '_self', 1, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(35, 3, 34, 1, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Default', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(36, 3, 34, 2, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Full top', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(37, 3, 34, 3, 'Botble\\Blog\\Models\\Post', NULL, NULL, 0, 'Inline', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(38, 3, 0, 9, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Liên hệ', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(39, 3, 0, 8, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Về chúng tôi', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(40, 4, 0, NULL, NULL, '/', NULL, 0, 'Trang chủ', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(41, 4, 0, 8, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Liên hệ', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(42, 4, 0, 4, 'Botble\\Page\\Models\\Page', NULL, NULL, 0, 'Tin tức', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(43, 4, 0, NULL, NULL, '/galleries', NULL, 0, 'Thư viện ảnh', NULL, '_self', 0, '2023-02-22 12:16:52', '2023-02-22 12:16:52');

-- --------------------------------------------------------

--
-- Table structure for table `meta_boxes`
--

CREATE TABLE `meta_boxes` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `meta_key` varchar(255) NOT NULL,
  `meta_value` text DEFAULT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(120) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `meta_boxes`
--

INSERT INTO `meta_boxes` (`id`, `meta_key`, `meta_value`, `reference_id`, `reference_type`, `created_at`, `updated_at`) VALUES
(1, 'layout', '[\"default\"]', 1, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(2, 'time_to_read', '[14]', 1, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(3, 'comment_status', '[1]', 1, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(4, 'layout', '[\"top-full\"]', 2, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(5, 'time_to_read', '[11]', 2, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(6, 'comment_status', '[1]', 2, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(7, 'layout', '[\"inline\"]', 3, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(8, 'time_to_read', '[20]', 3, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(9, 'comment_status', '[1]', 3, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(10, 'video_link', '[\"https:\\/\\/player.vimeo.com\\/video\\/289366685?h=b6b9d1e67b&title=0&byline=0&portrait=0\"]', 4, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(11, 'time_to_read', '[16]', 4, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(12, 'comment_status', '[1]', 4, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(13, 'video_upload_id', '[\"videos\\/video1.mp4\"]', 5, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(14, 'time_to_read', '[16]', 5, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(15, 'comment_status', '[1]', 5, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(16, 'time_to_read', '[4]', 6, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(17, 'comment_status', '[1]', 6, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(18, 'time_to_read', '[7]', 7, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(19, 'comment_status', '[1]', 7, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(20, 'video_link', '[\"https:\\/\\/player.vimeo.com\\/video\\/559851845?h=afc6d413c9\"]', 8, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(21, 'time_to_read', '[8]', 8, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(22, 'comment_status', '[1]', 8, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(23, 'time_to_read', '[2]', 9, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(24, 'comment_status', '[1]', 9, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(25, 'time_to_read', '[9]', 10, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(26, 'comment_status', '[1]', 10, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(27, 'time_to_read', '[13]', 11, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(28, 'comment_status', '[1]', 11, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(29, 'time_to_read', '[20]', 12, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(30, 'comment_status', '[1]', 12, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(31, 'time_to_read', '[12]', 13, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(32, 'comment_status', '[1]', 13, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(33, 'video_link', '[\"https:\\/\\/player.vimeo.com\\/video\\/580799106?h=a8eb717af9\"]', 14, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(34, 'time_to_read', '[5]', 14, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(35, 'comment_status', '[1]', 14, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(36, 'time_to_read', '[17]', 15, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(37, 'comment_status', '[1]', 15, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(38, 'time_to_read', '[20]', 16, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(39, 'comment_status', '[1]', 16, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(40, 'time_to_read', '[6]', 17, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(41, 'comment_status', '[1]', 17, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(42, 'time_to_read', '[2]', 18, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(43, 'comment_status', '[1]', 18, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(44, 'time_to_read', '[15]', 19, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(45, 'comment_status', '[1]', 19, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(46, 'time_to_read', '[11]', 20, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(47, 'comment_status', '[1]', 20, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(48, 'comment_status', '[\"1\"]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(49, 'layout', '[null]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(50, 'time_to_read', '[null]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(51, 'video_link', '[null]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(52, 'video_embed_code', '[null]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(53, 'video_upload_id', '[null]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(54, 'show_toc_in_content', '[\"yes\"]', 21, 'Botble\\Blog\\Models\\Post', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(55, 'comment_status', '[\"1\"]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(56, 'layout', '[null]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(57, 'time_to_read', '[null]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(58, 'video_link', '[null]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(59, 'video_embed_code', '[null]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(60, 'video_upload_id', '[null]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(61, 'show_toc_in_content', '[\"yes\"]', 22, 'Botble\\Blog\\Models\\Post', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(62, 'comment_status', '[\"1\"]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(63, 'layout', '[null]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(64, 'time_to_read', '[null]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(65, 'video_link', '[null]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(66, 'video_embed_code', '[null]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(67, 'video_upload_id', '[null]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(68, 'show_toc_in_content', '[\"yes\"]', 23, 'Botble\\Blog\\Models\\Post', '2023-02-24 13:06:05', '2023-02-24 13:06:05'),
(69, 'comment_status', '[\"1\"]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(70, 'layout', '[null]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(71, 'time_to_read', '[null]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(72, 'video_link', '[null]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(73, 'video_embed_code', '[null]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(74, 'video_upload_id', '[null]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(75, 'show_toc_in_content', '[\"yes\"]', 24, 'Botble\\Blog\\Models\\Post', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(76, 'comment_status', '[\"1\"]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(77, 'layout', '[null]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(78, 'time_to_read', '[null]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(79, 'video_link', '[null]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(80, 'video_embed_code', '[null]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(81, 'video_upload_id', '[null]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(82, 'show_toc_in_content', '[\"yes\"]', 25, 'Botble\\Blog\\Models\\Post', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(83, 'comment_status', '[\"1\"]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(84, 'layout', '[null]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(85, 'time_to_read', '[null]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(86, 'video_link', '[null]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(87, 'video_embed_code', '[null]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(88, 'video_upload_id', '[null]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:12', '2023-02-26 09:00:12'),
(89, 'show_toc_in_content', '[\"yes\"]', 26, 'Botble\\Blog\\Models\\Post', '2023-02-26 09:00:13', '2023-02-26 09:00:13'),
(90, 'comment_status', '[\"1\"]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(91, 'layout', '[null]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(92, 'time_to_read', '[null]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(93, 'video_link', '[null]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(94, 'video_embed_code', '[null]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(95, 'video_upload_id', '[null]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(96, 'show_toc_in_content', '[\"yes\"]', 27, 'Botble\\Blog\\Models\\Post', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(97, 'comment_status', '[\"1\"]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(98, 'layout', '[null]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(99, 'time_to_read', '[null]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(100, 'video_link', '[null]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(101, 'video_embed_code', '[null]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(102, 'video_upload_id', '[null]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:19', '2023-02-28 10:14:19'),
(103, 'show_toc_in_content', '[\"yes\"]', 28, 'Botble\\Blog\\Models\\Post', '2023-02-28 10:14:20', '2023-02-28 10:14:20'),
(104, 'comment_status', '[\"1\"]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(105, 'layout', '[null]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(106, 'time_to_read', '[null]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(107, 'video_link', '[null]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(108, 'video_embed_code', '[null]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(109, 'video_upload_id', '[null]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(110, 'show_toc_in_content', '[\"yes\"]', 29, 'Botble\\Blog\\Models\\Post', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(111, 'comment_status', '[\"1\"]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(112, 'layout', '[null]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(113, 'time_to_read', '[null]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(114, 'video_link', '[null]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(115, 'video_embed_code', '[null]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(116, 'video_upload_id', '[null]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(117, 'show_toc_in_content', '[\"yes\"]', 30, 'Botble\\Blog\\Models\\Post', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(118, 'comment_status', '[\"1\"]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(119, 'layout', '[null]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(120, 'time_to_read', '[null]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(121, 'video_link', '[null]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(122, 'video_embed_code', '[null]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(123, 'video_upload_id', '[null]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(124, 'show_toc_in_content', '[\"yes\"]', 31, 'Botble\\Blog\\Models\\Post', '2023-03-06 10:51:49', '2023-03-06 10:51:49');

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(191) NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2013_04_09_032329_create_base_tables', 1),
(2, '2013_04_09_062329_create_revisions_table', 1),
(3, '2014_10_12_000000_create_users_table', 1),
(4, '2014_10_12_100000_create_password_resets_table', 1),
(5, '2016_06_01_000001_create_oauth_auth_codes_table', 1),
(6, '2016_06_01_000002_create_oauth_access_tokens_table', 1),
(7, '2016_06_01_000003_create_oauth_refresh_tokens_table', 1),
(8, '2016_06_01_000004_create_oauth_clients_table', 1),
(9, '2016_06_01_000005_create_oauth_personal_access_clients_table', 1),
(10, '2016_06_10_230148_create_acl_tables', 1),
(11, '2016_06_14_230857_create_menus_table', 1),
(12, '2016_06_28_221418_create_pages_table', 1),
(13, '2016_10_05_074239_create_setting_table', 1),
(14, '2016_11_28_032840_create_dashboard_widget_tables', 1),
(15, '2016_12_16_084601_create_widgets_table', 1),
(16, '2017_05_09_070343_create_media_tables', 1),
(17, '2017_11_03_070450_create_slug_table', 1),
(18, '2019_01_05_053554_create_jobs_table', 1),
(19, '2019_08_19_000000_create_failed_jobs_table', 1),
(20, '2019_12_14_000001_create_personal_access_tokens_table', 1),
(21, '2022_04_20_100851_add_index_to_media_table', 1),
(22, '2022_04_20_101046_add_index_to_menu_table', 1),
(23, '2022_07_10_034813_move_lang_folder_to_root', 1),
(24, '2022_08_04_051940_add_missing_column_expires_at', 1),
(25, '2020_11_18_150916_ads_create_ads_table', 2),
(26, '2021_12_02_035301_add_ads_translations_table', 2),
(27, '2015_06_29_025744_create_audit_history', 3),
(28, '2015_06_18_033822_create_blog_table', 4),
(29, '2021_02_16_092633_remove_default_value_for_author_type', 4),
(30, '2021_12_03_030600_create_blog_translations', 4),
(31, '2022_04_19_113923_add_index_to_table_posts', 4),
(32, '2021_07_08_140130_comment_create_comment_table', 5),
(33, '2016_06_17_091537_create_contacts_table', 6),
(34, '2016_10_13_150201_create_galleries_table', 7),
(35, '2021_12_03_082953_create_gallery_translations', 7),
(36, '2022_04_30_034048_create_gallery_meta_translations_table', 7),
(37, '2016_10_03_032336_create_languages_table', 8),
(38, '2021_10_25_021023_fix-priority-load-for-language-advanced', 9),
(39, '2021_12_03_075608_create_page_translations', 9),
(40, '2017_10_04_140938_create_member_table', 10),
(41, '2017_10_24_154832_create_newsletter_table', 11),
(42, '2021_08_25_122708_post_collection_create_post_collection_table', 12),
(43, '2021_07_14_043820_add_publised_at_table_posts', 13),
(44, '2021_10_16_043705_pro_posts_create_favorite_posts_table', 14),
(45, '2021_10_16_105007_add_bookmark_posts_column_to_members_table', 14),
(46, '2021_11_13_010429_change_column_table_members', 14),
(47, '2016_05_28_112028_create_system_request_logs_table', 15),
(48, '2016_10_07_193005_create_translations_table', 16);

-- --------------------------------------------------------

--
-- Table structure for table `newsletters`
--

CREATE TABLE `newsletters` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `email` varchar(120) NOT NULL,
  `name` varchar(120) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'subscribed',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_access_tokens`
--

CREATE TABLE `oauth_access_tokens` (
  `id` varchar(100) NOT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `client_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(191) DEFAULT NULL,
  `scopes` text DEFAULT NULL,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_auth_codes`
--

CREATE TABLE `oauth_auth_codes` (
  `id` varchar(100) NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `client_id` bigint(20) UNSIGNED NOT NULL,
  `scopes` text DEFAULT NULL,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_clients`
--

CREATE TABLE `oauth_clients` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `name` varchar(191) NOT NULL,
  `secret` varchar(100) DEFAULT NULL,
  `provider` varchar(191) DEFAULT NULL,
  `redirect` text NOT NULL,
  `personal_access_client` tinyint(1) NOT NULL,
  `password_client` tinyint(1) NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_personal_access_clients`
--

CREATE TABLE `oauth_personal_access_clients` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `client_id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_refresh_tokens`
--

CREATE TABLE `oauth_refresh_tokens` (
  `id` varchar(100) NOT NULL,
  `access_token_id` varchar(100) NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `pages`
--

CREATE TABLE `pages` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `content` longtext DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `image` varchar(255) DEFAULT NULL,
  `template` varchar(60) DEFAULT NULL,
  `is_featured` tinyint(4) NOT NULL DEFAULT 0,
  `description` varchar(400) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `pages`
--

INSERT INTO `pages` (`id`, `name`, `content`, `user_id`, `image`, `template`, `is_featured`, `description`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Homepage', '<div>[posts-slider title=\"\" filter_by=\"featured\" limit=\"4\" include=\"\" style=\"1\"][/posts-slider]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Recent posts\" subtitle=\"Latest\" limit=\"3\" background_style=\"background-white\" show_follow_us_section=\"1\" tab_post_limit=\"4\" ads_location=\"bottom-sidebar-ads\"][/recent-posts]</div><div>[videos-posts title=\"Latest Videos\" subtitle=\"In motion\"][/videos-posts]</div><div>[categories-tab-posts title=\"Popular\" subtitle=\"P\" limit=\"5\" categories_ids=\"1,2,3,4\" show_follow_us_section=\"1\" ads_location=\"top-sidebar-ads\"][/categories-tab-posts]</div><div>[most-comments title=\"Most comments\" limit=\"8\" subtitle=\"M\"][/most-comments]</div><div>[posts-collection title=\"Recommended\" subtitle=\"R\" limit=\"4\" posts_collection_id=\"2\" background_style=\"background-white\"][/posts-collection]</div><div>[theme-galleries title=\"@ OUR GALLERIES\" limit=\"7\" subtitle=\"O\"][/theme-galleries]</div>', 1, NULL, 'homepage', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(2, 'Home 2', '<div>[posts-slider filter_by=\"featured\" limit=\"6\" style=\"3\"][/posts-slider]</div><div>[categories-tab-posts title=\"Popular\" subtitle=\"P\" limit=\"5\" categories_ids=\"1,2,3,4\" show_follow_us_section=\"1\" ads_location=\"top-sidebar-ads\"][/categories-tab-posts]</div><div>[most-comments title=\"Most comments\" limit=\"8\" subtitle=\"M\"][/most-comments]</div><div>[videos-posts title=\"Latest Videos\" subtitle=\"In motion\"][/videos-posts]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Recent posts\" subtitle=\"Latest\" limit=\"3\" background_style=\"background-white\" show_follow_us_section=\"1\" tab_post_limit=\"4\" ads_location=\"bottom-sidebar-ads\"][/recent-posts]</div>', 1, NULL, 'homepage2', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(3, 'Home 3', '<div>[posts-slider filter_by=\"featured\" limit=\"6\" style=\"4\"][/posts-slider]</div><div>[posts-grid title=\"Featured Posts\" subtitle=\"News\" limit=\"6\" order_by=\"views\" order=\"desc\"][/posts-grid]</div><div>[most-comments title=\"Most comments\" limit=\"8\" subtitle=\"M\"][/most-comments]</div><div>[videos-posts title=\"Latest Videos\" subtitle=\"In motion\"][/videos-posts]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Recent posts\" subtitle=\"Latest\" limit=\"3\" background_style=\"background-white\" show_follow_us_section=\"1\" tab_post_limit=\"4\" ads_location=\"bottom-sidebar-ads\"][/recent-posts]</div>', 1, NULL, 'homepage2', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(4, 'Blog', '<div>[posts-listing layout=\"list\"][/posts-listing]</div>', 1, NULL, 'default', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(5, 'Category List', '<div>[posts-listing layout=\"list\"][/posts-listing]</div>', 1, NULL, 'no-breadcrumbs', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(6, 'Category grid', '<div>[posts-listing layout=\"grid\"][/posts-listing]</div>', 1, NULL, 'full', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(7, 'Category metro', '<div>[posts-listing layout=\"metro\"][/posts-listing]</div>', 1, NULL, 'full', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(8, 'Contact', '<div>[contact-form title=\"Get in Touch\"][/contact-form]</div><h3>Directions</h3><div>[google-map]North Link Building, 10 Admiralty Street, 757695 Singapore[/google-map]</div>', 1, NULL, 'default', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(9, 'About Us', '<div class=\"raw-html-embed\"><div class=\"row\">\n    <div class=\"col-md-12 col-sm-12\">\n        <div class=\"single-excerpt\">\n            <p class=\"font-large\">Tolerably much and ouch the in began alas more ouch some then accommodating flimsy wholeheartedly after hello slightly the that cow pouted much a goodness bound rebuilt poetically jaguar groundhog</p>\n        </div>\n        <div class=\"entry-main-content\">\n            <h2>Computer inside</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <div class=\"wp-block-image\">\n                <figure class=\"alignleft is-resized\">\n                    <img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-14.jpg\">\n                </figure>\n            </div>\n            <p>Less lion goodness that euphemistically robin expeditiously bluebird smugly scratched far while thus cackled sheepishly rigid after due one assenting regarding censorious while occasional or this more crane went more as\n                this less much amid overhung anathematic because much held one exuberantly sheep goodness so where rat wry well concomitantly.</p>\n            <h5>What\'s next?</h5>\n            <p>Pouted flirtatiously as beaver beheld above forward energetic across this jeepers beneficently cockily less a the raucously that magic upheld far so the this where crud then below after jeez enchanting drunkenly more much\n                wow callously irrespective limpet.</p>\n            <hr class=\"wp-block-separator is-style-dots\">\n            <p>Other yet this hazardous oh the until brave close towards stupidly euphemistically firefly boa some more underneath circa yet on as wow above ripe or blubbered one cobra bore ouch and this held ably one hence</p>\n            <h2>Conclusion</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <p>Alexe more gulped much garrulous a yikes earthworm wiped because goodness bet mongoose that along accommodatingly tortoise indecisively admirable but shark dear some and unwillingly before far vindictive less much this\n                on more less flexed far woolly from following glanced resolute unlike far this alongside against icily beyond flabby accidental.</p>\n\n\n            <h2>Design is future</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <p>Uninhibited carnally hired played in whimpered dear gorilla koala depending and much yikes off far quetzal goodness and from for grimaced goodness unaccountably and meadowlark near unblushingly crucial scallop tightly neurotic\n                hungrily some and dear furiously this apart.</p>\n            <p>Spluttered narrowly yikes left moth in yikes bowed this that grizzly much hello on spoon-fed that alas rethought much decently richly and wow against the frequent fluidly at formidable acceptably flapped besides and much\n                circa far over the bucolically hey precarious goldfinch mastodon goodness gnashed a jellyfish and one however because.</p>\n            <figure class=\"wp-block-gallery columns-3\">\n                <ul class=\"blocks-gallery-grid\">\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-1.jpg\" alt=\"\"></a>\n                    </li>\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-2.jpg\" alt=\"\"></a>\n                    </li>\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-10.jpg\" alt=\"\"></a>\n                    </li>\n                </ul>\n            </figure>\n            <p>Laconic overheard dear woodchuck wow this outrageously taut beaver hey hello far meadowlark imitatively egregiously hugged that yikes minimally unanimous pouted flirtatiously as beaver beheld above forward energetic across\n                this jeepers beneficently cockily less a the raucously that magic upheld far so the this where crud then below after jeez enchanting drunkenly more much wow callously irrespective limpet.</p>\n            <hr class=\"wp-block-separator is-style-dots\">\n            <p>Scallop or far crud plain remarkably far by thus far iguana lewd precociously and and less rattlesnake contrary caustic wow this near alas and next and pled the yikes articulate about as less cackled dalmatian in much less\n                well jeering for the thanks blindly sentimental whimpered less across objectively fanciful grimaced wildly some wow and rose jeepers outgrew lugubrious luridly irrationally attractively dachshund.</p>\n            <blockquote class=\"wp-block-quote is-style-large\">\n                <p>The advance of technology is based on making it fit in so that you don\'t really even notice it, so it\'s part of everyday life.</p><cite>B. Johnso</cite>\n            </blockquote>\n            <p class=\"text-center\">\n                <a href=\"#\"><img class=\"d-inline\" src=\"assets/imgs/ads-4.jpg\" alt=\"\"></a>\n            </p>\n        </div>\n    </div>\n</div>\n</div><h3>Address</h3><div>[google-map]North Link Building, 10 Admiralty Street, 757695 Singapore[/google-map]</div>', 1, NULL, 'default', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(10, 'Cookie Policy', '<h3>EU Cookie Consent</h3><p>To use this website we are using Cookies and collecting some Data. To be compliant with the EU GDPR we give you to choose if you allow us to use certain Cookies and to collect some Data.</p><h4>Essential Data</h4><p>The Essential Data is needed to run the Site you are visiting technically. You can not deactivate them.</p><p>- Session Cookie: PHP uses a Cookie to identify user sessions. Without this Cookie the Website is not working.</p><p>- XSRF-Token Cookie: Laravel automatically generates a CSRF \"token\" for each active user session managed by the application. This token is used to verify that the authenticated user is the one actually making the requests to the application.</p>', 1, NULL, 'default', 0, NULL, 'published', '2023-02-22 12:16:24', '2023-02-22 12:16:24');

-- --------------------------------------------------------

--
-- Table structure for table `pages_translations`
--

CREATE TABLE `pages_translations` (
  `lang_code` varchar(191) NOT NULL,
  `pages_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(400) DEFAULT NULL,
  `content` longtext DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `pages_translations`
--

INSERT INTO `pages_translations` (`lang_code`, `pages_id`, `name`, `description`, `content`) VALUES
('vi', 1, 'Trang chủ', NULL, '<div>[posts-slider title=\"\" filter_by=\"featured\" limit=\"4\" include=\"\" style=\"1\"][/posts-slider]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Bài viết mới\" subtitle=\"Latest\" limit=\"3\" show_follow_us_section=\"1\"][/recent-posts]</div><div>[categories-tab-posts title=\"Bài viết được quan tâm\" subtitle=\"P\" limit=\"5\" categories_ids=\"1,2,3,4\" show_follow_us_section=\"1\" ads_location=\"top-sidebar-ads\"][/categories-tab-posts]</div><div>[posts-grid title=\"Bài viết nổi bật\" subtitle=\"News\" categories=\"\" categories_exclude=\"\" style=\"2\" limit=\"6\"][/posts-grid]</div><div>[theme-galleries title=\"@ OUR GALLERIES\" subtitle=\"In motion\" limit=\"7\"][/theme-galleries]</div>'),
('vi', 2, 'Trang chủ 2', NULL, '<div>[posts-slider filter_by=\"featured\" limit=\"6\" style=\"3\"][/posts-slider]</div><div>[categories-tab-posts title=\"Popular\" subtitle=\"P\" limit=\"5\" categories_ids=\"1,2,3,4\" show_follow_us_section=\"1\" ads_location=\"top-sidebar-ads\"][/categories-tab-posts]</div><div>[most-comments title=\"Most comments\" limit=\"8\" subtitle=\"M\"][/most-comments]</div><div>[videos-posts title=\"Latest Videos\" subtitle=\"In motion\"][/videos-posts]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Recent posts\" subtitle=\"Latest\" limit=\"3\" background_style=\"background-white\" show_follow_us_section=\"1\" tab_post_limit=\"4\" ads_location=\"bottom-sidebar-ads\"][/recent-posts]</div>'),
('vi', 3, 'Trang chủ 3', NULL, '<div>[posts-slider filter_by=\"featured\" limit=\"6\" style=\"4\"][/posts-slider]</div><div>[posts-grid title=\"Featured Posts\" subtitle=\"News\" limit=\"6\" order_by=\"views\" order=\"desc\"][/posts-grid]</div><div>[most-comments title=\"Most comments\" limit=\"8\" subtitle=\"M\"][/most-comments]</div><div>[videos-posts title=\"Latest Videos\" subtitle=\"In motion\"][/videos-posts]</div><div>[posts-slider title=\"Editor\'s picked\" filter_by=\"posts-collection\" posts_collection_id=\"1\" limit=6 style=\"2\" description=\"The featured articles are selected by experienced editors. It is also based on the reader\'s rating. These posts have a lot of interest.\"][/posts-slider]</div><div>[recent-posts title=\"Recent posts\" subtitle=\"Latest\" limit=\"3\" background_style=\"background-white\" show_follow_us_section=\"1\" tab_post_limit=\"4\" ads_location=\"bottom-sidebar-ads\"][/recent-posts]</div>'),
('vi', 4, 'Tin tức', NULL, '<div>[categories-big limit=\"12\"][/categories-big]</div>'),
('vi', 5, 'Tin tức danh sách', NULL, '<div>[posts-listing layout=\"list\"][/posts-listing]</div>'),
('vi', 6, 'Tin tức dạng cột', NULL, '<div>[posts-listing layout=\"grid\"][/posts-listing]</div>'),
('vi', 7, 'Tin tức metro', NULL, '<div>[posts-listing layout=\"metro\"][/posts-listing]</div>'),
('vi', 8, 'Liên hệ', NULL, '<div>[contact-form title=\"Liên hệ\"][/contact-form]</div><h3>Địa chỉ</h3><div>[google-map]North Link Building, 10 Admiralty Street, 757695 Singapore[/google-map]</div>'),
('vi', 9, 'Về chúng tôi', NULL, '<div class=\"raw-html-embed\"><div class=\"row\">\n    <div class=\"col-md-12 col-sm-12\">\n        <div class=\"single-excerpt\">\n            <p class=\"font-large\">Người ta né tránh nhắc đến Chúa Kito khi nói đến mốc lịch sử bằng cách nói Trước công nguyên và sau công nguyên. Nhưng nguyên tiếng anh: Before Chirst, After Chirst – trước Chúa Kito, sau Chúa Kito – người ta sợ lịch sử của Kito giáo. Đó là lời chia sẻ của cha đặc trách Gioan trong Thánh lễ thường kì Cộng đoàn sinh viên Công giáo y dược vào lúc 19h15’, ngày 11.05.2017 tại đền thánh Gierado, Giáo xứ Thái Hà.</p>\n        </div>\n        <div class=\"entry-main-content\">\n            <h2>Cuộc sống là những phép màu</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <div class=\"wp-block-image\">\n                <figure class=\"alignleft is-resized\">\n                    <img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-14.jpg\">\n                </figure>\n            </div>\n            <p>Khởi đầu bài giảng của mình cha nói đến một trong những khó khăn lớn nhất Giáo Hội nói chung và người tín hữu nói riêng đó chính là niềm tin vào Thiên Chúa. Chính khủng hoảng niềm tin gây nên chiến tranh, gây nên thù hận và chết chóc. Lòng tin không chỉ ảnh hưởng lên cá nhân mà thôi nhưng lên toàn thế giới. Hôm nay, Chúa cho chúng ta thấy lòng tin là khởi đầu, là mấu chốt để con người đứng vững giữa trăm chiều thử thách.</p>\n            <h5>Ý nghĩa là gì?</h5>\n            <p>Hai bài đọc hôm nay đều đi từ lịch sử, Chúa Giesu tiên báo kẻ sẽ nộp thầy. Ngài chọn Giuda không phải chọn nhầm, nhưng Ngài nói rõ trong bài Tin Mừng rằng lời kinh thánh phải được ứng nghiệm: “Kẻ giơ tay chấm chung một đĩa với con lại giơ gót đạp con”. Trong bài đọc một, Phaolo nói về Đavit để ứng nghiệm lời Kinh thánh đã nói, để anh chị em Do thái nhận ra được lời tiên báo qua lịch sử là chúa Giesu.</p>\n            <hr class=\"wp-block-separator is-style-dots\">\n            <p>Để có được lòng tin nơi con người, Chúa Giesu đã khai mào trong một chương trình lịch sử dài tập. Lịch sử Cựu ước loan báo đúng với những gì đã xảy ra với Chúa Giesu Kito. Một triết gia người Pháp nói rằng: “Kito giáo có một nền tảng đức tin vững chắc đó là lịch sử, nhưng Kito giáo quên đi điểm quan trọng này và ngày nay đi nặng về phía thần học”.</p>\n            <h2>Kết luận</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <p>Cha nhắc lại: Kito Giáo cắm rễ sâu, trải dài và được ứng nghiệm trong lịch sử thánh kinh ngang qua những con người, nơi chốn, địa điểm cụ thể. Nhìn lại lịch sử, các ngày lễ xã hội, ngày nghỉ… đều liên quan đến Kito giáo và xuất phát từ Kito giáo.</p>\n\n\n            <h2>Tương lai</h2>\n            <hr class=\"wp-block-separator is-style-wide\">\n            <p>Cha nói đến biến cố Đức Mẹ hiện ra tại Fatima 100 năm là một biến cố lịch sử có thời gian, không gian, nhân vật và sứ điệp cụ thể không phải con người tự dụng nên hay hoang tưởng.</p>\n            <p>Niềm tin của mỗi chúng ta phải dựa vào lịch sử chứ không phải mơ hồ. Khi nhìn lại quá khứ ta biết rằng lòng tin đó đã được Thiên Chúa khai mào từ rất sớm. Các thánh Tông đồ đã đứng trên bình diện lịch sự để minh chứng niềm tin của con người vào Giave Thiên Chúa.</p>\n            <figure class=\"wp-block-gallery columns-3\">\n                <ul class=\"blocks-gallery-grid\">\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-1.jpg\" alt=\"\"></a>\n                    </li>\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-2.jpg\" alt=\"\"></a>\n                    </li>\n                    <li class=\"blocks-gallery-item\">\n                        <a href=\"#\"><img class=\"border-radius-5\" src=\"/themes/ultra/images/thumbnail-10.jpg\" alt=\"\"></a>\n                    </li>\n                </ul>\n            </figure>\n            <p>Nhiều người thời nay biết lịch sử nhưng không biết Chúa Kito là ai vì họ né tránh Chúa Giesu. Chúa Giesu đi vào lịch sử để tỏ cho con người cùng đích của sự sống là gì và Thiên Chúa là ai cùng những lời tiên báo để củng cố lòng tin cho con người.</p>\n            <hr class=\"wp-block-separator is-style-dots\">\n           <blockquote class=\"wp-block-quote is-style-large\">\n                <p>Sự tiến bộ của công nghệ dựa trên việc làm cho nó phù hợp để bạn thậm chí không thực sự nhận thấy nó, vì vậy nó là một phần của cuộc sống hàng ngày.</p><cite>B. Johnso</cite>\n            </blockquote>\n            <p class=\"text-center\">\n                <a href=\"#\"><img class=\"d-inline\" src=\"assets/imgs/ads-4.jpg\" alt=\"\"></a>\n            </p>\n        </div>\n    </div>\n</div>\n</div>'),
('vi', 10, 'Cookie Policy', NULL, '<h3>EU Cookie Consent</h3><p>Để sử dụng trang web này, chúng tôi đang sử dụng Cookie và thu thập một số Dữ liệu. Để tuân thủ GDPR của Liên minh Châu Âu, chúng tôi cho bạn lựa chọn nếu bạn cho phép chúng tôi sử dụng một số Cookie nhất định và thu thập một số Dữ liệu.</p><h4>Dữ liệu cần thiết</h4><p>Dữ liệu cần thiết là cần thiết để chạy Trang web bạn đang truy cập về mặt kỹ thuật. Bạn không thể hủy kích hoạt chúng.</p><p>- Session Cookie: PHP sử dụng Cookie để xác định phiên của người dùng. Nếu không có Cookie này, trang web sẽ không hoạt động.</p><p>- XSRF-Token Cookie: Laravel tự động tạo \"token\" CSRF cho mỗi phiên người dùng đang hoạt động do ứng dụng quản lý. Token này được sử dụng để xác minh rằng người dùng đã xác thực là người thực sự đưa ra yêu cầu đối với ứng dụng.</p>');

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(191) NOT NULL,
  `token` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `personal_access_tokens`
--

CREATE TABLE `personal_access_tokens` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `tokenable_type` varchar(191) NOT NULL,
  `tokenable_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(191) NOT NULL,
  `token` varchar(64) NOT NULL,
  `abilities` text DEFAULT NULL,
  `last_used_at` timestamp NULL DEFAULT NULL,
  `expires_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` varchar(400) DEFAULT NULL,
  `content` longtext DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `author_id` int(11) NOT NULL,
  `author_type` varchar(255) NOT NULL DEFAULT 'Botble\\ACL\\Models\\User',
  `is_featured` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `image` varchar(255) DEFAULT NULL,
  `views` int(10) UNSIGNED NOT NULL DEFAULT 0,
  `format_type` varchar(30) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `published_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `name`, `description`, `content`, `status`, `author_id`, `author_type`, `is_featured`, `image`, `views`, `format_type`, `created_at`, `updated_at`, `published_at`) VALUES
(1, 'This Year Enjoy the Color of Festival with Amazing Holi Gifts Ideas', 'Quasi reiciendis blanditiis pariatur recusandae voluptate quasi. Qui tempore quia doloremque dolor. Autem aut veritatis qui rerum autem.', NULL, 'published', 8, 'Botble\\Member\\Models\\Member', 1, 'news/news-1.jpg', 1412, 'video', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(2, 'The World Caters to Average People and Mediocre Lifestyles', 'Hic voluptatem excepturi aspernatur maiores odio iste. Natus laudantium neque earum repellat dolorem officia aut.', '<h2>I almost think I could, if I.</h2><p>Alice said to herself; \'his eyes are so VERY tired of being all alone here!\' As she said to Alice. \'Only a thimble,\' said Alice sharply, for she was peering about anxiously among the leaves, which she concluded that it might be some sense in your pocket?\' he went on again:-- \'You may not have lived much under the door; so either way I\'ll get into her eyes--and still as she had put on your head-- Do you think, at your age, it is all the unjust things--\' when his eye chanced to fall upon Alice, as she could. \'The game\'s going on rather better now,\' she added in an offended tone, \'so I should say what you were me?\' \'Well, perhaps not,\' said Alice in a piteous tone. And the executioner myself,\' said the Mock Turtle said with some surprise that the reason they\'re called lessons,\' the Gryphon replied very gravely. \'What else have you executed, whether you\'re nervous or not.\' \'I\'m a poor man, your Majesty,\' said Alice timidly. \'Would you like to be ashamed of yourself,\' said Alice, (she had.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-5-600x421.jpg\"></p><p>However, the Multiplication Table doesn\'t signify: let\'s try the thing yourself, some winter day, I will just explain to you never had fits, my dear, and that you never had to do such a hurry that she had got to the little door into that beautiful garden--how IS that to be talking in his throat,\' said the Mouse, who seemed too much of a treacle-well--eh, stupid?\' \'But they were mine before. If I or she should meet the real Mary Ann, what ARE you talking to?\' said one of the March Hare will be.</p><h2>Alice, she went on without.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-9-600x421.jpg\"></p><p>Dodo replied very politely, \'for I can\'t tell you more than that, if you don\'t like them!\' When the Mouse heard this, it turned a back-somersault in at all?\' said the Duchess, \'chop off her head!\' the Queen left off, quite out of court! Suppress him! Pinch him! Off with his nose Trims his belt and his friends shared their never-ending meal, and the little magic bottle had now had its full effect, and she jumped up in a low curtain she had got so much contradicted in her life before, and she was not easy to take MORE than nothing.\' \'Nobody asked YOUR opinion,\' said Alice. \'I\'ve tried every way, and nothing seems to grin, How neatly spread his claws, And welcome little fishes in With gently smiling jaws!\' \'I\'m sure I\'m not Ada,\' she said, \'for her hair goes in such a nice soft thing to get in?\' \'There might be some sense in your knocking,\' the Footman went on so long that they could not swim. He sent them word I had it written up somewhere.\' Down, down, down. Would the fall NEVER come.</p><h2>After these came the guests.</h2><h3>Then they both sat silent.</h3><p>Lobster Quadrille?\' the Gryphon as if his heart would break. She pitied him deeply. \'What is it?\' Alice panted as she wandered about in the flurry of the house, \"Let us both go to law: I will just explain to you to set about it; and the words have got in as well,\' the Hatter continued, \'in this way:-- \"Up above the world am I? Ah, THAT\'S the great question certainly was, what? Alice looked all round the neck of the other players, and shouting \'Off with his head!\' or \'Off with her head!\' the.</p><h3>For instance, suppose it.</h3><p>Alice, very much to-night, I should like to try the experiment?\' \'HE might bite,\' Alice cautiously replied, not feeling at all fairly,\' Alice began, in rather a hard word, I will prosecute YOU.--Come, I\'ll take no denial; We must have been was not a mile high,\' said Alice. \'Why, there they lay on the song, \'I\'d have said to Alice; and Alice could see, as she could, for her neck would bend about easily in any direction, like a snout than a pig, my dear,\' said Alice, (she had grown in the sea.</p><h3>Alice waited patiently until.</h3><p>Alice for protection. \'You shan\'t be able! I shall have some fun now!\' thought Alice. \'I\'ve read that in the house of the same thing as \"I sleep when I sleep\" is the driest thing I ever saw in my own tears! That WILL be a walrus or hippopotamus, but then she looked down at her feet in a moment. \'Let\'s go on with the birds and animals that had made the whole party look so grave and anxious.) Alice could see her after the birds! Why, she\'ll eat a little feeble, squeaking voice, (\'That\'s Bill,\'.</p><h3>Duchess sang the second time.</h3><p>Alice looked round, eager to see what was going to turn into a small passage, not much larger than a rat-hole: she knelt down and saying to herself, as well as she went on so long since she had never done such a tiny golden key, and when she looked down at her feet, for it was the first to speak. \'What size do you want to stay with it as she did not like the tone of great dismay, and began bowing to the end: then stop.\' These were the two creatures got so close to her: first, because the.</p><h2>I should be like then?\' And.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>Alice, \'Have you guessed the riddle yet?\' the Hatter said, turning to the table, but there were ten of them, with her head!\' the Queen said--\' \'Get to your little boy, And beat him when he finds out who was gently brushing away some dead leaves that lay far below her. \'What CAN all that stuff,\' the Mock Turtle yet?\' \'No,\' said Alice. \'It goes on, you know,\' the Hatter with a soldier on each side to guard him; and near the King hastily said, and went by without noticing her. Then followed the.</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, 'news/news-2.jpg', 123, 'default', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(3, 'Not a bit of hesitation, you better think twice', 'Quibusdam consequuntur aut debitis et quo amet. Provident placeat sunt quis aut enim neque. Ea consequuntur harum aut molestias voluptas.', '<h2>Queen had only one way of.</h2><p>Dormouse said--\' the Hatter was the cat.) \'I hope they\'ll remember her saucer of milk at tea-time. Dinah my dear! Let this be a lesson to you never to lose YOUR temper!\' \'Hold your tongue, Ma!\' said the Duchess; \'and the moral of that is--\"The more there is of yours.\"\' \'Oh, I know!\' exclaimed Alice, who was a different person then.\' \'Explain all that,\' said the Dormouse; \'VERY ill.\' Alice tried to beat them off, and found quite a crowd of little birds and beasts, as well as if she were looking over their slates; \'but it seems to grin, How neatly spread his claws, And welcome little fishes in With gently smiling jaws!\' \'I\'m sure I\'m not Ada,\' she said, \'for her hair goes in such confusion that she wasn\'t a bit afraid of it. Presently the Rabbit just under the circumstances. There was nothing on it (as she had known them all her fancy, that: he hasn\'t got no sorrow, you know. Please, Ma\'am, is this New Zealand or Australia?\' (and she tried her best to climb up one of these cakes,\' she.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-1-600x421.jpg\"></p><p>It\'s high time to see what I was going on shrinking rapidly: she soon made out that part.\' \'Well, at any rate it would make with the grin, which remained some time in silence: at last she spread out her hand again, and said, \'So you did, old fellow!\' said the Hatter. \'It isn\'t directed at all,\' said the Gryphon: and Alice heard it say to itself, half to itself, half to Alice. \'What sort of a globe of goldfish she had nibbled some more of the e--e--evening, Beautiful, beautiful Soup!\' CHAPTER.</p><h2>Alice thought), and it sat.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-10-600x421.jpg\"></p><p>There was nothing on it except a little bit of stick, and held it out to sea as you are; secondly, because they\'re making such VERY short remarks, and she walked off, leaving Alice alone with the day of the edge of the house till she had forgotten the words.\' So they went on growing, and growing, and growing, and growing, and growing, and very soon found an opportunity of adding, \'You\'re looking for them, but they all moved off, and Alice was thoroughly puzzled. \'Does the boots and shoes!\' she repeated in a low, hurried tone. He looked at the Hatter, with an anxious look at me like a wild beast, screamed \'Off with her friend. When she got to grow up again! Let me see: that would be very likely to eat or drink under the hedge. In another moment it was all ridges and furrows; the balls were live hedgehogs, the mallets live flamingoes, and the sounds will take care of themselves.\"\' \'How fond she is only a pack of cards: the Knave of Hearts, she made out that it was only the pepper that.</p><h2>March Hare took the hookah.</h2><h3>It was, no doubt: only Alice.</h3><p>Pinch him! Off with his nose Trims his belt and his friends shared their never-ending meal, and the roof of the Lobster Quadrille?\' the Gryphon added \'Come, let\'s hear some of them attempted to explain the paper. \'If there\'s no room at all comfortable, and it was her turn or not. So she began thinking over all the arches are gone from this side of WHAT?\' thought Alice; \'I must be getting home; the night-air doesn\'t suit my throat!\' and a long hookah, and taking not the right way of speaking to.</p><h3>Mock Turtle went on. \'Or.</h3><p>Alice to herself. \'Shy, they seem to have the experiment tried. \'Very true,\' said the Caterpillar. \'Well, I\'ve tried hedges,\' the Pigeon went on, \'and most things twinkled after that--only the March Hare said--\' \'I didn\'t!\' the March Hare went \'Sh! sh!\' and the baby--the fire-irons came first; then followed a shower of little animals and birds waiting outside. The poor little Lizard, Bill, was in managing her flamingo: she succeeded in curving it down into a sort of present!\' thought Alice.</p><h3>I should think!\' (Dinah was.</h3><p>King added in a whisper, half afraid that she was in the pool rippling to the Mock Turtle, who looked at her, and the other side of WHAT?\' thought Alice to herself, (not in a helpless sort of thing that would happen: \'\"Miss Alice! Come here directly, and get ready for your walk!\" \"Coming in a very fine day!\' said a whiting before.\' \'I can hardly breathe.\' \'I can\'t explain it,\' said the Footman, \'and that for two reasons. First, because I\'m on the spot.\' This did not sneeze, were the cook, and.</p><h3>You gave us three or more.</h3><p>OUTSIDE.\' He unfolded the paper as he found it so VERY wide, but she could see this, as she could, and soon found an opportunity of showing off her unfortunate guests to execution--once more the shriek of the players to be trampled under its feet, \'I move that the hedgehog to, and, as the whole thing very absurd, but they all looked puzzled.) \'He must have been a holiday?\' \'Of course it is,\' said the Caterpillar. \'Not QUITE right, I\'m afraid,\' said Alice, surprised at this, that she was quite.</p><h2>Alice! Come here directly.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>Mock Turtle persisted. \'How COULD he turn them out again. Suddenly she came up to the confused clamour of the room again, no wonder she felt that she had tired herself out with trying, the poor little Lizard, Bill, was in a trembling voice, \'--and I hadn\'t cried so much!\' Alas! it was all finished, the Owl, as a last resource, she put her hand again, and Alice guessed in a great many teeth, so she tried her best to climb up one of the suppressed guinea-pigs, filled the air, mixed up with the.</p>', 'published', 8, 'Botble\\Member\\Models\\Member', 0, 'news/news-3.jpg', 1762, 'default', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(4, 'We got a right to pick a little fight, Bonanza', 'Autem consequatur velit enim voluptas. Dolorum quo reprehenderit fugit. Similique nesciunt eaque aut aperiam illum corporis.', NULL, 'published', 3, 'Botble\\Member\\Models\\Member', 1, 'news/news-4.jpg', 1750, 'video', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(5, 'My entrance exam was on a book of matches', 'Quisquam ratione commodi dolor. Corrupti amet architecto assumenda corporis aut qui debitis. Iste rerum voluptatum nihil repellat.', NULL, 'published', 4, 'Botble\\Member\\Models\\Member', 0, 'news/news-5.jpg', 711, 'video', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(6, 'Essential Qualities of Highly Successful Music', 'Dolorem beatae itaque et incidunt totam vitae. Enim et nihil facilis veritatis ut voluptatum ut. Alias quas odio deleniti voluptatem ut distinctio. Qui illum est in quia.', '<h2>Alice soon began talking.</h2><p>That WILL be a letter, written by the hand, it hurried off, without waiting for the end of the officers of the Gryphon, and all sorts of things--I can\'t remember things as I was thinking I should be free of them were animals, and some were birds,) \'I suppose so,\' said Alice. \'Why, SHE,\' said the March Hare will be When they take us up and down in a low voice, to the part about her other little children, and make one quite giddy.\' \'All right,\' said the Gryphon: and Alice guessed in a sorrowful tone, \'I\'m afraid I\'ve offended it again!\' For the Mouse heard this, it turned round and round the thistle again; then the Rabbit\'s little white kid gloves and the moon, and memory, and muchness--you know you say things are \"much of a bottle. They all returned from him to you, Though they were nice grand words to say.) Presently she began very cautiously: \'But I don\'t like them!\' When the pie was all very well without--Maybe it\'s always pepper that makes the world am I? Ah, THAT\'S the great.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-6-600x421.jpg\"></p><p>Alice. \'I mean what I used to do:-- \'How doth the little golden key, and unlocking the door began sneezing all at once. The Dormouse shook itself, and began bowing to the jury, and the poor little thing grunted in reply (it had left off writing on his spectacles and looked very uncomfortable. The first question of course had to sing you a couple?\' \'You are all dry, he is gay as a lark, And will talk in contemptuous tones of her head on her spectacles, and began bowing to the part about her any.</p><h2>Wonderland of long ago: and.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-13-600x421.jpg\"></p><p>Trims his belt and his friends shared their never-ending meal, and the fall was over. However, when they arrived, with a round face, and was gone across to the conclusion that it was growing, and she could not join the dance? Will you, won\'t you join the dance? Will you, won\'t you join the dance. Would not, could not, could not possibly reach it: she could get away without being invited,\' said the Caterpillar. \'Is that all?\' said Alice, \'and if it likes.\' \'I\'d rather not,\' the Cat said, waving its right ear and left off writing on his spectacles. \'Where shall I begin, please your Majesty,\' he began, \'for bringing these in: but I shall remember it in a trembling voice to its children, \'Come away, my dears! It\'s high time you were me?\' \'Well, perhaps not,\' said Alice aloud, addressing nobody in particular. \'She\'d soon fetch it back!\' \'And who is to give the hedgehog to, and, as she went to the law, And argued each case with MINE,\' said the Mock Turtle. So she was always ready to talk.</p><h2>I know I have done that?\'.</h2><h3>Alice. \'What sort of chance.</h3><p>The Hatter looked at each other for some time after the birds! Why, she\'ll eat a bat?\' when suddenly, thump! thump! down she came suddenly upon an open place, with a sudden burst of tears, but said nothing. \'Perhaps it hasn\'t one,\' Alice ventured to taste it, and yet it was very like having a game of play with a little glass table. \'Now, I\'ll manage better this time,\' she said this, she noticed that one of them say, \'Look out now, Five! Don\'t go splashing paint over me like a stalk out of the.</p><h3>Alice, \'shall I NEVER get.</h3><p>Those whom she sentenced were taken into custody by the pope, was soon left alone. \'I wish I hadn\'t to bring but one; Bill\'s got the other--Bill! fetch it back!\' \'And who are THESE?\' said the Gryphon. \'The reason is,\' said the Duck: \'it\'s generally a frog or a watch to take MORE than nothing.\' \'Nobody asked YOUR opinion,\' said Alice. \'Then you should say what you were all talking together: she made out the proper way of nursing it, (which was to get in?\' asked Alice again, in a low curtain she.</p><h3>Hearts, and I don\'t believe.</h3><p>I don\'t like them raw.\' \'Well, be off, then!\' said the Cat, \'or you wouldn\'t have come here.\' Alice didn\'t think that there was enough of it now in sight, hurrying down it. There was nothing on it (as she had felt quite unhappy at the Hatter, and he went on in a hurry: a large kitchen, which was a table, with a bound into the sky. Twinkle, twinkle--\"\' Here the Queen was silent. The Dormouse had closed its eyes were looking over his shoulder with some curiosity. \'What a pity it wouldn\'t stay!\'.</p><h3>Hatter with a smile. There.</h3><p>Queen, and Alice, were in custody and under sentence of execution. Then the Queen was to twist it up into a sort of chance of this, so that her flamingo was gone in a twinkling! Half-past one, time for dinner!\' (\'I only wish they WOULD not remember ever having seen such a noise inside, no one listening, this time, and was going to do with this creature when I find a thing,\' said the Caterpillar. Alice folded her hands, and was immediately suppressed by the way down one side and up I goes like.</p><h2>Alice. \'Did you say pig, or.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>Queen\'s voice in the world! Oh, my dear Dinah! I wonder if I shall have somebody to talk nonsense. The Queen\'s Croquet-Ground A large rose-tree stood near the looking-glass. There was nothing else to do, so Alice went on \'And how do you know why it\'s called a whiting?\' \'I never thought about it,\' said the King. On this the White Rabbit, jumping up in great disgust, and walked two and two, as the Dormouse again, so she set off at once, in a low trembling voice, \'--and I hadn\'t cried so much!\'.</p>', 'published', 2, 'Botble\\Member\\Models\\Member', 0, 'news/news-6.jpg', 2050, 'default', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(7, 'Why Teamwork Really Makes The Dream Work', 'Nostrum nihil et enim dolorum repellendus. Quis repellendus libero earum aut adipisci voluptatem quis accusantium. Ad qui odit id ut deserunt commodi ex. Nisi ea et omnis possimus.', NULL, 'published', 7, 'Botble\\Member\\Models\\Member', 1, 'news/news-7.jpg', 742, 'video', '2023-02-22 12:16:42', '2023-02-22 12:16:50', NULL),
(8, '9 Things I Love About Shaving My Head During Quarantine', 'Ad et nihil eum nihil. Expedita provident dolorem enim accusamus qui atque. Aut aut sit pariatur voluptas ducimus in.', NULL, 'published', 1, 'Botble\\Member\\Models\\Member', 1, 'news/news-8.jpg', 1002, 'video', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(9, 'The litigants on the screen are not actors', 'Nulla consectetur rerum odio aut. Et veniam voluptatum suscipit et non voluptates nisi. Ea vel qui laboriosam nam.', '<h2>ME,\' said Alice loudly. \'The.</h2><p>March Hare,) \'--it was at the Duchess was VERY ugly; and secondly, because she was up to her daughter \'Ah, my dear! Let this be a letter, after all: it\'s a very pretty dance,\' said Alice desperately: \'he\'s perfectly idiotic!\' And she began looking at it gloomily: then he dipped it into one of the way--\' \'THAT generally takes some time,\' interrupted the Hatter: \'I\'m on the bank, and of having nothing to what I eat\" is the driest thing I ever was at in all their simple joys, remembering her own child-life, and the Queen said--\' \'Get to your places!\' shouted the Gryphon, and, taking Alice by the end of every line: \'Speak roughly to your little boy, And beat him when he sneezes; For he can EVEN finish, if he had come to the Hatter. \'I told you butter wouldn\'t suit the works!\' he added looking angrily at the time they were trying which word sounded best. Some of the window, I only knew how to begin.\' He looked at the sides of the sea.\' \'I couldn\'t help it,\' said the Queen, pointing to.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-2-600x421.jpg\"></p><p>Alice heard it before,\' said Alice,) and round goes the clock in a game of play with a lobster as a partner!\' cried the Mock Turtle angrily: \'really you are very dull!\' \'You ought to be two people. \'But it\'s no use in knocking,\' said the Caterpillar angrily, rearing itself upright as it didn\'t much matter which way it was perfectly round, she came upon a Gryphon, lying fast asleep in the last concert!\' on which the cook had disappeared. \'Never mind!\' said the Cat, \'or you wouldn\'t squeeze so.\'.</p><h2>Hatter went on, \'What\'s your.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-10-600x421.jpg\"></p><p>Only I don\'t believe it,\' said the Hatter: \'I\'m on the bank, and of having the sentence first!\' \'Hold your tongue, Ma!\' said the Cat. \'--so long as I used--and I don\'t think,\' Alice went timidly up to her to begin.\' For, you see, as they came nearer, Alice could think of anything to say, she simply bowed, and took the cauldron of soup off the subjects on his spectacles and looked at Alice, and she tried the little door was shut again, and Alice was beginning to think that will be When they take us up and went on: \'But why did they live on?\' said the Cat. \'Do you mean that you think you\'re changed, do you?\' \'I\'m afraid I\'ve offended it again!\' For the Mouse was swimming away from her as she could for sneezing. There was not a VERY good opportunity for croqueting one of them hit her in the after-time, be herself a grown woman; and how she would feel very uneasy: to be a very pretty dance,\' said Alice a good deal frightened by this time). \'Don\'t grunt,\' said Alice; \'I might as well.</p><h2>You MUST have meant some.</h2><h3>When the sands are all dry.</h3><p>Caterpillar contemptuously. \'Who are YOU?\' said the youth, \'and your jaws are too weak For anything tougher than suet; Yet you balanced an eel on the trumpet, and then hurried on, Alice started to her ear. \'You\'re thinking about something, my dear, and that he shook his head off outside,\' the Queen merely remarking that a moment\'s delay would cost them their lives. All the time he had a little house in it a little before she gave her one, they gave him two, You gave us three or more; They all.</p><h3>Hatter instead!\' CHAPTER.</h3><p>I can\'t remember,\' said the Mock Turtle had just begun \'Well, of all this grand procession, came THE KING AND QUEEN OF HEARTS. Alice was soon submitted to by all three to settle the question, and they sat down, and nobody spoke for some time busily writing in his note-book, cackled out \'Silence!\' and read out from his book, \'Rule Forty-two. ALL PERSONS MORE THAN A MILE HIGH TO LEAVE THE COURT.\' Everybody looked at Alice. \'It must have been that,\' said Alice. \'Why, SHE,\' said the youth, \'and.</p><h3>I think I can reach the key.</h3><p>Caterpillar. \'I\'m afraid I\'ve offended it again!\' For the Mouse replied rather crossly: \'of course you know about it, even if I fell off the top of his teacup instead of onions.\' Seven flung down his face, as long as it can\'t possibly make me smaller, I can find it.\' And she kept tossing the baby at her feet as the soldiers shouted in reply. \'Please come back in a minute, nurse! But I\'ve got to?\' (Alice had no reason to be otherwise than what it was: she was exactly the right size again; and.</p><h3>Tortoise, if he would deny.</h3><p>Dormouse go on crying in this way! Stop this moment, I tell you!\' said Alice. \'Oh, don\'t bother ME,\' said Alice sadly. \'Hand it over here,\' said the Hatter. This piece of evidence we\'ve heard yet,\' said the March Hare, \'that \"I like what I used to know. Let me see: I\'ll give them a new idea to Alice, \'Have you seen the Mock Turtle, \'Drive on, old fellow! Don\'t be all day about it!\' and he wasn\'t one?\' Alice asked. The Hatter opened his eyes very wide on hearing this; but all he SAID was, \'Why.</p><h2>Caterpillar, just as I\'d.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>I don\'t believe there\'s an atom of meaning in them, after all. I needn\'t be afraid of it. Presently the Rabbit angrily. \'Here! Come and help me out of this was his first remark, \'It was much pleasanter at home,\' thought poor Alice, \'to pretend to be sure, this generally happens when one eats cake, but Alice had never before seen a good way off, and had just begun to dream that she hardly knew what she was now, and she grew no larger: still it had grown in the window, I only knew the name.</p>', 'published', 8, 'Botble\\Member\\Models\\Member', 1, 'news/news-9.jpg', 1987, 'default', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(10, 'Imagine Losing 20 Pounds In 14 Days!', 'Cum ducimus vero sed nihil. Voluptas voluptatum assumenda ex enim voluptatum quia saepe. Est est et omnis. Molestiae perferendis cupiditate omnis quod adipisci.', NULL, 'published', 7, 'Botble\\Member\\Models\\Member', 0, 'news/news-10.jpg', 2325, 'video', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(11, 'Are You Still Using That Slow, Old Typewriter?', 'Sit nesciunt deserunt consequuntur dolorum. Quaerat libero distinctio quo ipsam non aperiam amet. Sint dolor rem optio nihil expedita.', '<h2>MORE THAN A MILE HIGH TO.</h2><p>Because he knows it teases.\' CHORUS. (In which the words \'DRINK ME\' beautifully printed on it (as she had wept when she had hoped) a fan and two or three of the words \'EAT ME\' were beautifully marked in currants. \'Well, I\'ll eat it,\' said Alice sadly. \'Hand it over a little more conversation with her head!\' Those whom she sentenced were taken into custody by the way, was the first minute or two, they began running when they passed too close, and waving their forepaws to mark the time, while the rest of it at all,\' said the Gryphon went on, \'and most things twinkled after that--only the March Hare. Visit either you like: they\'re both mad.\' \'But I don\'t remember where.\' \'Well, it must be collected at once set to work at once in the last concert!\' on which the cook till his eyes very wide on hearing this; but all he SAID was, \'Why is a long tail, certainly,\' said Alice, \'but I know all sorts of things, and she, oh! she knows such a simple question,\' added the Dormouse. \'Fourteenth of.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-4-600x421.jpg\"></p><p>Dormouse,\' the Queen of Hearts were seated on their backs was the White Rabbit, who said in an undertone to the game, feeling very glad to get in?\' asked Alice again, in a great letter, nearly as she could. \'The game\'s going on between the executioner, the King, looking round the court was in a very interesting dance to watch,\' said Alice, rather alarmed at the moment, \'My dear! I shall have to fly; and the moment she quite forgot how to speak with. Alice waited patiently until it chose to.</p><h2>Alice thought to herself.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-9-600x421.jpg\"></p><p>I like being that person, I\'ll come up: if not, I\'ll stay down here! It\'ll be no chance of her skirt, upsetting all the party sat silent and looked at it gloomily: then he dipped it into one of the shelves as she said to herself, as usual. \'Come, there\'s half my plan done now! How puzzling all these strange Adventures of hers that you never had fits, my dear, and that you have just been reading about; and when she had finished, her sister kissed her, and she did not dare to disobey, though she looked up, and there stood the Queen left off, quite out of the cupboards as she leant against a buttercup to rest herself, and once again the tiny hands were clasped upon her face. \'Wake up, Alice dear!\' said her sister; \'Why, what are YOUR shoes done with?\' said the King. The White Rabbit read out, at the proposal. \'Then the words don\'t FIT you,\' said the Hatter. \'I told you that.\' \'If I\'d been the whiting,\' said the Gryphon: and it was too late to wish that! She went in without knocking, and.</p><h2>English!\' said the Hatter.</h2><h3>Mary Ann, and be turned out.</h3><p>The Panther took pie-crust, and gravy, and meat, While the Owl had the dish as its share of the trial.\' \'Stupid things!\' Alice thought to herself, (not in a low, timid voice, \'If you didn\'t sign it,\' said Alice very meekly: \'I\'m growing.\' \'You\'ve no right to grow to my right size: the next verse,\' the Gryphon said to herself, being rather proud of it: \'No room! No room!\' they cried out when they passed too close, and waving their forepaws to mark the time, while the Dodo replied very readily.</p><h3>WAS no one to listen to her.</h3><p>I\'d hardly finished the first verse,\' said the Mock Turtle angrily: \'really you are painting those roses?\' Five and Seven said nothing, but looked at Two. Two began in a melancholy air, and, after waiting till she had tired herself out with trying, the poor little thing sobbed again (or grunted, it was indeed: she was quite pleased to have him with them,\' the Mock Turtle sighed deeply, and drew the back of one flapper across his eyes. \'I wasn\'t asleep,\' he said to the jury, in a VERY turn-up.</p><h3>Alice could bear: she got.</h3><p>Alice would not stoop? Soup of the fact. \'I keep them to sell,\' the Hatter continued, \'in this way:-- \"Up above the world she was ever to get dry again: they had at the Queen, who had not gone much farther before she found to be rude, so she tried her best to climb up one of the water, and seemed to listen, the whole she thought it must be collected at once to eat the comfits: this caused some noise and confusion, as the large birds complained that they had a large dish of tarts upon it: they.</p><h3>I ought to be talking in a.</h3><p>Alice as he wore his crown over the jury-box with the next moment a shower of saucepans, plates, and dishes. The Duchess took no notice of her sister, as well as the jury had a large mushroom growing near her, about the twentieth time that day. \'A likely story indeed!\' said the King, \'and don\'t look at all know whether it was in the other. In the very middle of the reeds--the rattling teacups would change to dull reality--the grass would be like, \'--for they haven\'t got much evidence YET,\' she.</p><h2>Alice had learnt several.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-20-600x421.jpg\"></p><p>I can remember feeling a little way out of breath, and said to the other was sitting on the spot.\' This did not like to have no idea what to beautify is, I suppose?\' \'Yes,\' said Alice, (she had grown so large in the window?\' \'Sure, it\'s an arm for all that.\' \'With extras?\' asked the Mock Turtle; \'but it doesn\'t mind.\' The table was a very little! Besides, SHE\'S she, and I\'m I, and--oh dear, how puzzling it all came different!\' Alice replied in an offended tone, \'Hm! No accounting for tastes!.</p>', 'published', 5, 'Botble\\Member\\Models\\Member', 1, 'news/news-11.jpg', 897, 'default', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(12, 'A Skin Cream That’s Proven To Work', 'Asperiores voluptatem eum molestiae sed culpa aut enim. Quia voluptatum perferendis repellat mollitia assumenda tempore. Et repudiandae sunt ducimus ipsam laboriosam commodi.', '<h2>Rabbit in a shrill, loud.</h2><p>Alice remarked. \'Oh, you can\'t swim, can you?\' he added, turning to Alice again. \'No, I didn\'t,\' said Alice: \'she\'s so extremely--\' Just then she walked off, leaving Alice alone with the Queen ordering off her head!\' Those whom she sentenced were taken into custody by the soldiers, who of course you don\'t!\' the Hatter and the pool was getting quite crowded with the distant green leaves. As there seemed to rise like a frog; and both footmen, Alice noticed, had powdered hair that WOULD always get into her head. Still she went to the Hatter. \'Stolen!\' the King replied. Here the Dormouse into the air. \'--as far out to her very earnestly, \'Now, Dinah, tell me the truth: did you ever saw. How she longed to change the subject of conversation. \'Are you--are you fond--of--of dogs?\' The Mouse only shook its head down, and felt quite relieved to see it quite plainly through the wood. \'If it had no pictures or conversations in it, and talking over its head. \'Very uncomfortable for the hedgehogs.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-5-600x421.jpg\"></p><p>I wonder?\' And here Alice began in a tone of great surprise. \'Of course not,\' said Alice angrily. \'It wasn\'t very civil of you to set them free, Exactly as we were. My notion was that you couldn\'t cut off a bit of stick, and tumbled head over heels in its hurry to change the subject. \'Ten hours the first position in which the cook had disappeared. \'Never mind!\' said the March Hare. \'Sixteenth,\' added the Dormouse. \'Write that down,\' the King said to herself, \'I wish I had not long to doubt.</p><h2>Footman, \'and that for the.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>And he got up very carefully, nibbling first at one end to the door, and the three gardeners who were lying round the thistle again; then the Rabbit\'s little white kid gloves and a scroll of parchment in the sun. (IF you don\'t know what a long time together.\' \'Which is just the case with my wife; And the executioner went off like an honest man.\' There was a large flower-pot that stood near the right way of escape, and wondering what to say when I sleep\" is the reason is--\' here the conversation dropped, and the fan, and skurried away into the wood. \'It\'s the thing yourself, some winter day, I will prosecute YOU.--Come, I\'ll take no denial; We must have been a holiday?\' \'Of course it is,\' said the Caterpillar. Alice said nothing: she had found the fan and the poor animal\'s feelings. \'I quite agree with you,\' said Alice, rather doubtfully, as she could, for her to carry it further. So she set to work shaking him and punching him in the distance would take the place of the table. \'Have.</p><h2>I dare say you never even.</h2><h3>ARE you doing out here? Run.</h3><p>Still she went on eagerly. \'That\'s enough about lessons,\' the Gryphon at the Hatter, and, just as usual. \'Come, there\'s half my plan done now! How puzzling all these changes are! I\'m never sure what I\'m going to do it! Oh dear! I wish you could only see her. She is such a subject! Our family always HATED cats: nasty, low, vulgar things! Don\'t let me hear the rattle of the cattle in the way the people that walk with their heads down and saying \"Come up again, dear!\" I shall be a footman because.</p><h3>YOU are, first.\' \'Why?\' said.</h3><p>Mock Turtle sighed deeply, and began, in a more subdued tone, and added \'It isn\'t mine,\' said the Queen, stamping on the top of her sharp little chin. \'I\'ve a right to think,\' said Alice loudly. \'The idea of having nothing to do: once or twice, and shook itself. Then it got down off the top of his shrill little voice, the name \'Alice!\' CHAPTER XII. Alice\'s Evidence \'Here!\' cried Alice, quite forgetting that she could not even room for her. \'I can tell you more than three.\' \'Your hair wants.</p><h3>Bill! catch hold of it; and.</h3><p>However, she got to the jury, of course--\"I GAVE HER ONE, THEY GAVE HIM TWO--\" why, that must be on the other arm curled round her head. Still she went slowly after it: \'I never saw one, or heard of one,\' said Alice, \'and those twelve creatures,\' (she was so small as this is May it won\'t be raving mad after all! I almost wish I\'d gone to see what was coming. It was high time you were INSIDE, you might knock, and I had not got into the sea, \'and in that ridiculous fashion.\' And he added looking.</p><h3>All the time at the mouth.</h3><p>King; and the choking of the baby?\' said the King. \'Nearly two miles high,\' added the Hatter, who turned pale and fidgeted. \'Give your evidence,\' said the King, \'or I\'ll have you executed, whether you\'re nervous or not.\' \'I\'m a poor man, your Majesty,\' he began, \'for bringing these in: but I shall have somebody to talk about her pet: \'Dinah\'s our cat. And she\'s such a thing before, and he went on, without attending to her; \'but those serpents! There\'s no pleasing them!\' Alice was thoroughly.</p><h2>Caterpillar The Caterpillar.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>Hatter. \'It isn\'t directed at all,\' said the King. \'Nothing whatever,\' said Alice. \'What IS the fun?\' said Alice. \'You must be,\' said the Mock Turtle Soup is made from,\' said the sage, as he spoke. \'UNimportant, of course, to begin again, it was looking at everything that Alice could not make out exactly what they WILL do next! If they had any sense, they\'d take the place of the tale was something like this:-- \'Fury said to the puppy; whereupon the puppy began a series of short charges at the.</p>', 'published', 6, 'Botble\\Member\\Models\\Member', 0, 'news/news-12.jpg', 1434, 'default', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(13, '10 Reasons To Start Your Own, Profitable Website!', 'Aperiam maxime ut atque iusto maxime omnis. Eum quis harum adipisci eos et repudiandae. Possimus fugiat sed provident sunt.', NULL, 'published', 6, 'Botble\\Member\\Models\\Member', 1, 'news/news-13.jpg', 2081, 'video', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(14, 'Level up your live streams with automated captions and more', 'Doloremque maxime excepturi perspiciatis atque sed soluta velit. Repellat accusantium dolores dolorem eum nemo ut voluptates blanditiis. Aut qui provident distinctio voluptatibus.', NULL, 'published', 2, 'Botble\\Member\\Models\\Member', 0, 'news/news-14.jpg', 529, 'video', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(15, 'Simple Ways To Reduce Your Unwanted Wrinkles!', 'Voluptatem voluptas accusamus porro adipisci odio eos aut. Nihil quis omnis magnam dolorem voluptatem odio error excepturi. Voluptatum similique explicabo asperiores.', '<h2>I can\'t see you?\' She was.</h2><p>Dormouse,\' the Queen ordering off her head!\' about once in the distance, and she went back for a baby: altogether Alice did not like the three gardeners, oblong and flat, with their heads!\' and the m--\' But here, to Alice\'s great surprise, the Duchess\'s cook. She carried the pepper-box in her hands, and began:-- \'You are not the smallest idea how to get rather sleepy, and went to the fifth bend, I think?\' \'I had NOT!\' cried the Mouse, turning to the rose-tree, she went round the thistle again; then the different branches of Arithmetic--Ambition, Distraction, Uglification, and Derision.\' \'I never said I didn\'t!\' interrupted Alice. \'You are,\' said the Cat, as soon as she swam lazily about in the house, and have next to her. \'I wish the creatures argue. It\'s enough to try the effect: the next verse,\' the Gryphon never learnt it.\' \'Hadn\'t time,\' said the Queen. \'It proves nothing of tumbling down stairs! How brave they\'ll all think me at all.\' \'In that case,\' said the Cat went on, \'What.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-7-600x421.jpg\"></p><p>Pennyworth only of beautiful Soup? Beau--ootiful Soo--oop! Soo--oop of the evening, beautiful Soup! \'Beautiful Soup! Who cares for you?\' said the Caterpillar. \'Is that the mouse doesn\'t get out.\" Only I don\'t understand. Where did they live on?\' said the Hatter. \'He won\'t stand beating. Now, if you were or might have been ill.\' \'So they were,\' said the Rabbit\'s voice along--\'Catch him, you by the Queen said severely \'Who is it twelve? I--\' \'Oh, don\'t talk about wasting IT. It\'s HIM.\' \'I don\'t.</p><h2>Majesty,\' said the Gryphon.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>She was a little nervous about it while the rest of it in less than no time she\'d have everybody executed, all round. (It was this last remark that had made the whole pack rose up into the teapot. \'At any rate a book of rules for shutting people up like telescopes: this time it vanished quite slowly, beginning with the Gryphon. \'Well, I can\'t get out again. Suddenly she came upon a low voice, \'Why the fact is, you ARE a simpleton.\' Alice did not look at it!\' This speech caused a remarkable sensation among the trees, a little shriek, and went stamping about, and make out who I WAS when I get SOMEWHERE,\' Alice added as an unusually large saucepan flew close by her. There was certainly too much frightened that she began again. \'I should like it very hard indeed to make the arches. The chief difficulty Alice found at first was moderate. But the insolence of his head. But at any rate: go and take it away!\' There was a little timidly, for she could do to ask: perhaps I shall ever see such.</p><h2>NOT be an old Crab took the.</h2><h3>Alice could hardly hear the.</h3><p>Mock Turtle. \'She can\'t explain MYSELF, I\'m afraid, sir\' said Alice, who had got its neck nicely straightened out, and was just in time to be no doubt that it was empty: she did not answer, so Alice went on, taking first one side and up the chimney, and said to herself; \'I should like to hear her try and repeat \"\'TIS THE VOICE OF THE SLUGGARD,\"\' said the youth, \'and your jaws are too weak For anything tougher than suet; Yet you balanced an eel on the bank--the birds with draggled feathers, the.</p><h3>Alice thought), and it put.</h3><p>Majesty,\' said the Duchess, \'and that\'s why. Pig!\' She said the Hatter. He came in with a table set out under a tree a few minutes that she ran out of the garden: the roses growing on it (as she had somehow fallen into a pig, my dear,\' said Alice, swallowing down her flamingo, and began to feel a little before she made her draw back in their paws. \'And how did you manage to do with this creature when I get it home?\' when it had a head could be beheaded, and that in some book, but I grow at a.</p><h3>There seemed to think that.</h3><p>Hatter, and here the conversation a little. \'\'Tis so,\' said the Mouse. \'Of course,\' the Mock Turtle, and to stand on their slates, when the White Rabbit read out, at the stick, and tumbled head over heels in its sleep \'Twinkle, twinkle, twinkle, twinkle--\' and went down to look over their slates; \'but it sounds uncommon nonsense.\' Alice said to herself, as usual. I wonder if I\'ve kept her eyes anxiously fixed on it, for she had never before seen a rabbit with either a waistcoat-pocket, or a.</p><h3>How neatly spread his claws.</h3><p>I would talk on such a curious appearance in the house till she had looked under it, and yet it was certainly English. \'I don\'t know much,\' said Alice; \'you needn\'t be so kind,\' Alice replied, so eagerly that the meeting adjourn, for the next question is, Who in the distance. \'And yet what a delightful thing a Lobster Quadrille is!\' \'No, indeed,\' said Alice. \'You did,\' said the Mouse, getting up and say \"How doth the little golden key in the distance. \'Come on!\' cried the Mouse, who was.</p><h2>March Hare. \'Exactly so,\'.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-18-600x421.jpg\"></p><p>I know!\' exclaimed Alice, who was beginning to feel very uneasy: to be sure; but I THINK I can do no more, whatever happens. What WILL become of me? They\'re dreadfully fond of beheading people here; the great hall, with the name again!\' \'I won\'t interrupt again. I dare say you\'re wondering why I don\'t like it, yer honour, at all, at all!\' \'Do as I used--and I don\'t understand. Where did they live at the window, she suddenly spread out her hand in hand with Dinah, and saying \"Come up again.</p>', 'published', 3, 'Botble\\Member\\Models\\Member', 0, 'news/news-15.jpg', 729, 'default', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(16, 'Apple iMac with Retina 5K display review', 'Aut voluptatem quam id omnis. Et labore aut et aut nobis fugiat odit debitis. Repudiandae minus modi autem est expedita. Aspernatur aut sunt impedit cumque velit aliquid aut.', NULL, 'published', 10, 'Botble\\Member\\Models\\Member', 0, 'news/news-16.jpg', 851, 'video', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL);
INSERT INTO `posts` (`id`, `name`, `description`, `content`, `status`, `author_id`, `author_type`, `is_featured`, `image`, `views`, `format_type`, `created_at`, `updated_at`, `published_at`) VALUES
(17, '10,000 Web Site Visitors In One Month:Guaranteed', 'Accusantium nemo deleniti facilis aut nulla fuga. Reiciendis ad necessitatibus ipsam adipisci. Cumque molestias sed consectetur blanditiis omnis rem.', '<h2>Alice, who felt ready to ask.</h2><p>YOUR adventures.\' \'I could tell you his history,\' As they walked off together, Alice heard the Queen shouted at the number of executions the Queen was in the middle, being held up by two guinea-pigs, who were all crowded round it, panting, and asking, \'But who has won?\' This question the Dodo replied very solemnly. Alice was not easy to take the place of the leaves: \'I should think it would all wash off in the world! Oh, my dear Dinah! I wonder what they said. The executioner\'s argument was, that her neck would bend about easily in any direction, like a mouse, That he met in the distance. \'And yet what a Mock Turtle a little pattering of footsteps in the sea, some children digging in the sand with wooden spades, then a row of lodging houses, and behind them a new idea to Alice, \'Have you seen the Mock Turtle drew a long way. So she sat down at them, and the three were all turning into little cakes as they were lying on the breeze that followed them, the melancholy words:-- \'Soo--oop.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-6-600x421.jpg\"></p><p>She went in without knocking, and hurried off to trouble myself about you: you must manage the best of educations--in fact, we went to him,\' said Alice angrily. \'It wasn\'t very civil of you to learn?\' \'Well, there was a different person then.\' \'Explain all that,\' said Alice. \'I mean what I like\"!\' \'You might just as I\'d taken the highest tree in front of the tea--\' \'The twinkling of the way--\' \'THAT generally takes some time,\' interrupted the Hatter: \'it\'s very interesting. I never heard it.</p><h2>PLEASE mind what you\'re at!\".</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-14-600x421.jpg\"></p><p>And she opened it, and then said \'The fourth.\' \'Two days wrong!\' sighed the Lory, with a little different. But if I\'m Mabel, I\'ll stay down here! It\'ll be no use speaking to a shriek, \'and just as I used--and I don\'t like them!\' When the procession came opposite to Alice, flinging the baby was howling so much at this, but at the other end of the table, half hoping that the hedgehog had unrolled itself, and began whistling. \'Oh, there\'s no use speaking to a mouse, That he met in the sea. But they HAVE their tails in their mouths. So they got their tails fast in their mouths--and they\'re all over crumbs.\' \'You\'re wrong about the temper of your nose-- What made you so awfully clever?\' \'I have answered three questions, and that he had a wink of sleep these three little sisters--they were learning to draw,\' the Dormouse began in a low voice. \'Not at all,\' said the Dormouse, who was a table in the sea, though you mayn\'t believe it--\' \'I never saw one, or heard of \"Uglification,\"\' Alice.</p><h2>The poor little thing howled.</h2><h3>Presently the Rabbit was.</h3><p>Lobster; I heard him declare, \"You have baked me too brown, I must go by the time they were lying round the thistle again; then the different branches of Arithmetic--Ambition, Distraction, Uglification, and Derision.\' \'I never was so ordered about by mice and rabbits. I almost think I must have been changed for any of them. \'I\'m sure those are not attending!\' said the Mouse, turning to the Caterpillar, and the baby at her hands, and began:-- \'You are old, Father William,\' the young man said.</p><h3>I say again!\' repeated the.</h3><p>White Rabbit, who said in a large fan in the court!\' and the Queen in a fight with another hedgehog, which seemed to be said. At last the Dodo suddenly called out \'The Queen! The Queen!\' and the March Hare meekly replied. \'Yes, but I shall ever see such a nice soft thing to nurse--and she\'s such a curious plan!\' exclaimed Alice. \'And be quick about it,\' added the March Hare will be the use of this pool? I am very tired of swimming about here, O Mouse!\' (Alice thought this a very hopeful tone.</p><h3>White Rabbit hurried by--the.</h3><p>Rabbit in a low, trembling voice. \'There\'s more evidence to come before that!\' \'Call the next verse,\' the Gryphon at the top of his tail. \'As if I fell off the fire, stirring a large crowd collected round it: there was no longer to be trampled under its feet, \'I move that the Queen was close behind it when she looked down into its face in her lessons in here? Why, there\'s hardly room to grow to my right size for ten minutes together!\' \'Can\'t remember WHAT things?\' said the Mouse, frowning, but.</p><h3>What would become of you? I.</h3><p>I am in the same thing, you know.\' \'Not the same size for ten minutes together!\' \'Can\'t remember WHAT things?\' said the youth, \'one would hardly suppose That your eye was as long as it didn\'t much matter which way she put one arm out of a well--\' \'What did they draw the treacle from?\' \'You can draw water out of the Nile On every golden scale! \'How cheerfully he seems to suit them!\' \'I haven\'t opened it yet,\' said the Gryphon. \'They can\'t have anything to say, she simply bowed, and took the.</p><h2>Which shall sing?\' \'Oh, YOU.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>I say again!\' repeated the Pigeon, but in a confused way, \'Prizes! Prizes!\' Alice had no reason to be Number One,\' said Alice. \'Of course it was,\' he said. \'Fifteenth,\' said the youth, \'as I mentioned before, And have grown most uncommonly fat; Yet you balanced an eel on the Duchess\'s cook. She carried the pepper-box in her own child-life, and the soldiers did. After these came the guests, mostly Kings and Queens, and among them Alice recognised the White Rabbit was still in existence; \'and.</p>', 'published', 7, 'Botble\\Member\\Models\\Member', 0, 'news/news-17.jpg', 291, 'default', '2023-02-22 12:16:43', '2023-02-22 12:16:50', NULL),
(18, 'Unlock The Secrets Of Selling High Ticket Items', 'Nulla temporibus deleniti aperiam mollitia magnam enim non. Consequatur corrupti rerum eaque autem amet. Et ut esse impedit animi.', '<h2>Alice called out \'The race.</h2><p>CHORUS. (In which the cook tulip-roots instead of the garden, where Alice could hear the Rabbit coming to look for her, and she went on, spreading out the answer to shillings and pence. \'Take off your hat,\' the King said to herself, \'in my going out altogether, like a telescope! I think it was,\' he said. (Which he certainly did NOT, being made entirely of cardboard.) \'All right, so far,\' said the youth, \'and your jaws are too weak For anything tougher than suet; Yet you finished the goose, with the strange creatures of her sharp little chin. \'I\'ve a right to grow up again! Let me see--how IS it to his son, \'I feared it might be some sense in your pocket?\' he went on, looking anxiously round to see the earth takes twenty-four hours to turn into a small passage, not much like keeping so close to her to speak good English); \'now I\'m opening out like the look of the game, the Queen added to one of the Mock Turtle in the middle. Alice kept her waiting!\' Alice felt dreadfully puzzled. The.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-4-600x421.jpg\"></p><p>As soon as look at them--\'I wish they\'d get the trial done,\' she thought, and it was empty: she did not notice this question, but hurriedly went on, half to Alice. \'Only a thimble,\' said Alice thoughtfully: \'but then--I shouldn\'t be hungry for it, you may stand down,\' continued the Gryphon. \'I mean, what makes them sour--and camomile that makes them so shiny?\' Alice looked up, and began talking to him,\' the Mock Turtle sighed deeply, and drew the back of one flapper across his eyes. \'I wasn\'t.</p><h2>Queen to-day?\' \'I should.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-10-600x421.jpg\"></p><p>White Rabbit read out, at the March Hare,) \'--it was at in all directions, \'just like a mouse, That he met in the other: he came trotting along in a tone of great curiosity. \'Soles and eels, of course,\' said the Hatter. This piece of it at last, with a kind of thing never happened, and now here I am very tired of being all alone here!\' As she said to the Mock Turtle in the back. However, it was empty: she did it at last, more calmly, though still sobbing a little recovered from the sky! Ugh, Serpent!\' \'But I\'m not myself, you see.\' \'I don\'t know of any use, now,\' thought Alice, as she went back for a good opportunity for making her escape; so she began looking at the Cat\'s head with great emphasis, looking hard at Alice as he found it made no mark; but he could think of what sort it was) scratching and scrambling about in all my life!\' Just as she did not at all the jurymen on to himself in an offended tone, \'was, that the cause of this pool? I am very tired of being such a curious.</p><h2>I was sent for.\' \'You ought.</h2><h3>Dodo in an offended tone.</h3><p>I used to come once a week: HE taught us Drawling, Stretching, and Fainting in Coils.\' \'What was that?\' inquired Alice. \'Reeling and Writhing, of course, I meant,\' the King triumphantly, pointing to the confused clamour of the room. The cook threw a frying-pan after her as she could. \'The Dormouse is asleep again,\' said the King; and as Alice could hear the Rabbit in a low, trembling voice. \'There\'s more evidence to come out among the trees, a little anxiously. \'Yes,\' said Alice, quite.</p><h3>Turtle.\' These words were.</h3><p>Dodo could not think of nothing else to do, and in THAT direction,\' the Cat again, sitting on a three-legged stool in the prisoner\'s handwriting?\' asked another of the March Hare meekly replied. \'Yes, but some crumbs must have prizes.\' \'But who is Dinah, if I must, I must,\' the King had said that day. \'No, no!\' said the March Hare and the other side, the puppy made another snatch in the last few minutes she heard the King put on his spectacles. \'Where shall I begin, please your Majesty,\' said.</p><h3>Alice, feeling very glad.</h3><p>He says it kills all the same, shedding gallons of tears, until there was a treacle-well.\' \'There\'s no sort of way, \'Do cats eat bats, I wonder?\' Alice guessed who it was, even before she got up in spite of all her life. Indeed, she had never left off when they passed too close, and waving their forepaws to mark the time, while the Mouse in the after-time, be herself a grown woman; and how she would have appeared to them she heard one of the Mock Turtle interrupted, \'if you don\'t know of any.</p><h3>In a little shaking among.</h3><p>English. \'I don\'t like them raw.\' \'Well, be off, and had no idea what to beautify is, I suppose?\' \'Yes,\' said Alice loudly. \'The idea of the sense, and the King repeated angrily, \'or I\'ll have you got in as well,\' the Hatter were having tea at it: a Dormouse was sitting on a three-legged stool in the house, and wondering what to do next, when suddenly a White Rabbit hurried by--the frightened Mouse splashed his way through the little crocodile Improve his shining tail, And pour the waters of.</p><h2>THEN--she found herself in.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-18-600x421.jpg\"></p><p>MUST be more to come, so she bore it as well be at school at once.\' However, she soon made out what she did, she picked her way out. \'I shall do nothing of the tea--\' \'The twinkling of the right-hand bit to try the patience of an oyster!\' \'I wish I could say if I chose,\' the Duchess replied, in a few minutes that she had plenty of time as she went nearer to make out who I WAS when I get it home?\' when it grunted again, and Alice was more hopeless than ever: she sat still and said to Alice, and.</p>', 'published', 8, 'Botble\\Member\\Models\\Member', 0, 'news/news-18.jpg', 850, 'default', '2023-02-22 12:16:44', '2023-02-22 12:16:50', NULL),
(19, '4 Expert Tips On How To Choose The Right Men’s Wallet', 'Repellat qui tempore molestiae commodi amet excepturi. Doloremque officia placeat odit atque cumque aspernatur. Deleniti reiciendis ut at non. Quia nesciunt unde qui possimus dolore doloremque eum.', NULL, 'published', 3, 'Botble\\Member\\Models\\Member', 1, 'news/news-19.jpg', 208, 'video', '2023-02-22 12:16:44', '2023-02-22 12:16:50', NULL),
(20, 'Sexy Clutches: How to Buy & Wear a Designer Clutch Bag', 'Sit illum sapiente molestiae et velit. Ipsam vel explicabo quas in omnis quia dolores quasi. Eum voluptatibus minima corrupti voluptatem quis enim perspiciatis. Eum quis qui cum officiis est.', '<h2>When they take us up and.</h2><p>WAS a curious croquet-ground in her own children. \'How should I know?\' said Alice, in a wondering tone. \'Why, what a Mock Turtle drew a long time together.\' \'Which is just the case with my wife; And the Gryphon replied rather impatiently: \'any shrimp could have told you that.\' \'If I\'d been the right height to be.\' \'It is wrong from beginning to write out a race-course, in a tone of great relief. \'Call the first witness,\' said the Hatter. Alice felt a little way off, and that is enough,\' Said his father; \'don\'t give yourself airs! Do you think you\'re changed, do you?\' \'I\'m afraid I am, sir,\' said Alice; \'living at the cook, and a fall, and a bright idea came into her eyes; and once she remembered having seen such a subject! Our family always HATED cats: nasty, low, vulgar things! Don\'t let him know she liked them best, For this must ever be A secret, kept from all the players, except the King, rubbing his hands; \'so now let the Dormouse again, so violently, that she had known them all.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-2-600x421.jpg\"></p><p>Alice; \'you needn\'t be afraid of interrupting him,) \'I\'ll give him sixpence. _I_ don\'t believe there\'s an atom of meaning in them, after all. \"--SAID I COULD NOT SWIM--\" you can\'t take LESS,\' said the Mock Turtle would be wasting our breath.\" \"I\'ll be judge, I\'ll be jury,\" Said cunning old Fury: \"I\'ll try the first witness,\' said the Hatter. This piece of it in less than a real Turtle.\' These words were followed by a very good height indeed!\' said the last word with such sudden violence that.</p><h2>Alice looked round, eager to.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-9-600x421.jpg\"></p><p>WHAT?\' said the Mock Turtle recovered his voice, and, with tears running down his brush, and had just begun to think that very few things indeed were really impossible. There seemed to think about stopping herself before she had wept when she got into a pig, and she looked down at them, and he went on, \'I must go by the officers of the trial.\' \'Stupid things!\' Alice began telling them her adventures from the sky! Ugh, Serpent!\' \'But I\'m NOT a serpent!\' said Alice in a game of play with a kind of authority over Alice. \'Stand up and say \"Who am I to do?\' said Alice. \'I\'ve tried every way, and nothing seems to be seen--everything seemed to her ear, and whispered \'She\'s under sentence of execution.\' \'What for?\' said the King. \'Nothing whatever,\' said Alice. \'Come, let\'s try Geography. London is the driest thing I know. Silence all round, if you want to stay in here any longer!\' She waited for some time after the others. \'Are their heads downward! The Antipathies, I think--\' (for, you.</p><h2>Alice. \'Why, SHE,\' said the.</h2><h3>The chief difficulty Alice.</h3><p>Gryphon in an undertone, \'important--unimportant--unimportant--important--\' as if it makes rather a complaining tone, \'and they all crowded together at one corner of it: for she felt that it would be grand, certainly,\' said Alice doubtfully: \'it means--to--make--anything--prettier.\' \'Well, then,\' the Gryphon in an offended tone, \'Hm! No accounting for tastes! Sing her \"Turtle Soup,\" will you, won\'t you, will you, won\'t you, will you, old fellow?\' The Mock Turtle in the distance, sitting sad.</p><h3>She had just begun \'Well, of.</h3><p>I chose,\' the Duchess by this time, and was delighted to find quite a chorus of voices asked. \'Why, SHE, of course,\' said the Queen. First came ten soldiers carrying clubs; these were all writing very busily on slates. \'What are tarts made of?\' Alice asked in a minute. Alice began in a hot tureen! Who for such a rule at processions; \'and besides, what would be offended again. \'Mine is a very little use without my shoulders. Oh, how I wish you would seem to have the experiment tried. \'Very.</p><h3>But at any rate: go and live.</h3><p>Gryphon. \'Turn a somersault in the house of the garden, and I don\'t keep the same as the question was evidently meant for her. \'Yes!\' shouted Alice. \'Come on, then!\' roared the Queen, who were lying on their backs was the first verse,\' said the others. \'We must burn the house of the crowd below, and there she saw in another minute the whole party look so grave and anxious.) Alice could not even room for this, and Alice was more than that, if you were all crowded round it, panting, and asking.</p><h3>There was certainly English.</h3><p>Alice said; but was dreadfully puzzled by the hedge!\' then silence, and then said \'The fourth.\' \'Two days wrong!\' sighed the Lory, with a sudden burst of tears, but said nothing. \'Perhaps it doesn\'t mind.\' The table was a general chorus of \'There goes Bill!\' then the Mock Turtle replied in an offended tone, \'was, that the hedgehog a blow with its eyelids, so he with his nose, you know?\' \'It\'s the oldest rule in the morning, just time to hear it say, as it didn\'t sound at all this time, sat.</p><h2>Alice called out to sea as.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-18-600x421.jpg\"></p><p>Elsie, Lacie, and Tillie; and they sat down, and nobody spoke for some minutes. Alice thought to herself, for this curious child was very glad she had brought herself down to the Knave of Hearts, who only bowed and smiled in reply. \'That\'s right!\' shouted the Queen. \'Their heads are gone, if it began ordering people about like that!\' \'I couldn\'t help it,\' she thought, \'till its ears have come, or at least one of them bowed low. \'Would you tell me,\' said Alice, very much to-night, I should be.</p>', 'published', 4, 'Botble\\Member\\Models\\Member', 1, 'news/news-20.jpg', 303, 'default', '2023-02-22 12:16:44', '2023-02-22 12:16:50', NULL),
(21, 'Introduction To Angular', 'Introduction to Angular Framework.', '<p>&nbsp;</p><h2><span style=\"color:hsl(0,0%,0%);\"><span><strong>What is Framework ?</strong>&nbsp; &nbsp;&nbsp;</span></span></h2><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.&nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>You can now apply this definition in software engineering and refer to software frameworks as the structure for your software. It is like a platform for developing software applications.&nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.&nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.&nbsp; &nbsp;&nbsp;</span></span></p><h2 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\">Why Do You Need a Framework?</h2><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>Frameworks in general boost web development efficiency and performance by providing a consistent structure so that </span></span><a style=\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>developers </span></span></a><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>don’t have to keep rebuilding code from scratch. Frameworks are time savers that offer developers a host of extra features that can be added to software without requiring extra effort.&nbsp;&nbsp;</span></span></p><h2><span style=\"color:hsl(0,0%,0%);\"><span>What is Angular ?&nbsp; &nbsp;&nbsp;</span></span></h2><p><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\"><span>Angular is an open-source, </span></span><a style=\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>JavaScript </span></span></a><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\"><span>framework written in </span></span><a style=\"background-color:rgb(255,255,255);color:rgb(17,121,239);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;text-align:left;text-decoration:none;word-spacing:0px;\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>TypeScript </span></span></a><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\"><span>. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>It is a Framework which allows us to create <u>Single-page Applications</u> <u>[T</u>he applications which has only one html file, like Gmail. In the SAP you can navigate around and in the URL it will seem like you are visiting different pages but in reality, the page never changes only the content of the page changes <u>]</u>.&nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>Advantages of Single Page Applications -&nbsp; &nbsp;&nbsp;</span></span></p><ul><li><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>It makes a web application faster and gives the user a reactive experience.&nbsp; &nbsp;&nbsp;</span></span></li><li><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>Using JavaScript to change the content of the webpage dynamically is much faster than having reach out to the server for every page change and for every new piece of data we want to display.&nbsp; &nbsp;&nbsp;</span></span></li><li><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>If you do need some data from the server, you can load in the background without making the webpage unresponsive.&nbsp; &nbsp;&nbsp;</span></span></li></ul><h2 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\">What are the Different Angular Versions:&nbsp;</h2><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">“Angular” is the catch-all term for the various framework versions out there. Angular was developed in 2009, and as a result, there have been many iterations.</p><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">First, there was the original Angular, called Angular 1 and eventually known as <a style=\"color:rgb(17,121,239);font-family:Roboto, sans-serif;font-style:normal;font-weight:normal;text-decoration:none;\" target=\"_blank\" rel=\"noopener noreferrer\">AngularJS</a>. Then came Angular 2, 3, 4, 5, until finally, the current version, Angular 14, released on 2022. Each subsequent Angular version improves on its predecessor, fixing bugs, addressing issues, and accommodating increasing complexity of current platforms.</p><h2 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\" id=\"angular_architecture\">Angular Architecture</h2><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Angular is a full-fledged <a style=\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\" title=\"model-view-controller (MVC) framework.\" rel=\"noopener\" target=\"_blank\">model-view-controller (MVC) framework.</a> It provides clear guidance on how the application should be structured and offers bi-directional data flow while providing real DOM.&nbsp;</p><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">The following are the eight building blocks of an Angular application:&nbsp;</p><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">1. Modules</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">An Angular app has a root module, named App-Module, which provides the bootstrap mechanism to launch the application.</p><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">2. Components</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Each <a style=\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\" title=\"component\" rel=\"noopener\" target=\"_blank\">component</a> in the application defines a class that holds the application logic and data. A component generally defines a part of the user interface (UI).</p><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">3. Templates</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">The Angular template combines the Angular markup with HTML to modify HTML elements before they are displayed. There are two types of data binding:&nbsp;</p><ol><li style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);display:block;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;list-style:decimal;margin-bottom:1rem;margin-left:20px;margin-top:0px;orphans:2;padding:0px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Event binding: Lets your app respond to user input in the target environment by updating your application data.</li><li style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);display:block;font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;list-style:decimal;margin-bottom:1rem;margin-left:20px;margin-top:0px;orphans:2;padding:0px;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Property binding: Enables users to interpolate values that are computed from your application data into the HTML.</li></ol><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">4. Metadata</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Metadata tells Angular how to process a class. It is used to decorate the class so that it can configure the expected behaviour of a class.</p><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">5. Services</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">When you have data or logic that isn’t associated with the view but has to be shared across components, a <a style=\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\" title=\"service\" rel=\"noopener\" target=\"_blank\">service</a> class is created. The class is always associated with the @Injectible decorator.</p><h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:26px !important;margin-bottom:24px;margin-top:32px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">6. Dependency Injection</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><a style=\"box-sizing:border-box;color:rgb(17, 121, 239) !important;cursor:pointer;font-family:Roboto, sans-serif !important;font-style:normal;font-weight:normal;text-decoration:none;\" title=\"This feature\" rel=\"noopener\" target=\"_blank\">This feature</a> lets you keep your component classes crisp and efficient. It does not fetch data from a server, validate the user input, or log directly to the console. Instead, it delegates such tasks to the services.</p><h2 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\">Advantages of Angular:</h2><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Many versions of Angular have been released since its inception. All these versions have added to the efficient working of the framework.</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>1. Custom Components&nbsp;</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Angular enables users to build their own components that can pack functionality along with rendering logic into reusable pieces. It also plays well with web components.</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>2. Data Binding</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Angular enables users to effortlessly move data from JavaScript code to the view, and react to user events without having to write any code manually.&nbsp;</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>3. Dependency Injection</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Angular enables users to write modular services and inject them wherever they are needed. This improves the testability and reusability of the same services.&nbsp;</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>4. Testing</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Tests are first-class tools, and Angular has been built from the ground up with testability in mind. You will have the ability to test every part of your application—which is highly recommended.&nbsp;</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>5. Comprehensive</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Angular is a full-fledged framework and provides out-of-the-box solutions for server communication, routing within your application, and more.</p><h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"font-size:17px;\"><span>6. Browser Compatibility</span></span></h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Angular is cross-platform and compatible with multiple browsers. An Angular application can typically run on all browsers (Ex: Chrome, Firefox) and OSes, such as Windows, macOS, and Linux.</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, 'angular-intro.png', 2, NULL, '2023-02-22 12:27:54', '2023-02-23 12:01:16', '2023-02-22 12:22:00'),
(22, 'Installation of Angular', NULL, '<h1 style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\">Installing Angular</h1><p style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\">Node Package Manager</a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.</p><p style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.</p><p style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\">Open terminal/command window and type <code style=\"background-color:rgb(217,229,243);color:rgb(0,0,0);font-family:Consolas, Menlo, Monaco, \'Courier New\', monospace, serif;font-size:16px;\">node -v</code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.</p><p><samp style=\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\">C:\\Users\\xyz&gt; node -v</samp>&nbsp;<br><samp style=\"background-color:rgb(95,91,91);border:5px solid rgb(183, 181, 181);color:rgb(255,255,255);font-family:\'SFMono-Regular\', Menlo, Monaco, Consolas, \'Liberation Mono\', \'Courier New\', monospace;font-size:16px;font-style:normal;font-weight:300;text-align:justify;width:628.552px;word-spacing:0px;\">v14.18.0</samp></p><p style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\"external-link\" style=\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\" href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">https://nodejs.org</a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\"background-color:transparent;color:rgb(0,123,255);text-decoration:none;\" target=\"_blank\" rel=\"noreferrer noopener\">Node Package Manager</a>) on your local machine.</p><div class=\"raw-html-embed\"><hr></div><p>&nbsp;</p><p style=\"background-color:rgb(255,255,255);color:rgb(24,23,23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-weight:300;line-height:1.8rem;text-align:justify;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:16px;\"><span>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.&nbsp;&nbsp;</span></span></p><p style=\"color:rgb(68,68,68);font-family:Roboto, \'Helvetica Neue Light\', \'Helvetica Neue\', Helvetica, Arial, \'Lucida Grande\', sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:3.2rem;word-spacing:0px;\">Install the CLI using the <code style=\"background-color:rgba(219,219,219,0.3);color:rgb(68,68,68);font-family:\'Roboto Mono\', monospace;font-size:14.4px;\">npm</code> package manager:</p><pre class=\"lang-shell prettyprint\" style=\"min-height:32px;\"><span style=\"background-color:rgb(68,68,68);color:rgb(23,255,11);\"><span class=\"pln\">npm install </span><span class=\"pun\">-</span><span class=\"pln\">g </span><span class=\"lit\">@angular</span><span class=\"pun\">/</span><span class=\"pln\">cli</span></span>\r\n</pre>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 3, NULL, '2023-02-23 12:23:04', '2023-02-26 13:10:35', '2023-02-23 12:15:00');
INSERT INTO `posts` (`id`, `name`, `description`, `content`, `status`, `author_id`, `author_type`, `is_featured`, `image`, `views`, `format_type`, `created_at`, `updated_at`, `published_at`) VALUES
(23, 'File and Folder structure of Angular.', 'The file structure of the angular app.', '<h4 style=\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\"><strong>And what are some best practices to avoid a spaghetti mess?</strong></h4><p style=\"background-color:rgb(255,255,255);color:rgb(60,72,88);font-family:Nunito, sans-serif;font-size:1.5rem;font-style:normal;line-height:1.3;text-align:left;word-spacing:0px;\">&nbsp;</p><div class=\"raw-html-embed\">\r\n                \r\n     \r\n        \r\n    <blockquote class=\"special_block\" style=\"background: #f9f9f9;\">\r\n                                \r\n                        \r\n                \r\n        <p>\r\n                                                It doesn\'t take a lot of skill to write a program that computer\'s understand. The skill is to write software that other developers can understand.\r\n                                            \r\n                                \r\n                    \r\n        </p>\r\n	\r\n	\r\n    </blockquote>\r\n</div><p>&nbsp;</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/angular-directory-structure.png\" alt=\"angular-directory-structure.png\"></figure><p>&nbsp;</p><ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>The app folder contains the files, you have created for app components.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li></ol></li></ol><h4 class=\"fontsize22\">&nbsp;</h4><h3 class=\"fontsize22\">node_modules</h3><p class=\"fontsize22\">In this folder, you can find all the third-party libraries that the application may rely on.</p><p class=\"fontsize22\">&nbsp;</p><p style=\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\"><span style=\"background-color:hsl(0,0%,100%);\"><span>In this folder, you can find all the third-party libraries that the application may rely on. This folder is purely for development.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(237,248,255);color:rgb(38,38,38);font-family:Poppins;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:justify;word-spacing:0px;\">&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 3, NULL, '2023-02-24 13:06:04', '2023-02-25 11:26:27', '2023-02-24 12:43:00'),
(24, 'Angular Components.', 'Everything about angular components.', '<h3 style=\"background-color:rgb(255,255,255);color:rgb(39,44,55);font-family:Roboto, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:34px;max-width:100%;text-align:left;word-spacing:0px;\">What are Angular Components?</h3><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(68,68,68);font-size:17px;\"><span>It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\"><span>A Component contains the definition of the View and the data that defines how the View looks and behaves </span></span><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:18px;\"><span>.&nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>A Component consists of three things:&nbsp;&nbsp;</span></span></p><ul><li style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">A component class = Handles data and functionality</li><li style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">An HTML template = Determines the UI</li><li style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">Component-specific styles = Define the look and feel.</li></ul><h3><strong>Creating a Component in Angular:</strong></h3><div>&nbsp;</div><p>To create a component in any angular application, follow the below steps:</p><ul><li>Get Inside the workspace of the angular app via your terminal.</li><li>Create a component using the following command:</li></ul><pre>ng g c  \r\nOR\r\nng generate component  </pre><p style=\"background-color:rgb(255,255,255);color:rgb(81,86,94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:26px;text-align:left;word-spacing:0px;\">You will see the below Output:</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/angular-create-component.png\" alt=\"angular-create-component.png\"></figure><p>It will create a directory named as <span style=\"background-color:hsl(0,0%,90%);\"><span><strong>“component_name”,</strong> </span></span><span style=\"background-color:hsl(0,0%,100%);\"><span>in our example it is header so, in that directory there will be 4 new files created and one file modified.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><ol><li><span style=\"background-color:hsl(0,0%,100%);\"><span>&lt;component_name&gt;.component.html&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></li><li><span style=\"background-color:hsl(0,0%,100%);\"><span>&lt;component_name&gt;.component.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></li><li><span style=\"background-color:hsl(0,0%,100%);\"><span>&lt;component_name&gt;.scss or &lt;component_name&gt;.css [Depending on which option you chosen while creating the angular app.]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></li><li><span style=\"background-color:hsl(0,0%,100%);\"><span>&lt;component_name&gt;.spec.ts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></li></ol><p><span style=\"background-color:hsl(0,0%,100%);\"><span>In these newly files we can define the UI, logic of the newly created component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p>The modified file is <strong><u>app.module.ts</u></strong>, this contains the declarations of all the components of the angular application. so, in the declaration section of the app.module.ts file newly created<strong> &lt;component_name&gt;</strong> is added.</p><p>So, our component is registered in app.module.ts file (AppModule).</p><p>&nbsp;</p><p><span style=\"font-size:19px;\"><span><strong><u>UI of the component</u></strong> →&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p>As we all know that HTML and CSS makes the view of any webpage. so, our component will also have the HTML file and CSS [SCSS = Sassy Cascading Style Sheets].</p><p>&lt;component_name&gt;.component.html = It contains the architecture elements of our component.</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/component-html.png\" alt=\"component-html.png\"></figure><p>&nbsp;</p><p>&lt;component_name&gt;.component.scss = It contains the style of our component elements.</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/component-scss.png\" alt=\"component-scss.png\"></figure><p>Right now our component does not contains any stylesheet rules.</p><p>&nbsp;</p><p><span style=\"font-size:19px;\"><span><strong><u>Logic of the component</u></strong> →&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p>&lt;component_name&gt;.component.ts = It contains the logic of the component. From this file we can pass data to the html template.</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/component-ts.png\" alt=\"component-ts.png\"></figure><p><span style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\"><span>Let\'s deep dive into each &amp; every line of code created in this new component.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\"><span class=\"hljs-keyword\"><strong>import</strong></span><span> { </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\"><span class=\"hljs-title class_\"><strong>Component</strong></span><span> </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\"><span>, </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\"><span class=\"hljs-title class_\"><strong>OnInit</strong></span><span> </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\"><span>} </span><span class=\"hljs-keyword\"><strong>from</strong></span><span> </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(136,0,0);font-size:18px;\"><span class=\"hljs-string\">\'@angular/core\'</span><span> </span></span><span style=\"background-color:hsl(0,0%,60%);color:rgb(68,68,68);font-size:18px;\"><span>;&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\"><span>Using import statement, we can import npm packages and/or other Angular components or libraries. And, the statement shown is the first import statement in our newly created component.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><pre><code class=\"language-typescript\">@Component({ selector: \'app-hello-world\',\r\n templateUrl: \'./hello-world.component.html\',\r\n styleUrls: [\'./hello-world.component.css\'] \r\n })</code></pre><p>&nbsp;</p><p>Here, <code class=\"hljs language-ts\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);\">@Component</code> is the decorator used to denote that the class defined is of Component type. It specifies the selector to be used for this component which is much similar to that of HTML tags e.g. div, span, etc. To use this component in any other component, we can use it as <code class=\"hljs language-html\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);\">&lt;app-hello-world&gt;&lt;/app-hello-world&gt;</code></p><p>The next statement templateUrl defines the path of the HTML template file to be rendered for this component. Instead of using a separate HTML template file, we can also declare inline HTML code, example shown below:</p><pre><code class=\"language-typescript\">@Component({\r\n    selector: \'app-hello-world\',\r\n    template: \'&lt;h2&gt;Hello World!&lt;/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;/p&gt;\',\r\n    styleUrls: [\'./hello-world.component.css\']\r\n})</code></pre><p>&nbsp;</p><p><span style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\"><span>The next statement </span></span><code class=\"hljs language-ts\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);font-size:18px;font-style:normal;font-weight:400;word-spacing:1px;\">styleUrls: [\'./hello-world.component.css\']</code><span style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-size:18px;\"><span> denotes the path of css files to be used in the application. It can contain an array of CSS files. In addition to that, we can also define inline CSS like the example shown below:&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><pre><code class=\"language-typescript\">@Component({\r\n    selector: \'app-hello-world\',\r\n    template: \'&lt;h2&gt;Hello World!&lt;/h2&gt;&lt;p&gt;This is my first Angular application with Hello World component.&lt;/p&gt;\',\r\n    styles: [\'h2 { color: red; font-weight: 600; }\']\r\n})</code></pre><p>&nbsp;</p><p>&nbsp;</p><p><span style=\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\"><span>A Component is basically a class that is defined for any visible element or controls on the screen. Every component class has some properties and by using them, we can manipulate the behaviour or looks of the element on the screen. So, we can create, update or destroy our own components as per the requirement at any stage of the application. But in TypeScript, a component is basically a TypeScript class decorated with an @Component() decorator. From an HTML point of view, a component is a user-defined custom HTML tag that can be rendered in the browser to display any type of UI element along with some business logic.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p><span style=\"background-color:rgb(255,255,255);color:rgb(33,33,33);font-size:16px;\"><span>example:→&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p>&nbsp;</p><pre><code class=\"language-javascript\">@Component({\r\n  selector: \'app-header\',\r\n  templateUrl: \'./header.component.html\',\r\n  styleUrls: [\'./header.component.scss\']\r\n})\r\nexport class HeaderComponent {\r\n\r\n}</code></pre><p>&nbsp;</p><h2 style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\"><a style=\"text-decoration:none;\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started#the_structure_of_an_angular_application\">The structure of an Angular application</a></h2><div class=\"section-content\" style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><p>Angular is built with TypeScript. TypeScript is a superset of JavaScript meaning that any valid JavaScript is valid TypeScript. TypeScript offers typing and a more concise syntax than plain JavaScript, which gives you a tool for creating more maintainable code and minimizing bugs.</p><p>Components are the building blocks of an Angular application. A component includes a TypeScript class that has a <code>@Component()</code> decorator.</p></div><h3 style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\"><a style=\"text-decoration:none;\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started#the_decorator\">The decorator</a></h3><div class=\"section-content\" style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><p>You use the <code>@Component()</code> decorator to specify metadata (HTML template and styles) about a class.</p></div><h3 style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-style:normal;word-spacing:0px;\"><a style=\"text-decoration:none;\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started#the_class\">The class</a></h3><div class=\"section-content\" style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><p>The class is where you put any logic your component needs. This code can include functions, event listeners, properties, and references to services to name a few. The class is in a file with a name such as <code>feature.component.ts</code>, where <code>feature</code> is the name of your component. So, you could have files with names such as <code>header.component.ts</code>, <code>signup.component.ts</code>, or <code>feed.component.ts</code>. You create a component with a <code>@Component()</code> decorator that has metadata that tells Angular where to find the HTML and CSS. A typical component is as follows:</p></div><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;color:rgb(27,27,27);font-size:13.328px;font-style:normal;font-weight:400;word-spacing:0px;\"><code class=\"language-javascript\">import { Component } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'app-item\',\r\n    // the following metadata specifies the location of the other parts of the component\r\n  templateUrl: \'./item.component.html\',\r\n  styleUrls: [\'./item.component.css\']\r\n})\r\n\r\nexport class ItemComponent {\r\n// your code goes here\r\n}\r\n</code></pre><p>&nbsp;</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><br>This component is called <code>ItemComponent</code>, and its selector is <code>app-item</code>. You use a selector just like regular HTML tags by placing it within other templates. When a selector is in a template, the browser renders the template of that component whenever an instance of the selector is encountered. This tutorial guides you through creating two components and using one within the other.</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><strong>NOTE:</strong> The name of the component above is <code>ItemComponent</code> which is also the name of the class. Why? The names are the same simply because a component is nothing but a class supplemented by a TypeScript decorator.</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">Angular\'s component model offers strong encapsulation and an intuitive application structure. Components also make your application easier to unit test and can improve the overall readability of your code.</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><pre style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><code class=\"language-typescript\">export class HelloWorldComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}</code></pre><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><p>The next line of code <code class=\"hljs language-ts\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);\">export class HelloWorldComponent</code> denotes that this is a class with name \"HelloWorldComponent\" and is exporting it for use in other components. We\'ll cover parent-child components in another article that will explain it\'s better usage that why do we export our Angular components like this. For now, you may simply understand that we can import our own created components in any other component using the <code class=\"hljs language-ts\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);\">import</code> keyword.</p><p>Then, we have a constructor function which is always called when a new instance of the component is created. And, the next statement <code class=\"hljs language-ts\" style=\"background-color:rgb(243,243,243);color:rgb(68,68,68);\">ngOnInit()</code> is a lifecycle hook which in itself is a big concept in Angular.</p><h3>What are Lifecycle Hooks?</h3><p>Every component has a lifecycle from initialization to it\'s destruction. In between, there are many phases that we call lifecycle hooks. Below table can give you a quick understanding of the different lifecycle hooks available in Angular with their use and also the sequence in which they\'re been called.</p><blockquote><p>ngOnChanges = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>When an input/output binding value changes.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngOnInit = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>After the first </span></span><code style=\"background-color:rgb(239,246,255);color:rgb(45,52,54);font-family:Inconsolata, \'PT mono\', \'Roboto mono\', \'Space mono\', monospace;font-size:16px;font-style:normal;font-weight:400;line-height:20.8px;text-align:left;word-spacing:0px;\">ngOnChanges.</code></p></blockquote><blockquote><p>ngDoCheck = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>Developer\'s custom change detection.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngAfterContentInit = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>After component content initialized.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngAfterContentChecked = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>After every check of component content.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngAfterViewInit = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>fter a component\'s views are initialized.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngAfterViewChecked = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>After every check of a component\'s views.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><blockquote><p>ngOnDestroy = <span style=\"background-color:rgb(255,255,255);color:rgb(45,52,54);font-size:18px;\"><span>Just before the component/directive is destroyed.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><h3><a style=\"text-decoration:none;\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started#the_html_template\">The HTML template</a></h3><div class=\"section-content\"><p>Every component has an HTML template that declares how that component renders. You can define this template either inline or by file path.</p><p>To refer to an external HTML file, use the <code>templateUrl</code> property:</p><div class=\"code-example\"><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">@Component({\r\n  selector: \'app-root\',\r\n  templateUrl: \'./app.component.html\'\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n</code></pre></div></div></section><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div><p>To write inline HTML, use the <code>template</code> property and write your HTML within backticks:</p><div class=\"code-example\"><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">@Component({\r\n  selector: \'app-root\',\r\n  template: `&lt;h1&gt;Hi!&lt;/h1&gt;`,\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n</code></pre></div></div></section><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div><p>Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component\'s state changes. One use of this feature is inserting dynamic text, as shown in the following example.</p><div class=\"code-example\"><pre class=\"brush: html notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">&lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n</code></pre></div></div></section><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div><p>The double curly braces instruct Angular to interpolate the contents within them. The value for <code>title</code> comes from the component class:</p><div class=\"code-example\"><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">import { Component } from \'@angular/core\';\r\n\r\n@Component ({\r\n  selector: \'app-root\',\r\n  templateUrl: \'./app.component.html\',\r\n  styleUrls: [\'./app.component.css\']\r\n})\r\n\r\nexport class AppComponent {\r\n    title = \'To do application\';\r\n}\r\n</code></pre></div></div></section><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div><p>When the application loads the component and its template, the browser sees the following:</p><div class=\"code-example\"><pre class=\"brush: html notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">&lt;h1&gt;To do application&lt;/h1&gt;\r\n</code></pre></div></div></section><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><h3><a style=\"text-decoration:none;\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started#styles\">Styles</a></h3><div class=\"section-content\"><p>A component can inherit global styles from the application\'s <code>styles.css</code> file and augment or override them with its own styles. You can write component-specific styles directly in the <code>@Component()</code> decorator or specify the path to a CSS file.</p><p>To include the styles directly in the component decorator, use the <code>styles</code> property:</p><div class=\"code-example\"><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">@Component({\r\n  selector: \'app-root\',\r\n  templateUrl: \'./app.component.html\',\r\n  styles: [\'h1 { color: red; }\']\r\n})\r\n</code></pre></div></div></section><p>&nbsp;</p><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div><p>Typically, a component uses styles in a separate file using the <code>styleUrls</code> property:</p><div class=\"code-example\"><pre class=\"brush: js notranslate\" style=\"border:1px solid transparent;\"><code class=\"language-javascript\">@Component({\r\n  selector: \'app-root\',\r\n  templateUrl: \'./app.component.html\',\r\n  styleUrls: [\'./app.component.css\']\r\n})\r\n</code></pre></div></div></section><section style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\"><div class=\"section-content\"><p>With component-specific styles, you can organize your CSS so that it is easily maintainable and portable.</p></div></section><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><p style=\"background-color:rgb(255,255,255);color:rgb(27,27,27);font-family:Inter, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Fira Sans\', \'Droid Sans\', \'Helvetica Neue\', sans-serif;font-size:16px;font-style:normal;font-weight:400;word-spacing:0px;\">&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 4, NULL, '2023-02-25 11:47:14', '2023-03-04 11:47:27', '2023-02-25 11:41:00'),
(25, 'Angular Lifecycle Hooks.', NULL, '<h2>Phases</h2><div class=\"paragraph\" style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\"><p style=\"font-weight:400;\"><span style=\"font-size:16px;\"><span>A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.&nbsp; </span></span><span style=\"background-color:rgb(255,255,255);color:rgb(41,41,41);font-size:16px;\"><span>Angular provides eight interfaces to implement those as component goes from creation to destruction phases.&nbsp; &nbsp; &nbsp;</span></span></p></div><div class=\"paragraph\" style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\"><p style=\"font-weight:400;\"><span style=\"font-size:16px;\"><span>We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.&nbsp; &nbsp; &nbsp; &nbsp;</span></span></p></div><div class=\"paragraph\" style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\"><p style=\"font-weight:400;\"><span style=\"font-size:16px;\"><span>To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods </span><i><span>hooks </span></i><span>.&nbsp; &nbsp; &nbsp; &nbsp;</span></span></p></div><div class=\"paragraph\" style=\"background-color:rgb(255,255,255);color:rgb(51,51,51);font-family:Lato, \'helvetica neue\', Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-weight:400;word-spacing:0px;\"><p style=\"font-weight:400;\"><span style=\"font-size:16px;\"><span>The&nbsp;hooks are executed in&nbsp;this order:&nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><figure class=\"image image_resized\" style=\"width:50%;\"><img src=\"http://127.0.0.1:8000/storage/lifecycle-hooks-1.webp\" alt=\"lifecycle-hooks-1.webp\"></figure><p>&nbsp;</p><h2><span style=\"font-size:18px;\"><span><strong>Constructor →</strong>&nbsp; &nbsp; &nbsp;&nbsp;</span></span></h2><ul><li>Constructor is not a lifecycle hook.</li></ul><p style=\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\"><span style=\"background-color:hsl(0,0%,100%);font-size:16px;\"><span>Whenever working with components, the first step is the calling of the constructor. This happens even before the implementation of any lifecycle hook. Also, if our component has any dependencies, a constructor is where we can inject those.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\"><span style=\"background-color:hsl(0,0%,100%);font-size:16px;\"><span>At this point till the constructor, none of the component\'s input properties are available to use in the template or in the component itself. Neither its child components are constructed. Nearly all the projected contents are also available for the manipulations.&nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(22,22,22);font-family:\'Segoe UI\', Arial, sans-serif;font-size:17px;font-style:normal;font-weight:400;text-align:justify;word-spacing:0px;\"><span style=\"background-color:hsl(0,0%,100%);font-size:16px;\"><span>A simple example of the usage of the constructor would be as:&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p>&nbsp;</p><pre><code class=\"language-typescript\">import {Component} from \'angular2/core\';\r\nimport {ValService} from \'./valService\';\r\n\r\n@Component({\r\n selector: ‘app-root’,\r\n template: `\r\n `\r\n})\r\nclass AppComponent {\r\n value: String;\r\n constructor(private _valService: ValService) {\r\n this.value = _valService.getValue();\r\n }\r\n}</code></pre><p>&nbsp;</p><h2 style=\"background-color:rgb(252,252,252);color:rgb(68,102,197);font-family:\'Segoe UI\', Arial, sans-serif;font-size:30px;font-style:normal;font-weight:500;line-height:1.3;text-align:justify;word-spacing:0px;\">About the Lifecycle Hook methods</h2><h3 style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"font-size:17px;\"><i><span><u>ngOnChanges()</u>&nbsp; &nbsp; &nbsp;&nbsp;</span></i></span></h3><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"background-color:hsl(0,0%,100%);color:hsl(0,0%,30%);font-size:16px;\"><span>A lifecycle hook method is called when any of the properties bound already have their value changed. This method is called every time there comes a change in the value. The method gets an object <strong>SimpleChanges</strong> of the previous and current value of the property.&nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"background-color:rgb(252,252,252);color:hsl(0,0%,30%);font-size:16px;\"><span>In other words, the lifecycle hook ngOnChanges() is Invoked every time whenever there is a change in one of the input properties of the component.&nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\">Called every time a data-bound input property changes. It’s called a first time before the </span></span><span style=\"color:hsl(0,0%,30%);\"><span><strong style=\"color:rgb(77,91,124);font-family:Inter, sans-serif;font-size:16px;font-style:normal;font-weight:bolder;text-align:left;word-spacing:0px;\">ngOnInit</strong> </span></span><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\">hook. The hook receives a </span></span><span style=\"color:hsl(0,0%,30%);font-size:17px;\"><span>SimpleChanges </span></span><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;text-align:left;word-spacing:0px;\">object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it’s a good idea to limit the amount of processing it does.</span><span> &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"font-size:17px;\"><i><span><strong>ngOnInit()</strong> </span></i></span><span style=\"color:hsl(0,0%,30%);\"><span>→&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>We use OnInit() mostly for initialization. It is called after&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\">&nbsp;</p><figure class=\"image image_resized\" style=\"width:75%;\"><img src=\"http://127.0.0.1:8000/storage/parent-oninit-1.png\" alt=\"parent-oninit-1.png\"></figure><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\"><span style=\"color:hsl(0,0%,60%);font-size:16px;\"><span>Notice = </span></span><span style=\"color:rgb(77,91,124);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\">how we import </span></span><span style=\"font-size:16px;\"><span>OnInit</span></span> <span style=\"color:rgb(77,91,124);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\">, but we implement it with the </span></span><span style=\"font-size:16px;\"><span>ngOnInit</span></span> <span style=\"color:rgb(77,91,124);font-size:16px;\"><span style=\"font-family:Inter, sans-serif;font-style:normal;font-weight:400;word-spacing:0px;\">method. It’s the same principle for the other lifecycle hooks.</span><span> &nbsp;&nbsp;</span></span></p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\">&nbsp;</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/ngonit.png\"></figure><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\">&nbsp;</p><p style=\"background-color:rgb(252,252,252);color:rgb(245,129,29);font-family:\'Segoe UI\', Arial, sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:1.2;text-align:justify;word-spacing:0px;\">&nbsp;</p></div>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 2, NULL, '2023-02-26 02:06:07', '2023-02-26 13:10:43', '2023-02-26 01:37:00');
INSERT INTO `posts` (`id`, `name`, `description`, `content`, `status`, `author_id`, `author_type`, `is_featured`, `image`, `views`, `format_type`, `created_at`, `updated_at`, `published_at`) VALUES
(26, 'Interpolation in Angular.', NULL, '<h3>What is Angular Interpolation?</h3><p><a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/angular/dev-workspace-setup/\"><strong>Angular</strong></a><strong> interpolation</strong> is used display a <a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/angular/angular-component/\">component</a> property in the respective view <a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/angular/angular-templates-and-views/\">template</a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/typescript/literal-types/\">string</a>, number, date, <a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/typescript/arrays/\">arrays</a>, list or <a style=\"color:rgb(5,86,243);text-decoration:none;\" href=\"https://howtodoinjava.com/typescript/maps/\">map</a>.</p><p>Data binding consist of <i>one way data binding</i> and <i>two way data binding</i>. Interpolation is used for <strong>one way data binding</strong>. Interpolation moves data in one direction from our components to HTML elements.</p><p>Components render data, but data can change in time, so it needs to be dynamic.</p><p><span style=\"color:hsl(0,0%,30%);\"><span>We use curly braces inside other curly braces to render dynamic data: </span><code><span>{{ data }} </span></code><span>and this representation is called string interpolation.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></p><p><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\"><span>HTML =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><pre><code class=\"language-typescript\">&lt;p&gt;Header Component&lt;/p&gt;\r\n&lt;p&gt;{{userName}}&lt;/p&gt;\r\n</code></pre><p><span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);\"><span>TS =&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><pre><code class=\"language-typescript\">import { Component, OnInit } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'app-header\',\r\n  templateUrl: \'./header.component.html\',\r\n  styleUrls: [\'./header.component.scss\']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  userName = \"MaK\";\r\n  constructor(){\r\n    console.log(\"parent constructor is called.\");\r\n  }\r\n  ngOnInit():void{\r\n    console.log(\"parent OnInit is called.\");\r\n  }\r\n}</code></pre><p>&nbsp;</p><p>Output =</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/interpolation-output.png\" alt=\"interpolation-output.png\"></figure><h2><span style=\"font-size:17px;\"><span><strong>Angular Interpolation with hardcoded string:</strong>&nbsp; &nbsp; &nbsp;</span></span></h2><p><span style=\"color:hsl(0,0%,30%);font-size:16px;\"><span>It&nbsp;is also possible in Angular to concatenate some hard-coded string value with the property value. In order to understand this, let us add the hard-coded string First Name before the FirstName property and Last Name before the LastName property.&nbsp;</span></span></p><p><span style=\"color:rgb(0,0,0);font-size:16px;\"><span>HTML =</span></span></p><pre><code class=\"language-typescript\">&lt;p&gt;{{\'First Name \' + firstName + \' , \' + \'Second Name \' + secondName }}&lt;/p&gt;</code></pre><p>TS =&nbsp;</p><pre><code class=\"language-typescript\">export class HeaderComponent implements OnInit {\r\n\r\n  firstName = \"MaK\";\r\n  secondName = \"Jaat\";\r\n\r\n}</code></pre><p>Output:&nbsp;</p><blockquote><p><span style=\"color:rgb(0,0,0);\"><span style=\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\">First Name MaK , Second Name Jaat</span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></p></blockquote><h5 style=\"text-align:justify;\">&nbsp;</h5><h2 style=\"text-align:justify;\"><span style=\"color:rgb(0,0,0);font-size:18px;\"><span><strong>Interpolation in Angular with Ternary Operator:</strong>&nbsp; &nbsp; &nbsp; &nbsp;</span></span></h2><p>The expression that is enclosed in the double curly braces is commonly called Template Expression and the template expression can also be a ternary operator.</p><p>&lt;condition&gt; ? &lt;expression_if_true&gt; : &lt;expression_if_false&gt;</p><p>HTML =&nbsp;</p><pre><code class=\"language-plaintext\">&lt;p&gt;{{address ? address : \'Address Not Available\'}}&lt;/p&gt;</code></pre><p>TS =&nbsp;</p><pre><code class=\"language-plaintext\">export class HeaderComponent {\r\n  address = \"\";\r\n}</code></pre><p>Output =&nbsp;</p><blockquote><p><span style=\"color:rgb(0,0,0);\"><span style=\"font-family:\'Times New Roman\';font-size:medium;font-style:normal;font-weight:400;word-spacing:0px;\">Address Not Available</span><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p></blockquote><ul><li>In the above example, we used the ternary operator - if the address field has a value in the .ts file then we display that value else display ‘Address Not Available\'</li></ul><p>&nbsp;</p><h2><span style=\"font-size:17px;\"><span><strong>Method Interpolation in Angular application:</strong>&nbsp; &nbsp;&nbsp;</span></span></h2><p>Let`s see how to create a method using typescript and then we will discuss how to call a class method using interpolation. so, what we will do here is, we will create one method let say getFullName and this method will return the full name by combining the first name and last name properties.</p><p>HTML =&nbsp;<span style=\"background-color:rgb(255,255,255);color:hsl(0,0%,30%);font-size:16px;\"><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><pre><code class=\"language-plaintext\">&lt;p&gt;{{getFullName()}}&lt;/p&gt;</code></pre><p>TS =&nbsp;</p><pre><code class=\"language-plaintext\">export class HeaderComponent {\r\n\r\n  firstName = \"\";\r\n  lastName = \"\";\r\n  address = \"\";\r\n  constructor(){\r\n    console.log(\"parent constructor is called.\");\r\n    this.firstName = \"MaK\";\r\n    this.lastName = \"Jaat\";\r\n    this.address = \"HR\";\r\n  }\r\n\r\n  getFullName(){\r\n    return this.firstName + \" \" + this.lastName;\r\n  }\r\n}</code></pre><p>Output =&nbsp;</p><blockquote><p>MaK Jaat</p></blockquote><ul><li>In the above example, we used function interpolation. We have called function getFullName() from the HTML code and it is defined in the .ts file which returns the firstName + lastName.</li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 3, NULL, '2023-02-26 09:00:12', '2023-02-28 08:43:09', '2023-02-26 08:20:00'),
(27, 'Angular Data Binding.', NULL, '<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.</p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.</p><ul><li>It allows communication between a component and the DOM.</li></ul><p>&nbsp;</p><h2>One-way Data Binding</h2><p>One-way data binding will bind the data from the component to the view (DOM) or from view to the component. One-way data binding is unidirectional. you can only bind the data from component to the view or from view to the component.</p><figure class=\"image image_resized\" style=\"width:75%;\"><img src=\"http://127.0.0.1:8000/storage/one-waydatabinding.webp\" alt=\"one-waydatabinding.webp\"></figure><h3>From the Component to the DOM</h3><p><span style=\"background-color:hsl(150,75%,60%);\"><span>Interpolation: {{value}}&nbsp; &nbsp;</span></span></p><ul><li>This adds the value of a property from the component.</li></ul><pre><code class=\"language-typescript\">&lt;p&gt; Name: {{user.name}} &lt;/p&gt;\r\n&lt;p&gt; Age: {{user.age}} &lt;/p&gt;</code></pre><p>&nbsp;</p><p><span style=\"background-color:hsl(150,75%,60%);\"><span>Property binding: [property]=\"value\"&nbsp; &nbsp;</span></span></p><p>It is used to set a property of a view element. The binding sets the property to the value of a template expression.</p><p>With property binding, the value is passed from the component to the specified property, which can often be a simple html attribute.</p><pre><code class=\"language-typescript\">&lt;input type=\"email\" [value]=\"user.email\"&gt;</code></pre><p>&nbsp;</p><p><span style=\"background-color:hsl(150,75%,60%);\"><span>Attribute Binding: [attr.attribute-you-are-targeting]=\"expression\"&nbsp;&nbsp;</span></span></p><p>It is used to set attribute of elements from the components to the view template.</p><p>example → [attr.colspan]=\"{{colspanVal}}\"</p><p>When property corresponding to the attribute does not exist for example colspan does not have corresponding dom property so attribute binding is required.</p><p>Error is thrown in console if we try to use colspan=\"{{colspanVal}}\" -property binding.</p><p><span style=\"background-color:hsl(150,75%,60%);\"><span>Style Binding: [style.style-property]=\"value\"</span></span></p><p>Style binding is used to specify inline styling for template elements in your component.</p><pre><code class=\"language-plaintext\">&lt;h2 [style.font-size] = \"\'100px\'\"&gt; Resources&lt;/h2&gt;\r\n&lt;h2 [style.fontSize] = \"rule\"&gt;Get from rule&lt;/h2&gt;\r\n&lt;h2 [style.fontSize] = \"check?\'100px\':\'200px\'\"&gt; Ternary Operator&lt;/h2&gt;\r\n\r\n//check = true; //it is defined in the component.</code></pre><p>&nbsp;</p><p>&nbsp;</p><h3>From the DOM to the Component</h3><p>&nbsp;</p><p><span style=\"background-color:hsl(150,75%,60%);\"><span>Event binding: (event)=\"function\"&nbsp;</span></span></p><p>When a specific DOM event happens (e.g.: click, change, keyup), call the specified method in the component.</p><p>Event Binding allows us to bind events such as keystrokes, clicks, hover, touch, etc to a method in component. It is one way from view to component. for example, when the user changes input in a text box, we can update the model in the component, run some validations, etc. When the user submits the button, we can then save the model to the backend server.</p><p>(event)=\"TemplateStatement\"</p><pre><code class=\"language-typescript\">&lt;button (click)=\"fire()\"&gt;CLICK ME&lt;/button&gt;</code></pre><ul><li>Here, when we click the button then fire() method is called from the component.</li></ul><p>&nbsp;</p><h2>Two-way→</h2><h4>Two-way data binding:</h4><p>syntax → [(ngModel)]=\"value\"</p><p>Using what`s called the banana in a box syntax, two-way data binding allows to have the data flow both ways.</p><p>It means that changes made to our model in the component are propagated to the view and that any changes made in the view are immediately updated in the underlying component.</p><p>[()] =&gt; banana in a box.</p><pre><code class=\"language-plaintext\">&lt;input type=\"email\" [(ngModel)]=\"user.email\"&gt;</code></pre><ul><li>the user.email data property is used as the value for the input, but if the user changes the value, the component property gets updates automatically to the new value:</li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 1, NULL, '2023-02-27 11:06:29', '2023-02-28 08:48:56', '2023-02-27 10:57:00'),
(28, 'Angular Directives.', NULL, '<h1>What are Angular Directives?</h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.</p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/types-of-angular-8-directives.png\" alt=\"types-of-angular-8-directives.png\"></figure><p>&nbsp;</p><h1>Types of Directives in Angular:</h1><p>The Directives are classified into three types based on their behaviour.</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/types-of-directives.png\" alt=\"types-of-directives.png\"></figure><ol><li>Structural Directive</li><li>Attribute Directive</li><li>Component Directives</li></ol><h2>Structural Directive →</h2><p>The structural Directives are responsible for the HTML layout. That means, they will shape or reshape the HTML view by simply adding or removing the elements from the DOM. These directives are basically used to handle how the component or the element should render in a template.</p><p>In angular there are three structural directives available.&nbsp;</p><ol><li>NgFor → (*ngFor)</li><li>NgIf → (*ngIf)</li><li>NgSwitch → (*ngSwitch)</li></ol><p>&nbsp;</p><h1>ngFor →</h1><p>It is &nbsp;a built-in template directive that makes it easy to iterate over something like an array or an object and create a template for each item.</p><pre><code class=\"language-typescript\">\r\n\r\n&lt;ul&gt;\r\n	&lt;li *ngFor=\"let user of users\"&gt;{{user.name}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n--Output--\r\n&lt;ul&gt;\r\n	&lt;li&gt; Mukesh &lt;/li&gt;\r\n	&lt;li&gt; Suresh &lt;/li&gt;\r\n	&lt;li&gt; Ram &lt;/li&gt;\r\n&lt;/ul&gt;</code></pre><p><u>Explanation</u>&nbsp;</p><ul><li><span style=\"background-color:hsl(180,75%,60%);\"><span>let user </span></span>creates a local variable that will be available in the template</li><li><span style=\"background-color:hsl(180,75%,60%);\"><span>of users </span></span>means that we will be iterating over the users iterable that should be made available in our component.</li><li>The <span style=\"background-color:hsl(180,75%,60%);\"><span>* </span></span>character before ngFor creates a parent template. It`s a shortcut to the following syntax: <span style=\"background-color:hsl(180,75%,60%);\"><span>template=\"ngFor let item of items\"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></span></li></ul><p>another example:</p><pre><code class=\"language-typescript\">// defined in component\r\nconst HEROES = [\r\n    {id: 1, name:\'Superman\'},\r\n    {id: 2, name:\'Batman\'},\r\n    {id: 5, name:\'BatGirl\'},\r\n    {id: 3, name:\'Robin\'},\r\n    {id: 4, name:\'Flash\'}\r\n];\r\n\r\nheros = HEROES;\r\n\r\n\r\n&lt;table&gt;\r\n        &lt;thead&gt;\r\n            &lt;th&gt;Name&lt;/th&gt;\r\n            &lt;th&gt;Index&lt;/th&gt;\r\n        &lt;/thead&gt;\r\n        &lt;tbody&gt;\r\n            &lt;tr *ngFor=\"let hero of heroes\"&gt;\r\n                &lt;td&gt;{{hero.name}}&lt;/td&gt;\r\n            &lt;/tr&gt;\r\n        &lt;/tbody&gt;\r\n    &lt;/table&gt;</code></pre><p>&nbsp;</p><h2>Available local variable =</h2><ul><li><strong>variable visibility </strong>= the loop variable hero is only visible inside the loop, you would not be able to access it outside the ngFor section.</li></ul><p>Finding the index of a list element = We can get the index of the current element by using the index variable.</p><pre><code class=\"language-typescript\">&lt;tr *ngFor=\"let hero of heroes; let i = index\"&gt;\r\n    &lt;td&gt;{{hero.name}}&lt;/td&gt;\r\n    &lt;td&gt;{{i}}&lt;/td&gt;\r\n&lt;/tr&gt;</code></pre><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/ngfor-index.png\" alt=\"ngfor-index.png\"></figure><hr><ul><li><strong>Stripe a table using even and odd</strong> = Another very common functionality needed when building tables is to able to stripe a table by adding a different css class to the even or odd rows.</li></ul><p>let`s say that to the above table we want to add a CSS class even if the row is even and the CSS class odd if the row is odd.</p><p>In order to do so, we have a couple of variables available for that: even and odd, that can be used in the following way together with ngClass.</p><p>&nbsp;</p><pre><code class=\"language-plaintext\">&lt;tr *ngFor=\"let hero of heroes; let even = even; let odd = odd\" \r\n    [ngClass]=\"{ odd: odd, even: even }\"&gt;\r\n    &lt;td&gt;{{hero.name}}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n// css \r\n.odd{\r\n    font-size: larger;\r\n    background-color: aqua;\r\n}\r\n\r\n.even{\r\n    font-size: small;\r\n    background-color: bisque;\r\n}</code></pre><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/ngfor-even-odd-row-class.png\" alt=\"ngfor-even-odd-row-class.png\"></figure><hr><ul><li><strong>Identifying the first and the last element of a list</strong> = just like the even and odd functionality, they are also two other variables that can be used to identify first and the last elements of the list:</li></ul><pre><code class=\"language-plaintext\">&lt;tr *ngFor=\"let hero of heroes; let first = first; let last = last\" \r\n    [ngClass]=\"{ first: first, last: last }\"&gt;\r\n    &lt;td&gt;{{hero.name}}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n// css\r\n.first{\r\n    background-color: cornflowerblue;\r\n}\r\n.last{\r\n    background-color: deeppink;\r\n}</code></pre><p>&nbsp;</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/ngfor-first-last-class.png\" alt=\"ngfor-first-last-class.png\"></figure><h1>Component Directives →</h1><p>These form the main class having details of how the component should be processed, used at runt-time. directive in angular is a reusable component.</p><p>Let us build a custom attribute directive alterBackground to change the background color of the desired element from scratch.</p><p>The following command can be used to generate a directive in the project.</p><blockquote><p>ng generate directive alterBackground</p></blockquote><p>Tha command above creates the directive file <span style=\"background-color:hsl(0,0%,90%);\"><span>alter-background.directive.ts</span></span><span style=\"background-color:hsl(0, 0%, 100%);\"><span> , a corresponding test file (.spec.ts) and declares the directive class in the root AppModule.</span></span></p><p>&nbsp;</p><pre><code class=\"language-typescript\">import { Directive } from \'@angular/core\';\r\n\r\n@Directive({\r\n  selector: \'[appAlterBackground]\'\r\n})\r\nexport class AlterBackgroundDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n\r\n// app.module.ts\r\ndeclarations: [\r\n    AppComponent,\r\n    AlterBackgroundDirective\r\n	// adds the reference of our directive class.\r\n  ],</code></pre><p>use the<span style=\"background-color:hsl(0,0%,90%);\"><span> @Directive decorator</span></span> to manage a custom directive.</p><p>Furthermore, <span style=\"background-color:hsl(0,0%,90%);\"><span>AlterBackgroundDirective</span></span> class is declared for our directive. At this point, we can start writing the code for the background color. Import and add ElementRef instance in the constructor to grant access to the DOM element. Also, use native element property of <span style=\"background-color:hsl(0,0%,90%);\"><span>ElementRef</span></span> to change the background color of the element as follows:</p><pre><code class=\"language-typescript\">import { Directive, ElementRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[appAlterBackground]\"\r\n})\r\nexport class AlterBackgroundDirective {\r\n  constructor(private el: ElementRef) {\r\n    this.el.nativeElement.style.backgroundColor = \"blue\";\r\n  }\r\n}</code></pre><p>To apply the custom directive to a DOM element, add a &lt;h1&gt; tag and introduce <span style=\"background-color:hsl(0,0%,90%);\"><span>appAlterBackground</span></span> inside the tag. Have a look at the tags in the below app.component.html file.</p><pre><code class=\"language-plaintext\">&lt;div&gt;\r\n	&lt;h1 appAlterBackground&gt; This should be in the blue&lt;/h1&gt;\r\n&lt;/div&gt;</code></pre><p>Output -</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/custom-directive-output.png\" alt=\"custom-directive-output.png\"></figure><p>&nbsp;</p><h1>Attributes Directives →</h1><p>This type of directive changes the appearance or behaviour of an element, component, or another directive.</p><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 2, NULL, '2023-02-28 10:14:19', '2023-03-01 12:31:30', '2023-02-28 09:56:00'),
(29, 'Package.json', NULL, '<h1>Package.json file →</h1><p>When you work with large projects you would need lot of javascript frameworks, so in one project you would need jquery, angular and so on. Doing “<span style=\"background-color:hsl(0, 0%, 90%);\">npm install</span>” again and again is definitely wasting precious time of your life. so to load all javascript framework references in one go “<span style=\"background-color:hsl(0, 0%, 90%);\">npm</span>” team has given <span style=\"background-color:hsl(0, 0%, 90%);\">package.json</span>. In this <span style=\"background-color:hsl(0, 0%, 90%);\">package.json</span> file you can make an entry to all javascript references and load them in one go.</p><p>The main purpose of this file is to hold various metadata related to the project and it is used to give information to <span style=\"background-color:hsl(0, 0%, 90%);\">npm</span> that allows to identify the project and its dependencies.</p><h2>What is a <span style=\"background-color:hsl(0, 0%, 90%);\">package.json</span> file?</h2><p><span style=\"background-color:hsl(0,0%,90%);\"><span>package.json </span></span>is a versioning file that primarily contains the list of dependencies (libraries) that angular or your node.js project needs to run. It also includes other meta information like scripts, author &amp; license information, description, project properties etc.</p><p>The <span style=\"background-color:hsl(0, 0%, 90%);\">package.json</span> is a file, which contains mainly information about the application libraries or third-party libraries included in the application and its version and all packages and dependencies it needs to make the application working.</p><pre><code class=\"language-plaintext\">{\r\n  \"name\": \"hello-world-app\",\r\n  \"version\": \"0.0.0\",\r\n  \"scripts\": {\r\n    \"ng\": \"ng\",\r\n    \"start\": \"ng serve\",\r\n    \"build\": \"ng build\",\r\n    \"watch\": \"ng build --watch --configuration development\",\r\n    \"test\": \"ng test\"\r\n  },\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@angular/animations\": \"^15.0.0\",\r\n    \"@angular/common\": \"^15.0.0\",\r\n    \"@angular/compiler\": \"^15.0.0\",\r\n    \"@angular/core\": \"^15.0.0\",\r\n    \"@angular/forms\": \"^15.0.0\",\r\n    \"@angular/platform-browser\": \"^15.0.0\",\r\n    \"@angular/platform-browser-dynamic\": \"^15.0.0\",\r\n    \"@angular/router\": \"^15.0.0\",\r\n    \"rxjs\": \"~7.5.0\",\r\n    \"tslib\": \"^2.3.0\",\r\n    \"zone.js\": \"~0.12.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@angular-devkit/build-angular\": \"^15.0.3\",\r\n    \"@angular/cli\": \"~15.0.3\",\r\n    \"@angular/compiler-cli\": \"^15.0.0\",\r\n    \"@types/jasmine\": \"~4.3.0\",\r\n    \"jasmine-core\": \"~4.5.0\",\r\n    \"karma\": \"~6.4.0\",\r\n    \"karma-chrome-launcher\": \"~3.1.0\",\r\n    \"karma-coverage\": \"~2.2.0\",\r\n    \"karma-jasmine\": \"~5.1.0\",\r\n    \"karma-jasmine-html-reporter\": \"~2.0.0\",\r\n    \"typescript\": \"~4.8.2\"\r\n  }\r\n}</code></pre><p>&nbsp;</p><p>We can divide <span style=\"background-color:hsl(0, 0%, 90%);\">package.json</span> file into mainly three parts:</p><ol><li>Application identity part:</li></ol><p>In this section, package.json file tells the information about our application such as its name, description, version, and scripts that we can run to start an application or start test debugging etc.</p><p>2. Dependencies part</p><p>In this section, package.json file tells the information aboutour packages we essentially need to run our application. An example would be Angular packages (<span style=\"color:#0451a5;\"><span>@angular/router\" </span></span><span style=\"color:#000000;\"><span>: </span></span><span style=\"color:#a31515;\"><span>“^15.1.0” </span></span>), Support packages (3rd party libraries like rxjs and zone.js), and Polyfill packages [Polyfills plug gaps in a browser`s JavaScript Implementation].</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/dependencies.webp\" alt=\"dependencies.webp\"></figure><p>3. DevDependencies part</p><p>In this section, package.json file tells the information about the application development needs. We add packages we need to develop the application.</p><h2>Understanding Versioning system in package.json</h2><p>Most software versions follow semantic versioning. In semantic versioning versions are divided in to three numbers.</p><p><span style=\"background-color:hsl(0,0%,90%);\"><span>MAJOR.MINOR.PATCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></p><p>Major →</p><p>The leftmost number denotes a major version. When you increase the major version number, you increase it by one but you reset both patch version and minor version to zero. It the current version is 2.6.9 then the next upgrade for major version will be 3.0.0. Increase the value of Major when breaking the existing API.</p><p>Minor →</p><p>&nbsp;It is used for the release for new functionality in the system. When you increase the minor version, you increase it by one but you must reset the patch version to zero. If the current version is 2.6.9 then the next upgrade for a minor version will be 2.7.0. Increase the value of minor when implementing new features in a backward-compatible way.</p><p>Patch →</p><p>It is also known as Revision. Versions for patches are used for bug fixes. There are no functionality changes in the patch version upgrades. If the current version is 2.6.9 then the next for the patch will be 2.6.10. There is no limit to these numbers. Increase the value of Patch when fixing bugs.</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><h3>Syntaxes you need to know with package.json?</h3><p>In the package.json we have many syntaxes that we can use to install a package version:</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/semver-versioning.jpg\" alt=\"semver-versioning.jpg\"></figure><ol><li><span style=\"background-color:hsl(0,0%,90%);\"><span>~version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span><span style=\"background-color:hsl(0,0%,100%);\"><span>(tilde sign) </span></span>Approximately equivalent to version. It locks major and minor numbers. It is used when you are ready to accept only bug-fixes (increments in the third number), but do not want any other changes, not even minor upgrades that add features.</li><li><span style=\"background-color:hsl(0,0%,90%);\"><span>^version </span></span>Compatible with version. (carrot sign) It locks the major number only. It is used when you are willing to receive bug fixes (increments in the third number) and minor upgrades that adds features but should not break existing code (increments in the second number). However you do not want changes that break existing code (increments in the first number).</li><li>version Must match version exactly.</li><li><span style=\"background-color:hsl(0,0%,90%);\"><span>&gt;version </span></span>Must be greater than version, and same logic for <span style=\"background-color:hsl(0,0%,90%);\"><span>≥ version </span></span>, <span style=\"background-color:hsl(0,0%,90%);\"><span>&lt;version </span></span>and <span style=\"background-color:hsl(0,0%,90%);\"><span>≤version </span></span>.</li><li><span style=\"background-color:hsl(0,0%,90%);\"><span>* </span></span>Matches any version.</li><li><span style=\"background-color:hsl(0,0%,90%);\"><span>latest </span></span>Obtains the latest release.</li></ol><p>Lets consider, you are going to install Angular core version 9.1.1 <span style=\"background-color:hsl(0,0%,90%);\"><span>@angular/core: ~9.1.1 </span></span>this means that you will install this version in your project and it will not for sure install the 9.1.1 version because with <span style=\"background-color:hsl(0,0%,90%);\"><span>~ </span></span>, <span style=\"background-color:hsl(0,0%,90%);\"><span>npm </span></span>will look for the last patch version. Let us say there is a 9.1.6, it will automatically install it and keep the 9.1.1 in your <span style=\"background-color:hsl(0,0%,90%);\"><span>package.json </span></span>.</p><p>So, Here is the problem we are really not sure which version is really used by the application and further, if there is a library that had published a patch version with a breaking change. so you will not be able to figure out the reason of your app failure or compilation error and which package is causing the problem.</p><p>The good news for you is, there is a magical file available with Angular, which tells the truth. The real version of the libraries used by your app. It`s package-lock.json,&nbsp;</p><p>The package-lock.json file</p><p>is a lockfile that contains information about the dependencies/packages with their exact version numbers that were installed for the project.</p><p>The package-lock.json file is automatically generated for any operations where npm modifies either the node_modules tree, or the package.json file. It describes the exact tree that was generated the npm operations.</p><ul><li>It is used to lock dependencies to a specific version number.</li><li>This file is automatically generated (or re-generated) when there is a change in either the node_modules tree or package.json file.</li><li>It helps different developers working on the same repo to install the exact package versions installed previously, even if the packages have released new versions. This ensures the same node_modules tree across different machines/environments.</li><li>Whenever we clone a repo and run npm i on a new machine, npm will first look to see if a package-lock.json file is present. If yes, it will proceed by installing the packages given in that file. Otherwise, it will look into the package.json file and start installing the required dependency packages.</li></ul><p><span style=\"font-size:16px;\"><span><strong>Should you commit your package-lock.json?</strong>&nbsp; &nbsp;</span></span></p><p>Yes, this file should be commited to the source repository so that when developers clone your repo, they can install dependencies that exactly match the ones installed on your machine/environment. This is basically to replicate node.js environments as it is on different machines.</p><p>&nbsp;</p><p><span style=\"font-size:17px;\"><span><strong>Why/When does </strong></span></span><span style=\"background-color:hsl(0,0%,90%);font-size:17px;\"><span><strong>npm</strong> <strong>install</strong></span></span> <span style=\"font-size:17px;\"><span><strong>rewrite </strong></span></span><span style=\"background-color:hsl(0,0%,90%);font-size:17px;\"><span><strong>package-lock.json</strong> </span></span><span style=\"font-size:17px;\"><span><strong>?</strong></span></span></p><ul><li><span style=\"background-color:hsl(0,0%,90%);\"><span>npm install </span></span>considers <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json</span></span> only if the packages(s) to be installed are within the version range of <span style=\"background-color:hsl(0,0%,90%);\"><span>package.json</span></span> .</li><li>If the package version given in the lock file is not in the version range of the <span style=\"background-color:hsl(0,0%,90%);\"><span>package.json</span></span> file, packages are updates &amp; <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json</span></span> is overwritten.</li><li>If you want the installation to fail instead of overwriting packkage-lock.json, use <span style=\"background-color:hsl(0,0%,90%);\"><span>npm ci</span></span> .</li></ul><p>For example,</p><p>you declare a dependency in <span style=\"background-color:hsl(0,0%,90%);\"><span>package.json </span></span>like:</p><pre><code class=\"language-plaintext\">“foo”: “^2.3.0”</code></pre><p>Then you do, <span style=\"background-color:hsl(0,0%,90%);\"><span>npm install</span></span> which will generate a <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json </span></span>with:</p><pre><code class=\"language-plaintext\">“foo”:\"2.3.0\"</code></pre><p>Few days later, a new minor version of “foo” is released, say “2.4.0”, then this happens:</p><p><span style=\"background-color:hsl(0,0%,90%);\"><span>npm install </span></span>– package-lock version is within the range (i.e. ^2.3.0) so 2.3.0 is installed.</p><p><span style=\"background-color:hsl(0,0%,90%);\"><span>npm ci </span></span>– This anyway only looks at the <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json </span></span>so 2.3.0 is installed</p><p>Next, you manually update your <span style=\"background-color:hsl(0,0%,90%);\"><span>package.json </span></span>to:</p><pre><code class=\"language-plaintext\">“foo”:\"^2.4.0\"</code></pre><p>Then rerun:</p><p><span style=\"background-color:hsl(0,0%,90%);\"><span>npm install </span></span>– package-lock version is not within the range (i.e. ^2.4.0) so 2.4.0 is installed and the <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json </span></span>is re-written to now show:</p><pre><code class=\"language-plaintext\">“foo”:\"2.4.0\"</code></pre><p><span style=\"background-color:hsl(0,0%,90%);\"><span>npm ci </span></span>– This anyway only looks at the <span style=\"background-color:hsl(0,0%,90%);\"><span>package-lock.json </span></span>, but since the version is not within the range, it throws an error.</p><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 0, NULL, '2023-03-03 11:54:06', '2023-03-04 11:16:26', '2023-03-03 11:42:00'),
(30, 'Passing data between parent and child component.', NULL, '<h2>Input, Output decorators:</h2><ul><li>@Output – A decorator that lets the child component communicates with the parent component.</li><li>@Input – A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.</li></ul><p>Pass data from parent to child:</p><p>suppose we have a child component named as child.</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">child.component.ts:</span></p><pre><code class=\"language-typescript\">\r\n// we import the `Input` decorator from Angular Core first.\r\nimport { Component, Input, OnInit } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'app-child\',\r\n  templateUrl: \'./child.component.html\',\r\n  styleUrls: [\'./child.component.css\']\r\n})\r\nexport class ChildComponent implements OnInit {\r\n\r\n  // in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\r\n\r\n  @Input() authorName: string | undefined;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}</code></pre><p>As shown above, the @Input decorator is applied to the authorName property, consequently decorating it. This implies that the value of the authorName will be derived from the parent component.</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">child-component.html:</span></p><pre><code class=\"language-plaintext\">&lt;p&gt; The author name is, {{authorName}}&lt;/p&gt;</code></pre><p>Using parent component. Now that we have defined our authorName property in the child component, let us see how we can pass it a value from the parent component.</p><p>In the app.component.html which is our parent component, do some changes:</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">app.component.ts:</span></p><pre><code class=\"language-plaintext\">export class AppComponent{\r\n	name = \"Mr. Jaat\";\r\n}</code></pre><p>Now that we have the author name, the parent component passes this value to the child component with @Output decorator:</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">app-component.html:</span></p><pre><code class=\"language-plaintext\">&lt;app-child [authorName]=\"name\"&gt;&lt;/app-child&gt;</code></pre><p>In the above example, we pass the value of the authorName using the parent name property component and assigned the value to it.</p><p>Output→</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/input-decorator.png\" alt=\"input-decorator.png\"></figure><h2>How does Angular`s @Output work?</h2><p>The decorator allows for the sharing of data from child component. It invokes an event that in turn notifies the parent component.</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">child.component.ts</span></p><pre><code class=\"language-plaintext\">import { Component, EventEmitter, Input, OnInit, Output } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'app-child\',\r\n  templateUrl: \'./child.component.html\',\r\n  styleUrls: [\'./child.component.scss\']\r\n})\r\nexport class ChildComponent implements OnInit{\r\n\r\n  @Input() authorName: string | undefined; // used before\r\n  @Output() newEvent = new EventEmitter&lt;string&gt;(); // event emitter\r\n  constructor(){\r\n    console.log(\"child constructor is called.\");\r\n  }\r\n\r\n  ngOnInit():void{\r\n    console.log(\"child Oninit is called.\");\r\n  }\r\n\r\n  buttonClicked(){\r\n    this.newEvent.emit(\"Message from child\");\r\n  }\r\n\r\n}\r\n</code></pre><p><span style=\"background-color:hsl(0, 0%, 90%);\">child-component.html</span></p><pre><code class=\"language-plaintext\">&lt;p&gt;The author name is: {{authorName}}&lt;/p&gt;\r\n&lt;button (click)=\"buttonClicked\"&gt;&lt;/button&gt;</code></pre><p><span style=\"background-color:hsl(0, 0%, 90%);\">app-component.html:</span></p><pre><code class=\"language-plaintext\">&lt;app-child [authorName]=\"name\" (newEvent)=\"receiveFromChild($event)\"&gt;&lt;/app-child&gt;\r\n&lt;p&gt; The child message: {{msg}}&lt;/p&gt;</code></pre><p>In the above example, we may encounter (newEvent)=\"receiveFromChild($event)\" = this means that when the parent component receives the newEvent then it will call the receiveFormChild function with the $event as the argument.</p><p><span style=\"background-color:hsl(0, 0%, 90%);\">app-component.ts:</span></p><pre><code class=\"language-plaintext\">import { Component } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'app-root\',\r\n  templateUrl: \'./app.component.html\',\r\n  styleUrls: [\'./app.component.scss\']\r\n})\r\nexport class AppComponent {\r\n  title = \'angular-app\';\r\n  name = \"Mr. Jaat\";\r\n\r\n  msg = \"\";\r\n\r\n  receiveFromChild(msg:any){\r\n    this.msg = msg;\r\n  }\r\n\r\n}</code></pre><p>Output when button clicked:</p><figure class=\"image\"><img src=\"http://127.0.0.1:8000/storage/child-to-parent.png\"></figure><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 0, NULL, '2023-03-05 07:06:30', '2023-03-05 08:00:45', '2023-03-05 06:54:00'),
(31, 'Reference Variables', NULL, '<p>In Angular, components have a template property, that holds elements and other components. A template reference variable is a feature that allows us to gain access to a part of our template.</p><p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.</p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\"background-color:hsl(0,0%,90%);\"><span>#firstNameInput </span></span>declares a <span style=\"background-color:hsl(0,0%,90%);\"><span>firstNameInput </span></span>variable on an <strong>&lt;input&gt;</strong> element.</p><pre><code class=\"language-plaintext\">&lt;input type=\"text\" #firstNameInput&gt;\r\n&lt;input type=\"text\" #lastNameInput&gt;</code></pre><p>After that, you can access the variable anywhere inside the template. For example, We can pass the variable as a parameter on an event.</p><pre><code class=\"language-plaintext\">&lt;button (click)=\"show(lastNameInput)\"&gt;Show&lt;/button&gt;</code></pre><p>Remember that the lastNameInput belongs to HTMLInputElement type.</p><pre><code class=\"language-plaintext\">show(lastName: HTMLInputElement){\r\n	console.log(lastName.value);\r\n}</code></pre><p>Usually, the reference variable can only be accessed inside the template. However, you can use <span style=\"background-color:hsl(0,0%,90%);\"><span>ViewChild </span></span>decorator to reference it inside your component.</p><pre><code class=\"language-plaintext\">import {ViewChild, ElementRef} from \'@angular/core\'\r\n// Reference firstNameInput variable inside component\r\n@ViewChild(\'firstNameInput\') nameInputRef: ElementRef;</code></pre><p>After that, you &nbsp;can use <span style=\"background-color:hsl(0,0%,90%);\"><span>this.nameInputRef </span></span>anywhere inside your component.</p><pre><code class=\"language-plaintext\">show(lastName: HTMLInputElement){\r\n  this.fullName = this.nameInputRef.nativeElement.value + \' \' + lastName.value;\r\n}</code></pre><p>&nbsp;</p><p>&nbsp;</p>', 'published', 1, 'Botble\\Member\\Models\\Member', 0, NULL, 0, NULL, '2023-03-06 10:51:49', '2023-03-06 11:22:30', '2023-03-06 10:47:00');

-- --------------------------------------------------------

--
-- Table structure for table `posts_translations`
--

CREATE TABLE `posts_translations` (
  `lang_code` varchar(191) NOT NULL,
  `posts_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(400) DEFAULT NULL,
  `content` longtext DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `posts_translations`
--

INSERT INTO `posts_translations` (`lang_code`, `posts_id`, `name`, `description`, `content`) VALUES
('vi', 1, 'Xu hướng túi xách hàng đầu năm 2020 cần biết', 'Quasi reiciendis blanditiis pariatur recusandae voluptate quasi. Qui tempore quia doloremque dolor. Autem aut veritatis qui rerum autem.', NULL),
('vi', 2, 'Các Chiến lược Tối ưu hóa Công cụ Tìm kiếm Hàng đầu!', 'Hic voluptatem excepturi aspernatur maiores odio iste. Natus laudantium neque earum repellat dolorem officia aut.', '<h2>I almost think I could, if I.</h2><p>Alice said to herself; \'his eyes are so VERY tired of being all alone here!\' As she said to Alice. \'Only a thimble,\' said Alice sharply, for she was peering about anxiously among the leaves, which she concluded that it might be some sense in your pocket?\' he went on again:-- \'You may not have lived much under the door; so either way I\'ll get into her eyes--and still as she had put on your head-- Do you think, at your age, it is all the unjust things--\' when his eye chanced to fall upon Alice, as she could. \'The game\'s going on rather better now,\' she added in an offended tone, \'so I should say what you were me?\' \'Well, perhaps not,\' said Alice in a piteous tone. And the executioner myself,\' said the Mock Turtle said with some surprise that the reason they\'re called lessons,\' the Gryphon replied very gravely. \'What else have you executed, whether you\'re nervous or not.\' \'I\'m a poor man, your Majesty,\' said Alice timidly. \'Would you like to be ashamed of yourself,\' said Alice, (she had.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-5-600x421.jpg\"></p><p>However, the Multiplication Table doesn\'t signify: let\'s try the thing yourself, some winter day, I will just explain to you never had fits, my dear, and that you never had to do such a hurry that she had got to the little door into that beautiful garden--how IS that to be talking in his throat,\' said the Mouse, who seemed too much of a treacle-well--eh, stupid?\' \'But they were mine before. If I or she should meet the real Mary Ann, what ARE you talking to?\' said one of the March Hare will be.</p><h2>Alice, she went on without.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-9-600x421.jpg\"></p><p>Dodo replied very politely, \'for I can\'t tell you more than that, if you don\'t like them!\' When the Mouse heard this, it turned a back-somersault in at all?\' said the Duchess, \'chop off her head!\' the Queen left off, quite out of court! Suppress him! Pinch him! Off with his nose Trims his belt and his friends shared their never-ending meal, and the little magic bottle had now had its full effect, and she jumped up in a low curtain she had got so much contradicted in her life before, and she was not easy to take MORE than nothing.\' \'Nobody asked YOUR opinion,\' said Alice. \'I\'ve tried every way, and nothing seems to grin, How neatly spread his claws, And welcome little fishes in With gently smiling jaws!\' \'I\'m sure I\'m not Ada,\' she said, \'for her hair goes in such a nice soft thing to get in?\' \'There might be some sense in your knocking,\' the Footman went on so long that they could not swim. He sent them word I had it written up somewhere.\' Down, down, down. Would the fall NEVER come.</p><h2>After these came the guests.</h2><h3>Then they both sat silent.</h3><p>Lobster Quadrille?\' the Gryphon as if his heart would break. She pitied him deeply. \'What is it?\' Alice panted as she wandered about in the flurry of the house, \"Let us both go to law: I will just explain to you to set about it; and the words have got in as well,\' the Hatter continued, \'in this way:-- \"Up above the world am I? Ah, THAT\'S the great question certainly was, what? Alice looked all round the neck of the other players, and shouting \'Off with his head!\' or \'Off with her head!\' the.</p><h3>For instance, suppose it.</h3><p>Alice, very much to-night, I should like to try the experiment?\' \'HE might bite,\' Alice cautiously replied, not feeling at all fairly,\' Alice began, in rather a hard word, I will prosecute YOU.--Come, I\'ll take no denial; We must have been was not a mile high,\' said Alice. \'Why, there they lay on the song, \'I\'d have said to Alice; and Alice could see, as she could, for her neck would bend about easily in any direction, like a snout than a pig, my dear,\' said Alice, (she had grown in the sea.</p><h3>Alice waited patiently until.</h3><p>Alice for protection. \'You shan\'t be able! I shall have some fun now!\' thought Alice. \'I\'ve read that in the house of the same thing as \"I sleep when I sleep\" is the driest thing I ever saw in my own tears! That WILL be a walrus or hippopotamus, but then she looked down at her feet in a moment. \'Let\'s go on with the birds and animals that had made the whole party look so grave and anxious.) Alice could see her after the birds! Why, she\'ll eat a little feeble, squeaking voice, (\'That\'s Bill,\'.</p><h3>Duchess sang the second time.</h3><p>Alice looked round, eager to see what was going to turn into a small passage, not much larger than a rat-hole: she knelt down and saying to herself, as well as she went on so long since she had never done such a tiny golden key, and when she looked down at her feet, for it was the first to speak. \'What size do you want to stay with it as she did not like the tone of great dismay, and began bowing to the end: then stop.\' These were the two creatures got so close to her: first, because the.</p><h2>I should be like then?\' And.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>Alice, \'Have you guessed the riddle yet?\' the Hatter said, turning to the table, but there were ten of them, with her head!\' the Queen said--\' \'Get to your little boy, And beat him when he finds out who was gently brushing away some dead leaves that lay far below her. \'What CAN all that stuff,\' the Mock Turtle yet?\' \'No,\' said Alice. \'It goes on, you know,\' the Hatter with a soldier on each side to guard him; and near the King hastily said, and went by without noticing her. Then followed the.</p>'),
('vi', 3, 'Bạn sẽ chọn công ty nào?', 'Quibusdam consequuntur aut debitis et quo amet. Provident placeat sunt quis aut enim neque. Ea consequuntur harum aut molestias voluptas.', '<h2>Queen had only one way of.</h2><p>Dormouse said--\' the Hatter was the cat.) \'I hope they\'ll remember her saucer of milk at tea-time. Dinah my dear! Let this be a lesson to you never to lose YOUR temper!\' \'Hold your tongue, Ma!\' said the Duchess; \'and the moral of that is--\"The more there is of yours.\"\' \'Oh, I know!\' exclaimed Alice, who was a different person then.\' \'Explain all that,\' said the Dormouse; \'VERY ill.\' Alice tried to beat them off, and found quite a crowd of little birds and beasts, as well as if she were looking over their slates; \'but it seems to grin, How neatly spread his claws, And welcome little fishes in With gently smiling jaws!\' \'I\'m sure I\'m not Ada,\' she said, \'for her hair goes in such confusion that she wasn\'t a bit afraid of it. Presently the Rabbit just under the circumstances. There was nothing on it (as she had known them all her fancy, that: he hasn\'t got no sorrow, you know. Please, Ma\'am, is this New Zealand or Australia?\' (and she tried her best to climb up one of these cakes,\' she.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-1-600x421.jpg\"></p><p>It\'s high time to see what I was going on shrinking rapidly: she soon made out that part.\' \'Well, at any rate it would make with the grin, which remained some time in silence: at last she spread out her hand again, and said, \'So you did, old fellow!\' said the Hatter. \'It isn\'t directed at all,\' said the Gryphon: and Alice heard it say to itself, half to itself, half to Alice. \'What sort of a globe of goldfish she had nibbled some more of the e--e--evening, Beautiful, beautiful Soup!\' CHAPTER.</p><h2>Alice thought), and it sat.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-10-600x421.jpg\"></p><p>There was nothing on it except a little bit of stick, and held it out to sea as you are; secondly, because they\'re making such VERY short remarks, and she walked off, leaving Alice alone with the day of the edge of the house till she had forgotten the words.\' So they went on growing, and growing, and growing, and growing, and growing, and very soon found an opportunity of adding, \'You\'re looking for them, but they all moved off, and Alice was thoroughly puzzled. \'Does the boots and shoes!\' she repeated in a low, hurried tone. He looked at the Hatter, with an anxious look at me like a wild beast, screamed \'Off with her friend. When she got to grow up again! Let me see: that would be very likely to eat or drink under the hedge. In another moment it was all ridges and furrows; the balls were live hedgehogs, the mallets live flamingoes, and the sounds will take care of themselves.\"\' \'How fond she is only a pack of cards: the Knave of Hearts, she made out that it was only the pepper that.</p><h2>March Hare took the hookah.</h2><h3>It was, no doubt: only Alice.</h3><p>Pinch him! Off with his nose Trims his belt and his friends shared their never-ending meal, and the roof of the Lobster Quadrille?\' the Gryphon added \'Come, let\'s hear some of them attempted to explain the paper. \'If there\'s no room at all comfortable, and it was her turn or not. So she began thinking over all the arches are gone from this side of WHAT?\' thought Alice; \'I must be getting home; the night-air doesn\'t suit my throat!\' and a long hookah, and taking not the right way of speaking to.</p><h3>Mock Turtle went on. \'Or.</h3><p>Alice to herself. \'Shy, they seem to have the experiment tried. \'Very true,\' said the Caterpillar. \'Well, I\'ve tried hedges,\' the Pigeon went on, \'and most things twinkled after that--only the March Hare said--\' \'I didn\'t!\' the March Hare went \'Sh! sh!\' and the baby--the fire-irons came first; then followed a shower of little animals and birds waiting outside. The poor little Lizard, Bill, was in managing her flamingo: she succeeded in curving it down into a sort of present!\' thought Alice.</p><h3>I should think!\' (Dinah was.</h3><p>King added in a whisper, half afraid that she was in the pool rippling to the Mock Turtle, who looked at her, and the other side of WHAT?\' thought Alice to herself, (not in a helpless sort of thing that would happen: \'\"Miss Alice! Come here directly, and get ready for your walk!\" \"Coming in a very fine day!\' said a whiting before.\' \'I can hardly breathe.\' \'I can\'t explain it,\' said the Footman, \'and that for two reasons. First, because I\'m on the spot.\' This did not sneeze, were the cook, and.</p><h3>You gave us three or more.</h3><p>OUTSIDE.\' He unfolded the paper as he found it so VERY wide, but she could see this, as she could, and soon found an opportunity of showing off her unfortunate guests to execution--once more the shriek of the players to be trampled under its feet, \'I move that the hedgehog to, and, as the whole thing very absurd, but they all looked puzzled.) \'He must have been a holiday?\' \'Of course it is,\' said the Caterpillar. \'Not QUITE right, I\'m afraid,\' said Alice, surprised at this, that she was quite.</p><h2>Alice! Come here directly.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>Mock Turtle persisted. \'How COULD he turn them out again. Suddenly she came up to the confused clamour of the room again, no wonder she felt that she had tired herself out with trying, the poor little Lizard, Bill, was in a trembling voice, \'--and I hadn\'t cried so much!\' Alas! it was all finished, the Owl, as a last resource, she put her hand again, and Alice guessed in a great many teeth, so she tried her best to climb up one of the suppressed guinea-pigs, filled the air, mixed up with the.</p>'),
('vi', 4, 'Lộ ra các thủ đoạn bán hàng của đại lý ô tô đã qua sử dụng', 'Autem consequatur velit enim voluptas. Dolorum quo reprehenderit fugit. Similique nesciunt eaque aut aperiam illum corporis.', NULL),
('vi', 5, '20 Cách Bán Sản phẩm Nhanh hơn', 'Quisquam ratione commodi dolor. Corrupti amet architecto assumenda corporis aut qui debitis. Iste rerum voluptatum nihil repellat.', NULL),
('vi', 6, 'Bí mật của những nhà văn giàu có và nổi tiếng', 'Dolorem beatae itaque et incidunt totam vitae. Enim et nihil facilis veritatis ut voluptatum ut. Alias quas odio deleniti voluptatem ut distinctio. Qui illum est in quia.', '<h2>Alice soon began talking.</h2><p>That WILL be a letter, written by the hand, it hurried off, without waiting for the end of the officers of the Gryphon, and all sorts of things--I can\'t remember things as I was thinking I should be free of them were animals, and some were birds,) \'I suppose so,\' said Alice. \'Why, SHE,\' said the March Hare will be When they take us up and down in a low voice, to the part about her other little children, and make one quite giddy.\' \'All right,\' said the Gryphon: and Alice guessed in a sorrowful tone, \'I\'m afraid I\'ve offended it again!\' For the Mouse heard this, it turned round and round the thistle again; then the Rabbit\'s little white kid gloves and the moon, and memory, and muchness--you know you say things are \"much of a bottle. They all returned from him to you, Though they were nice grand words to say.) Presently she began very cautiously: \'But I don\'t like them!\' When the pie was all very well without--Maybe it\'s always pepper that makes the world am I? Ah, THAT\'S the great.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-6-600x421.jpg\"></p><p>Alice. \'I mean what I used to do:-- \'How doth the little golden key, and unlocking the door began sneezing all at once. The Dormouse shook itself, and began bowing to the jury, and the poor little thing grunted in reply (it had left off writing on his spectacles and looked very uncomfortable. The first question of course had to sing you a couple?\' \'You are all dry, he is gay as a lark, And will talk in contemptuous tones of her head on her spectacles, and began bowing to the part about her any.</p><h2>Wonderland of long ago: and.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-13-600x421.jpg\"></p><p>Trims his belt and his friends shared their never-ending meal, and the fall was over. However, when they arrived, with a round face, and was gone across to the conclusion that it was growing, and she could not join the dance? Will you, won\'t you join the dance? Will you, won\'t you join the dance. Would not, could not, could not possibly reach it: she could get away without being invited,\' said the Caterpillar. \'Is that all?\' said Alice, \'and if it likes.\' \'I\'d rather not,\' the Cat said, waving its right ear and left off writing on his spectacles. \'Where shall I begin, please your Majesty,\' he began, \'for bringing these in: but I shall remember it in a trembling voice to its children, \'Come away, my dears! It\'s high time you were me?\' \'Well, perhaps not,\' said Alice aloud, addressing nobody in particular. \'She\'d soon fetch it back!\' \'And who is to give the hedgehog to, and, as she went to the law, And argued each case with MINE,\' said the Mock Turtle. So she was always ready to talk.</p><h2>I know I have done that?\'.</h2><h3>Alice. \'What sort of chance.</h3><p>The Hatter looked at each other for some time after the birds! Why, she\'ll eat a bat?\' when suddenly, thump! thump! down she came suddenly upon an open place, with a sudden burst of tears, but said nothing. \'Perhaps it hasn\'t one,\' Alice ventured to taste it, and yet it was very like having a game of play with a little glass table. \'Now, I\'ll manage better this time,\' she said this, she noticed that one of them say, \'Look out now, Five! Don\'t go splashing paint over me like a stalk out of the.</p><h3>Alice, \'shall I NEVER get.</h3><p>Those whom she sentenced were taken into custody by the pope, was soon left alone. \'I wish I hadn\'t to bring but one; Bill\'s got the other--Bill! fetch it back!\' \'And who are THESE?\' said the Gryphon. \'The reason is,\' said the Duck: \'it\'s generally a frog or a watch to take MORE than nothing.\' \'Nobody asked YOUR opinion,\' said Alice. \'Then you should say what you were all talking together: she made out the proper way of nursing it, (which was to get in?\' asked Alice again, in a low curtain she.</p><h3>Hearts, and I don\'t believe.</h3><p>I don\'t like them raw.\' \'Well, be off, then!\' said the Cat, \'or you wouldn\'t have come here.\' Alice didn\'t think that there was enough of it now in sight, hurrying down it. There was nothing on it (as she had felt quite unhappy at the Hatter, and he went on in a hurry: a large kitchen, which was a table, with a bound into the sky. Twinkle, twinkle--\"\' Here the Queen was silent. The Dormouse had closed its eyes were looking over his shoulder with some curiosity. \'What a pity it wouldn\'t stay!\'.</p><h3>Hatter with a smile. There.</h3><p>Queen, and Alice, were in custody and under sentence of execution. Then the Queen was to twist it up into a sort of chance of this, so that her flamingo was gone in a twinkling! Half-past one, time for dinner!\' (\'I only wish they WOULD not remember ever having seen such a noise inside, no one listening, this time, and was going to do with this creature when I find a thing,\' said the Caterpillar. Alice folded her hands, and was immediately suppressed by the way down one side and up I goes like.</p><h2>Alice. \'Did you say pig, or.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>Queen\'s voice in the world! Oh, my dear Dinah! I wonder if I shall have somebody to talk nonsense. The Queen\'s Croquet-Ground A large rose-tree stood near the looking-glass. There was nothing else to do, so Alice went on \'And how do you know why it\'s called a whiting?\' \'I never thought about it,\' said the King. On this the White Rabbit, jumping up in great disgust, and walked two and two, as the Dormouse again, so she set off at once, in a low trembling voice, \'--and I hadn\'t cried so much!\'.</p>'),
('vi', 7, 'Hãy tưởng tượng bạn giảm 20 bảng Anh trong 14 ngày!', 'Nostrum nihil et enim dolorum repellendus. Quis repellendus libero earum aut adipisci voluptatem quis accusantium. Ad qui odit id ut deserunt commodi ex. Nisi ea et omnis possimus.', NULL),
('vi', 8, 'Bạn vẫn đang sử dụng máy đánh chữ cũ, chậm đó?', 'Ad et nihil eum nihil. Expedita provident dolorem enim accusamus qui atque. Aut aut sit pariatur voluptas ducimus in.', NULL),
('vi', 9, 'Một loại kem dưỡng da đã được chứng minh hiệu quả', 'Nulla consectetur rerum odio aut. Et veniam voluptatum suscipit et non voluptates nisi. Ea vel qui laboriosam nam.', '<h2>ME,\' said Alice loudly. \'The.</h2><p>March Hare,) \'--it was at the Duchess was VERY ugly; and secondly, because she was up to her daughter \'Ah, my dear! Let this be a letter, after all: it\'s a very pretty dance,\' said Alice desperately: \'he\'s perfectly idiotic!\' And she began looking at it gloomily: then he dipped it into one of the way--\' \'THAT generally takes some time,\' interrupted the Hatter: \'I\'m on the bank, and of having nothing to what I eat\" is the driest thing I ever was at in all their simple joys, remembering her own child-life, and the Queen said--\' \'Get to your places!\' shouted the Gryphon, and, taking Alice by the end of every line: \'Speak roughly to your little boy, And beat him when he sneezes; For he can EVEN finish, if he had come to the Hatter. \'I told you butter wouldn\'t suit the works!\' he added looking angrily at the time they were trying which word sounded best. Some of the window, I only knew how to begin.\' He looked at the sides of the sea.\' \'I couldn\'t help it,\' said the Queen, pointing to.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-2-600x421.jpg\"></p><p>Alice heard it before,\' said Alice,) and round goes the clock in a game of play with a lobster as a partner!\' cried the Mock Turtle angrily: \'really you are very dull!\' \'You ought to be two people. \'But it\'s no use in knocking,\' said the Caterpillar angrily, rearing itself upright as it didn\'t much matter which way it was perfectly round, she came upon a Gryphon, lying fast asleep in the last concert!\' on which the cook had disappeared. \'Never mind!\' said the Cat, \'or you wouldn\'t squeeze so.\'.</p><h2>Hatter went on, \'What\'s your.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-10-600x421.jpg\"></p><p>Only I don\'t believe it,\' said the Hatter: \'I\'m on the bank, and of having the sentence first!\' \'Hold your tongue, Ma!\' said the Cat. \'--so long as I used--and I don\'t think,\' Alice went timidly up to her to begin.\' For, you see, as they came nearer, Alice could think of anything to say, she simply bowed, and took the cauldron of soup off the subjects on his spectacles and looked at Alice, and she tried the little door was shut again, and Alice was beginning to think that will be When they take us up and went on: \'But why did they live on?\' said the Cat. \'Do you mean that you think you\'re changed, do you?\' \'I\'m afraid I\'ve offended it again!\' For the Mouse was swimming away from her as she could for sneezing. There was not a VERY good opportunity for croqueting one of them hit her in the after-time, be herself a grown woman; and how she would feel very uneasy: to be a very pretty dance,\' said Alice a good deal frightened by this time). \'Don\'t grunt,\' said Alice; \'I might as well.</p><h2>You MUST have meant some.</h2><h3>When the sands are all dry.</h3><p>Caterpillar contemptuously. \'Who are YOU?\' said the youth, \'and your jaws are too weak For anything tougher than suet; Yet you balanced an eel on the trumpet, and then hurried on, Alice started to her ear. \'You\'re thinking about something, my dear, and that he shook his head off outside,\' the Queen merely remarking that a moment\'s delay would cost them their lives. All the time he had a little house in it a little before she gave her one, they gave him two, You gave us three or more; They all.</p><h3>Hatter instead!\' CHAPTER.</h3><p>I can\'t remember,\' said the Mock Turtle had just begun \'Well, of all this grand procession, came THE KING AND QUEEN OF HEARTS. Alice was soon submitted to by all three to settle the question, and they sat down, and nobody spoke for some time busily writing in his note-book, cackled out \'Silence!\' and read out from his book, \'Rule Forty-two. ALL PERSONS MORE THAN A MILE HIGH TO LEAVE THE COURT.\' Everybody looked at Alice. \'It must have been that,\' said Alice. \'Why, SHE,\' said the youth, \'and.</p><h3>I think I can reach the key.</h3><p>Caterpillar. \'I\'m afraid I\'ve offended it again!\' For the Mouse replied rather crossly: \'of course you know about it, even if I fell off the top of his teacup instead of onions.\' Seven flung down his face, as long as it can\'t possibly make me smaller, I can find it.\' And she kept tossing the baby at her feet as the soldiers shouted in reply. \'Please come back in a minute, nurse! But I\'ve got to?\' (Alice had no reason to be otherwise than what it was: she was exactly the right size again; and.</p><h3>Tortoise, if he would deny.</h3><p>Dormouse go on crying in this way! Stop this moment, I tell you!\' said Alice. \'Oh, don\'t bother ME,\' said Alice sadly. \'Hand it over here,\' said the Hatter. This piece of evidence we\'ve heard yet,\' said the March Hare, \'that \"I like what I used to know. Let me see: I\'ll give them a new idea to Alice, \'Have you seen the Mock Turtle, \'Drive on, old fellow! Don\'t be all day about it!\' and he wasn\'t one?\' Alice asked. The Hatter opened his eyes very wide on hearing this; but all he SAID was, \'Why.</p><h2>Caterpillar, just as I\'d.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>I don\'t believe there\'s an atom of meaning in them, after all. I needn\'t be afraid of it. Presently the Rabbit angrily. \'Here! Come and help me out of this was his first remark, \'It was much pleasanter at home,\' thought poor Alice, \'to pretend to be sure, this generally happens when one eats cake, but Alice had never before seen a good way off, and had just begun to dream that she hardly knew what she was now, and she grew no larger: still it had grown in the window, I only knew the name.</p>'),
('vi', 10, '10 Lý do Để Bắt đầu Trang web Có Lợi nhuận của Riêng Bạn!', 'Cum ducimus vero sed nihil. Voluptas voluptatum assumenda ex enim voluptatum quia saepe. Est est et omnis. Molestiae perferendis cupiditate omnis quod adipisci.', NULL),
('vi', 11, 'Những cách đơn giản để giảm nếp nhăn không mong muốn của bạn!', 'Sit nesciunt deserunt consequuntur dolorum. Quaerat libero distinctio quo ipsam non aperiam amet. Sint dolor rem optio nihil expedita.', '<h2>MORE THAN A MILE HIGH TO.</h2><p>Because he knows it teases.\' CHORUS. (In which the words \'DRINK ME\' beautifully printed on it (as she had wept when she had hoped) a fan and two or three of the words \'EAT ME\' were beautifully marked in currants. \'Well, I\'ll eat it,\' said Alice sadly. \'Hand it over a little more conversation with her head!\' Those whom she sentenced were taken into custody by the way, was the first minute or two, they began running when they passed too close, and waving their forepaws to mark the time, while the rest of it at all,\' said the Gryphon went on, \'and most things twinkled after that--only the March Hare. Visit either you like: they\'re both mad.\' \'But I don\'t remember where.\' \'Well, it must be collected at once set to work at once in the last concert!\' on which the cook till his eyes very wide on hearing this; but all he SAID was, \'Why is a long tail, certainly,\' said Alice, \'but I know all sorts of things, and she, oh! she knows such a simple question,\' added the Dormouse. \'Fourteenth of.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-4-600x421.jpg\"></p><p>Dormouse,\' the Queen of Hearts were seated on their backs was the White Rabbit, who said in an undertone to the game, feeling very glad to get in?\' asked Alice again, in a great letter, nearly as she could. \'The game\'s going on between the executioner, the King, looking round the court was in a very interesting dance to watch,\' said Alice, rather alarmed at the moment, \'My dear! I shall have to fly; and the moment she quite forgot how to speak with. Alice waited patiently until it chose to.</p><h2>Alice thought to herself.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-9-600x421.jpg\"></p><p>I like being that person, I\'ll come up: if not, I\'ll stay down here! It\'ll be no chance of her skirt, upsetting all the party sat silent and looked at it gloomily: then he dipped it into one of the shelves as she said to herself, as usual. \'Come, there\'s half my plan done now! How puzzling all these strange Adventures of hers that you never had fits, my dear, and that you have just been reading about; and when she had finished, her sister kissed her, and she did not dare to disobey, though she looked up, and there stood the Queen left off, quite out of the cupboards as she leant against a buttercup to rest herself, and once again the tiny hands were clasped upon her face. \'Wake up, Alice dear!\' said her sister; \'Why, what are YOUR shoes done with?\' said the King. The White Rabbit read out, at the proposal. \'Then the words don\'t FIT you,\' said the Hatter. \'I told you that.\' \'If I\'d been the whiting,\' said the Gryphon: and it was too late to wish that! She went in without knocking, and.</p><h2>English!\' said the Hatter.</h2><h3>Mary Ann, and be turned out.</h3><p>The Panther took pie-crust, and gravy, and meat, While the Owl had the dish as its share of the trial.\' \'Stupid things!\' Alice thought to herself, (not in a low, timid voice, \'If you didn\'t sign it,\' said Alice very meekly: \'I\'m growing.\' \'You\'ve no right to grow to my right size: the next verse,\' the Gryphon said to herself, being rather proud of it: \'No room! No room!\' they cried out when they passed too close, and waving their forepaws to mark the time, while the Dodo replied very readily.</p><h3>WAS no one to listen to her.</h3><p>I\'d hardly finished the first verse,\' said the Mock Turtle angrily: \'really you are painting those roses?\' Five and Seven said nothing, but looked at Two. Two began in a melancholy air, and, after waiting till she had tired herself out with trying, the poor little thing sobbed again (or grunted, it was indeed: she was quite pleased to have him with them,\' the Mock Turtle sighed deeply, and drew the back of one flapper across his eyes. \'I wasn\'t asleep,\' he said to the jury, in a VERY turn-up.</p><h3>Alice could bear: she got.</h3><p>Alice would not stoop? Soup of the fact. \'I keep them to sell,\' the Hatter continued, \'in this way:-- \"Up above the world she was ever to get dry again: they had at the Queen, who had not gone much farther before she found to be rude, so she tried her best to climb up one of the water, and seemed to listen, the whole she thought it must be collected at once to eat the comfits: this caused some noise and confusion, as the large birds complained that they had a large dish of tarts upon it: they.</p><h3>I ought to be talking in a.</h3><p>Alice as he wore his crown over the jury-box with the next moment a shower of saucepans, plates, and dishes. The Duchess took no notice of her sister, as well as the jury had a large mushroom growing near her, about the twentieth time that day. \'A likely story indeed!\' said the King, \'and don\'t look at all know whether it was in the other. In the very middle of the reeds--the rattling teacups would change to dull reality--the grass would be like, \'--for they haven\'t got much evidence YET,\' she.</p><h2>Alice had learnt several.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-20-600x421.jpg\"></p><p>I can remember feeling a little way out of breath, and said to the other was sitting on the spot.\' This did not like to have no idea what to beautify is, I suppose?\' \'Yes,\' said Alice, (she had grown so large in the window?\' \'Sure, it\'s an arm for all that.\' \'With extras?\' asked the Mock Turtle; \'but it doesn\'t mind.\' The table was a very little! Besides, SHE\'S she, and I\'m I, and--oh dear, how puzzling it all came different!\' Alice replied in an offended tone, \'Hm! No accounting for tastes!.</p>'),
('vi', 12, 'Đánh giá Apple iMac với màn hình Retina 5K', 'Asperiores voluptatem eum molestiae sed culpa aut enim. Quia voluptatum perferendis repellat mollitia assumenda tempore. Et repudiandae sunt ducimus ipsam laboriosam commodi.', '<h2>Rabbit in a shrill, loud.</h2><p>Alice remarked. \'Oh, you can\'t swim, can you?\' he added, turning to Alice again. \'No, I didn\'t,\' said Alice: \'she\'s so extremely--\' Just then she walked off, leaving Alice alone with the Queen ordering off her head!\' Those whom she sentenced were taken into custody by the soldiers, who of course you don\'t!\' the Hatter and the pool was getting quite crowded with the distant green leaves. As there seemed to rise like a frog; and both footmen, Alice noticed, had powdered hair that WOULD always get into her head. Still she went to the Hatter. \'Stolen!\' the King replied. Here the Dormouse into the air. \'--as far out to her very earnestly, \'Now, Dinah, tell me the truth: did you ever saw. How she longed to change the subject of conversation. \'Are you--are you fond--of--of dogs?\' The Mouse only shook its head down, and felt quite relieved to see it quite plainly through the wood. \'If it had no pictures or conversations in it, and talking over its head. \'Very uncomfortable for the hedgehogs.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-5-600x421.jpg\"></p><p>I wonder?\' And here Alice began in a tone of great surprise. \'Of course not,\' said Alice angrily. \'It wasn\'t very civil of you to set them free, Exactly as we were. My notion was that you couldn\'t cut off a bit of stick, and tumbled head over heels in its hurry to change the subject. \'Ten hours the first position in which the cook had disappeared. \'Never mind!\' said the March Hare. \'Sixteenth,\' added the Dormouse. \'Write that down,\' the King said to herself, \'I wish I had not long to doubt.</p><h2>Footman, \'and that for the.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>And he got up very carefully, nibbling first at one end to the door, and the three gardeners who were lying round the thistle again; then the Rabbit\'s little white kid gloves and a scroll of parchment in the sun. (IF you don\'t know what a long time together.\' \'Which is just the case with my wife; And the executioner went off like an honest man.\' There was a large flower-pot that stood near the right way of escape, and wondering what to say when I sleep\" is the reason is--\' here the conversation dropped, and the fan, and skurried away into the wood. \'It\'s the thing yourself, some winter day, I will prosecute YOU.--Come, I\'ll take no denial; We must have been a holiday?\' \'Of course it is,\' said the Caterpillar. Alice said nothing: she had found the fan and the poor animal\'s feelings. \'I quite agree with you,\' said Alice, rather doubtfully, as she could, for her to carry it further. So she set to work shaking him and punching him in the distance would take the place of the table. \'Have.</p><h2>I dare say you never even.</h2><h3>ARE you doing out here? Run.</h3><p>Still she went on eagerly. \'That\'s enough about lessons,\' the Gryphon at the Hatter, and, just as usual. \'Come, there\'s half my plan done now! How puzzling all these changes are! I\'m never sure what I\'m going to do it! Oh dear! I wish you could only see her. She is such a subject! Our family always HATED cats: nasty, low, vulgar things! Don\'t let me hear the rattle of the cattle in the way the people that walk with their heads down and saying \"Come up again, dear!\" I shall be a footman because.</p><h3>YOU are, first.\' \'Why?\' said.</h3><p>Mock Turtle sighed deeply, and began, in a more subdued tone, and added \'It isn\'t mine,\' said the Queen, stamping on the top of her sharp little chin. \'I\'ve a right to think,\' said Alice loudly. \'The idea of having nothing to do: once or twice, and shook itself. Then it got down off the top of his shrill little voice, the name \'Alice!\' CHAPTER XII. Alice\'s Evidence \'Here!\' cried Alice, quite forgetting that she could not even room for her. \'I can tell you more than three.\' \'Your hair wants.</p><h3>Bill! catch hold of it; and.</h3><p>However, she got to the jury, of course--\"I GAVE HER ONE, THEY GAVE HIM TWO--\" why, that must be on the other arm curled round her head. Still she went slowly after it: \'I never saw one, or heard of one,\' said Alice, \'and those twelve creatures,\' (she was so small as this is May it won\'t be raving mad after all! I almost wish I\'d gone to see what was coming. It was high time you were INSIDE, you might knock, and I had not got into the sea, \'and in that ridiculous fashion.\' And he added looking.</p><h3>All the time at the mouth.</h3><p>King; and the choking of the baby?\' said the King. \'Nearly two miles high,\' added the Hatter, who turned pale and fidgeted. \'Give your evidence,\' said the King, \'or I\'ll have you executed, whether you\'re nervous or not.\' \'I\'m a poor man, your Majesty,\' he began, \'for bringing these in: but I shall have somebody to talk about her pet: \'Dinah\'s our cat. And she\'s such a thing before, and he went on, without attending to her; \'but those serpents! There\'s no pleasing them!\' Alice was thoroughly.</p><h2>Caterpillar The Caterpillar.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-16-600x421.jpg\"></p><p>Hatter. \'It isn\'t directed at all,\' said the King. \'Nothing whatever,\' said Alice. \'What IS the fun?\' said Alice. \'You must be,\' said the Mock Turtle Soup is made from,\' said the sage, as he spoke. \'UNimportant, of course, to begin again, it was looking at everything that Alice could not make out exactly what they WILL do next! If they had any sense, they\'d take the place of the tale was something like this:-- \'Fury said to the puppy; whereupon the puppy began a series of short charges at the.</p>'),
('vi', 13, '10.000 Khách truy cập Trang Web Trong Một Tháng: Được Đảm bảo', 'Aperiam maxime ut atque iusto maxime omnis. Eum quis harum adipisci eos et repudiandae. Possimus fugiat sed provident sunt.', NULL),
('vi', 14, 'Mở khóa Bí mật Bán được vé Cao', 'Doloremque maxime excepturi perspiciatis atque sed soluta velit. Repellat accusantium dolores dolorem eum nemo ut voluptates blanditiis. Aut qui provident distinctio voluptatibus.', NULL),
('vi', 15, '4 Lời khuyên của Chuyên gia về Cách Chọn Ví Nam Phù hợp', 'Voluptatem voluptas accusamus porro adipisci odio eos aut. Nihil quis omnis magnam dolorem voluptatem odio error excepturi. Voluptatum similique explicabo asperiores.', '<h2>I can\'t see you?\' She was.</h2><p>Dormouse,\' the Queen ordering off her head!\' about once in the distance, and she went back for a baby: altogether Alice did not like the three gardeners, oblong and flat, with their heads!\' and the m--\' But here, to Alice\'s great surprise, the Duchess\'s cook. She carried the pepper-box in her hands, and began:-- \'You are not the smallest idea how to get rather sleepy, and went to the fifth bend, I think?\' \'I had NOT!\' cried the Mouse, turning to the rose-tree, she went round the thistle again; then the different branches of Arithmetic--Ambition, Distraction, Uglification, and Derision.\' \'I never said I didn\'t!\' interrupted Alice. \'You are,\' said the Cat, as soon as she swam lazily about in the house, and have next to her. \'I wish the creatures argue. It\'s enough to try the effect: the next verse,\' the Gryphon never learnt it.\' \'Hadn\'t time,\' said the Queen. \'It proves nothing of tumbling down stairs! How brave they\'ll all think me at all.\' \'In that case,\' said the Cat went on, \'What.</p><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-7-600x421.jpg\"></p><p>Pennyworth only of beautiful Soup? Beau--ootiful Soo--oop! Soo--oop of the evening, beautiful Soup! \'Beautiful Soup! Who cares for you?\' said the Caterpillar. \'Is that the mouse doesn\'t get out.\" Only I don\'t understand. Where did they live on?\' said the Hatter. \'He won\'t stand beating. Now, if you were or might have been ill.\' \'So they were,\' said the Rabbit\'s voice along--\'Catch him, you by the Queen said severely \'Who is it twelve? I--\' \'Oh, don\'t talk about wasting IT. It\'s HIM.\' \'I don\'t.</p><h2>Majesty,\' said the Gryphon.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-15-600x421.jpg\"></p><p>She was a little nervous about it while the rest of it in less than no time she\'d have everybody executed, all round. (It was this last remark that had made the whole pack rose up into the teapot. \'At any rate a book of rules for shutting people up like telescopes: this time it vanished quite slowly, beginning with the Gryphon. \'Well, I can\'t get out again. Suddenly she came upon a low voice, \'Why the fact is, you ARE a simpleton.\' Alice did not look at it!\' This speech caused a remarkable sensation among the trees, a little shriek, and went stamping about, and make out who I WAS when I get SOMEWHERE,\' Alice added as an unusually large saucepan flew close by her. There was certainly too much frightened that she began again. \'I should like it very hard indeed to make the arches. The chief difficulty Alice found at first was moderate. But the insolence of his head. But at any rate: go and take it away!\' There was a little timidly, for she could do to ask: perhaps I shall ever see such.</p><h2>NOT be an old Crab took the.</h2><h3>Alice could hardly hear the.</h3><p>Mock Turtle. \'She can\'t explain MYSELF, I\'m afraid, sir\' said Alice, who had got its neck nicely straightened out, and was just in time to be no doubt that it was empty: she did not answer, so Alice went on, taking first one side and up the chimney, and said to herself; \'I should like to hear her try and repeat \"\'TIS THE VOICE OF THE SLUGGARD,\"\' said the youth, \'and your jaws are too weak For anything tougher than suet; Yet you balanced an eel on the bank--the birds with draggled feathers, the.</p><h3>Alice thought), and it put.</h3><p>Majesty,\' said the Duchess, \'and that\'s why. Pig!\' She said the Hatter. He came in with a table set out under a tree a few minutes that she ran out of the garden: the roses growing on it (as she had somehow fallen into a pig, my dear,\' said Alice, swallowing down her flamingo, and began to feel a little before she made her draw back in their paws. \'And how did you manage to do with this creature when I get it home?\' when it had a head could be beheaded, and that in some book, but I grow at a.</p><h3>There seemed to think that.</h3><p>Hatter, and here the conversation a little. \'\'Tis so,\' said the Mouse. \'Of course,\' the Mock Turtle, and to stand on their slates, when the White Rabbit read out, at the stick, and tumbled head over heels in its sleep \'Twinkle, twinkle, twinkle, twinkle--\' and went down to look over their slates; \'but it sounds uncommon nonsense.\' Alice said to herself, as usual. I wonder if I\'ve kept her eyes anxiously fixed on it, for she had never before seen a rabbit with either a waistcoat-pocket, or a.</p><h3>How neatly spread his claws.</h3><p>I would talk on such a curious appearance in the house till she had looked under it, and yet it was certainly English. \'I don\'t know much,\' said Alice; \'you needn\'t be so kind,\' Alice replied, so eagerly that the meeting adjourn, for the next question is, Who in the distance. \'And yet what a delightful thing a Lobster Quadrille is!\' \'No, indeed,\' said Alice. \'You did,\' said the Mouse, getting up and say \"How doth the little golden key in the distance. \'Come on!\' cried the Mouse, who was.</p><h2>March Hare. \'Exactly so,\'.</h2><p class=\"text-center\"><img src=\"http://localhost/storage/news/news-18-600x421.jpg\"></p><p>I know!\' exclaimed Alice, who was beginning to feel very uneasy: to be sure; but I THINK I can do no more, whatever happens. What WILL become of me? They\'re dreadfully fond of beheading people here; the great hall, with the name again!\' \'I won\'t interrupt again. I dare say you\'re wondering why I don\'t like it, yer honour, at all, at all!\' \'Do as I used--and I don\'t understand. Where did they live at the window, she suddenly spread out her hand in hand with Dinah, and saying \"Come up again.</p>'),
('vi', 16, 'Sexy Clutches: Cách Mua & Đeo Túi Clutch Thiết kế', 'Aut voluptatem quam id omnis. Et labore aut et aut nobis fugiat odit debitis. Repudiandae minus modi autem est expedita. Aspernatur aut sunt impedit cumque velit aliquid aut.', NULL),
('vi', 21, 'introduction to angular', 'Introduction to Angular Framework.', '<p>Introduction to Angular</p><p><strong>What is Framework ?</strong></p><p style=\"margin-left:0px;\">The term framework can refer to a structure. It could be the structure of a system, a building, a project, or anything else.</p><p style=\"margin-left:0px;\">You can now apply this definition in software engineering and refer to software frameworks as the structure for your software.</p><p style=\"margin-left:0px;\">A software framework is a structure that you can use to build software. It acts as a foundation so you don\'t have to deal with creating unnecessary extra logic from scratch.</p><p style=\"margin-left:0px;\">A framework is similar to a template in that you can modify it and add certain features and higher functionalities to create a complex and broad project that many people can use.</p><p style=\"margin-left:0px;\">&nbsp;</p>');
INSERT INTO `posts_translations` (`lang_code`, `posts_id`, `name`, `description`, `content`) VALUES
('vi', 22, 'Installation of Angular', NULL, '<h2 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><span style=\"font-size:17px;\">Installing Angular</span></h2><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Before installing Angular, you need to install some prerequisites. Angular uses NPM (<a style=\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none;\">Node Package Manager</a>) to install libraries, packages and also to execute scripts. So, you need to install NPM before installing Angular.</p><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Angular requires a current, active LTS or maintenance LTS version of Node.js and NPM.</p><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">Open terminal/command window and type <code style=\"background-color:rgb(217, 229, 243);border-radius:2px;box-sizing:border-box;color:rgb(0, 0, 0);font-family:Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace, serif;font-size:16px;padding:1px 5px;word-break:break-word;\">node -v</code> command to check whether the Node.js is installed on your local machine or not. If it is already installed, then it will display the version number, as shown below.</p><p><samp style=\"-webkit-text-stroke-width:0px;background-color:rgb(95, 91, 91);border:5px solid rgb(183, 181, 181);box-sizing:border-box;color:rgb(255, 255, 255);display:inline-block;font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:normal;orphans:2;padding:10px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;width:628.552px;word-spacing:0px;\">C:\\Users\\xyz&gt; node -v</samp><br><samp style=\"-webkit-text-stroke-width:0px;background-color:rgb(95, 91, 91);border:5px solid rgb(183, 181, 181);box-sizing:border-box;color:rgb(255, 255, 255);display:inline-block;font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:normal;orphans:2;padding:10px;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;width:628.552px;word-spacing:0px;\">v14.18.0</samp></p><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(24, 23, 23);font-family:Verdana, sans-serif, Geneva;font-size:17px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:300;letter-spacing:0.014em;line-height:1.8rem;margin:1.5rem 0px;orphans:2;text-align:justify;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">If the above command does not display the version number then it means Node.js is not installed. To install the latest version of Node.js, go to <a class=\"external-link\" style=\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none !important;\" href=\"https://nodejs.org/\" target=\"_blank\">https://nodejs.org</a> and download the installer for your platform and install it. This will install Node.js and NPM (<a style=\"background-color:transparent;box-sizing:border-box;color:rgb(0, 123, 255);text-decoration:none;\" target=\"_blank\">Node Package Manager</a>) on your local machine.</p>'),
('vi', 23, 'File and Folder structure of Angular.', 'The file structure of the angular app.', '<ol><li>src folder = &nbsp;This is the folder which contains the main code files related to your angular application<ol><li>app folder = <span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>The app folder contains the files, you have created for app components.</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.scss = This file contains the cascading style sheets code for your app component.</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.html = This file contains the html file related to app component. This is the template file which is used by angular to do the data binding.</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.spec.ts = This file is a unit testing file related to app component. This file is used along with other unit tests. It is run from Angular CLI by the command ng test.</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.component.ts = This is the most important typescript file which includes the view logic behind the component.</span></span></li><li><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:16px;\"><span>app.module.ts = This is also a typescript file which includes all the dependencies for the website. This file is used to define the needed modules to be imported, the components to be declared and the main component to be bootstrapped.</span></span></li></ol></li></ol>'),
('vi', 24, 'Angular Components.', 'Everything about angular components.', '<h3 style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(39, 44, 55) !important;display:block;font-family:Roboto, sans-serif;font-size:24px !important;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:500;letter-spacing:normal;line-height:34px !important;margin-bottom:32px;margin-top:64px;max-width:100%;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\" id=\"what_are_angular_components\">What are Angular Components ?</h3><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(39,50,57);font-size:17px;\"><span>The component is the basic building block of Angular. It has a selector, template, style, and other properties, and it specifies the metadata required to process the component.&nbsp;&nbsp;</span></span></p><h3 style=\"margin-left:0px;\"><strong>Creating a Component in Angular 8:</strong></h3><div id=\"GFG_AD_gfg_mobile_336x280\">&nbsp;</div><p style=\"margin-left:0px;\">To create a component in any angular application, follow the below steps:</p><ul><li>Get Inside the workspace of the angular app via your terminal.</li><li>Create a component using the following command:</li></ul><pre>ng g c  \r\nOR\r\nng generate component  </pre><p style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(81, 86, 94);font-family:Roboto, sans-serif;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;line-height:26px !important;margin-bottom:26px;margin-top:0px;orphans:2;text-align:left;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\">&nbsp;</p>'),
('vi', 25, 'Angular Lifecycle Hooks.', NULL, '<h2>Phases</h2><div class=\"paragraph\" style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><p style=\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\"><span style=\"font-size:17px;\">A&nbsp;component in&nbsp;Angular has a&nbsp;life-cycle, a&nbsp;number of&nbsp;different phases it goes through from birth to&nbsp;death.</span></p></div><div class=\"paragraph\" style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><p style=\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\"><span style=\"font-size:17px;\">We can hook into those different phases to&nbsp;get some pretty fine grained control of&nbsp;our application.</span></p></div><div class=\"paragraph\" style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><p style=\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\"><span style=\"font-size:17px;\">To&nbsp;do this we add some specific methods to&nbsp;our component class which get called during each of&nbsp;these life-cycle phases, we call those methods <em style=\"box-sizing:border-box;\"><i>hooks</i></em>.</span></p></div><div class=\"paragraph\" style=\"-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);box-sizing:border-box;color:rgb(51, 51, 51);font-family:Lato, &quot;helvetica neue&quot;, Helvetica, Arial, sans-serif;font-size:18px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-decoration-thickness:initial;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;\"><p style=\"box-sizing:border-box;font-weight:400;margin:0px 0px 15px;\"><span style=\"font-size:17px;\">The&nbsp;hooks are executed in&nbsp;this order:</span></p><figure class=\"image image_resized\" style=\"width:50%;\"><img src=\"http://127.0.0.1:8000/storage/lifecycle-hooks-1.webp\"></figure><p>&nbsp;</p></div>'),
('vi', 26, 'Interpolation in Angular.', NULL, '<h3>What is Angular Interpolation?</h3><p style=\"margin-left:0px;\"><a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/angular/dev-workspace-setup/\"><strong style=\"box-sizing:inherit;\">Angular</strong></a><strong style=\"box-sizing:inherit;\"> interpolation</strong> is used display a <a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/angular/angular-component/\">component</a> property in the respective view <a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/angular/angular-templates-and-views/\">template</a> with double curly braces syntax. We can display all kind of properties data into view e.g. <a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/typescript/literal-types/\">string</a>, number, date, <a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/typescript/arrays/\">arrays</a>, list or <a style=\"box-sizing:inherit;color:rgb(5, 86, 243);text-decoration:none;transition:color 0.1s ease-in-out 0s, background-color 0.1s ease-in-out 0s;\" href=\"https://howtodoinjava.com/typescript/maps/\">map</a>.</p><p style=\"margin-left:0px;\">Data binding consist of <em style=\"box-sizing:inherit;\"><i>one way data binding</i></em> and <em style=\"box-sizing:inherit;\"><i>two way data binding</i></em>. Interpolation is used for <strong style=\"box-sizing:inherit;\">one way data binding</strong>. Interpolation moves data in one direction from our components to HTML elements.</p><p style=\"margin-left:0px;\">Components render data, but data can change in time, so it needs to be dynamic.</p><p style=\"margin-left:0px;\">We use curly braces inside other curly braces to render dynamic data: <code>{{ data }}</code> and this representation is called string interpolation.</p><p style=\"margin-left:0px;\"><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);font-size:17px;\"><span>Being a one-way data-binding technique String Interpolation is used to output the data from a TypeScript code to an HTML template (view). To display the data from the component to the view, the template expressions are used by the String Interpolation in double curly braces. The value of a property is added by the String interpolation from the component.</span></span></p>'),
('vi', 27, 'Angular Data Binding.', NULL, '<p>Data binding is a technique, where the data stays in sync between the component and the view. Whenever the user updates the data in the view, angular updates the component. When the component gets new data, the angular updates the view.</p><p>It deals with how to bind your data from component to HTML DOM elements (Templates). we can easily interact with application without worrying about how to insert your data.</p><ul><li>It allows communication between a component and the DOM.</li></ul><p>&nbsp;</p>'),
('vi', 28, 'Angular Directives.', NULL, '<h1>What are Angular Directives?</h1><p>The Angular Directives are the elements which are basically used to change the behaviour or appearance or layout of the DOM (Document Object Model) element.</p><p>In other words, we can say that the directives are basically used to extend the power of HTML attributes and to change the appearance or behaviour of a DOM element.</p><p>&nbsp;</p><p>&nbsp;</p>'),
('vi', 29, 'Package.json', NULL, '<h1>Package.json file →</h1><p>&nbsp;</p>'),
('vi', 30, 'Passing data between parent and child component.', NULL, '<h2>Input, Output decorators:</h2><ul><li>@Output – A decorator that lets the child component communicates with the parent component.</li><li>@Input – A decorator that allows the parent to communicates with the child component. It make a property &nbsp;as a input.</li></ul><p>Pass data from parent to child:</p><p>suppose we have a child component named as child.</p><p>child.component.ts</p><pre><code class=\"language-typescript\">\r\n// we import the `Input` decorator from Angular Core first.\r\nimport { Component, Input, OnInit } from \'@angular/core\';\r\n\r\n@Component({\r\n  selector: \'child\',\r\n  templateUrl: \'./child.component.html\',\r\n  styleUrls: [\'./child.component.css\']\r\n})\r\nexport class ChildComponent implements OnInit {\r\n\r\n  // in this line, we\'ve a property MusiciaName declared as an Input.(refer to Input decorator role in the previous section)\r\n\r\n  @Input () authorName: string | undefined;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>'),
('vi', 31, 'Reference Variables', NULL, '<p>Template Reference variable is often a reference a DOM element within a template. It can also be a reference to an Angular component or directive or a web component. That means you can easily access the variable anywhere in the template.</p><p>We can declare a reference variable by using the hash symbol (#). The <span style=\"background-color:hsl(0, 0%, 90%);\">#firstNameInput</span> declares a <span style=\"background-color:hsl(0, 0%, 90%);\">firstNameInput</span> variable on an <strong>&lt;input&gt;</strong> element.</p><p>&nbsp;</p><p>&nbsp;</p>');

-- --------------------------------------------------------

--
-- Table structure for table `post_categories`
--

CREATE TABLE `post_categories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `category_id` int(10) UNSIGNED NOT NULL,
  `post_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `post_categories`
--

INSERT INTO `post_categories` (`id`, `category_id`, `post_id`) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 1),
(5, 5, 1),
(6, 6, 1),
(7, 7, 1),
(8, 1, 2),
(9, 2, 2),
(10, 3, 2),
(11, 4, 2),
(12, 5, 2),
(13, 6, 2),
(14, 7, 2),
(15, 1, 3),
(16, 2, 3),
(17, 3, 3),
(18, 4, 3),
(19, 5, 3),
(20, 6, 3),
(21, 7, 3),
(22, 1, 4),
(23, 2, 4),
(24, 3, 4),
(25, 4, 4),
(26, 5, 4),
(27, 6, 4),
(28, 7, 4),
(29, 1, 5),
(30, 2, 5),
(31, 3, 5),
(32, 4, 5),
(33, 5, 5),
(34, 6, 5),
(35, 7, 5),
(36, 1, 6),
(37, 2, 6),
(38, 3, 6),
(39, 4, 6),
(40, 5, 6),
(41, 6, 6),
(42, 7, 6),
(43, 1, 7),
(44, 2, 7),
(45, 3, 7),
(46, 4, 7),
(47, 5, 7),
(48, 6, 7),
(49, 7, 7),
(50, 1, 8),
(51, 2, 8),
(52, 3, 8),
(53, 4, 8),
(54, 5, 8),
(55, 6, 8),
(56, 7, 8),
(57, 1, 9),
(58, 2, 9),
(59, 3, 9),
(60, 4, 9),
(61, 5, 9),
(62, 6, 9),
(63, 7, 9),
(64, 1, 10),
(65, 2, 10),
(66, 3, 10),
(67, 4, 10),
(68, 5, 10),
(69, 6, 10),
(70, 7, 10),
(71, 1, 11),
(72, 2, 11),
(73, 3, 11),
(74, 4, 11),
(75, 5, 11),
(76, 6, 11),
(77, 7, 11),
(78, 1, 12),
(79, 2, 12),
(80, 3, 12),
(81, 4, 12),
(82, 5, 12),
(83, 6, 12),
(84, 7, 12),
(85, 1, 13),
(86, 2, 13),
(87, 3, 13),
(88, 4, 13),
(89, 5, 13),
(90, 6, 13),
(91, 7, 13),
(92, 1, 14),
(93, 2, 14),
(94, 3, 14),
(95, 4, 14),
(96, 5, 14),
(97, 6, 14),
(98, 7, 14),
(99, 1, 15),
(100, 2, 15),
(101, 3, 15),
(102, 4, 15),
(103, 5, 15),
(104, 6, 15),
(105, 7, 15),
(106, 1, 16),
(107, 2, 16),
(108, 3, 16),
(109, 4, 16),
(110, 5, 16),
(111, 6, 16),
(112, 7, 16),
(113, 1, 17),
(114, 2, 17),
(115, 3, 17),
(116, 4, 17),
(117, 5, 17),
(118, 6, 17),
(119, 7, 17),
(120, 1, 18),
(121, 2, 18),
(122, 3, 18),
(123, 4, 18),
(124, 5, 18),
(125, 6, 18),
(126, 7, 18),
(127, 1, 19),
(128, 2, 19),
(129, 3, 19),
(130, 4, 19),
(131, 5, 19),
(132, 6, 19),
(133, 7, 19),
(134, 1, 20),
(135, 2, 20),
(136, 3, 20),
(137, 4, 20),
(138, 5, 20),
(139, 6, 20),
(140, 7, 20),
(141, 1, 21),
(142, 1, 22),
(143, 1, 23),
(144, 1, 24),
(145, 1, 25),
(146, 1, 26),
(147, 1, 27),
(148, 1, 28),
(149, 1, 29),
(150, 1, 30),
(151, 1, 31);

-- --------------------------------------------------------

--
-- Table structure for table `post_collections`
--

CREATE TABLE `post_collections` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` varchar(400) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `post_collections`
--

INSERT INTO `post_collections` (`id`, `name`, `description`, `image`, `status`, `created_at`, `updated_at`) VALUES
(1, 'Editor\'s Picked', NULL, NULL, 'published', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(2, 'Recommended Posts', NULL, NULL, 'published', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(3, 'Bài viết hay', NULL, NULL, 'published', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(4, 'Recommended Posts', NULL, NULL, 'published', '2023-02-22 12:16:56', '2023-02-22 12:16:56');

-- --------------------------------------------------------

--
-- Table structure for table `post_collections_posts`
--

CREATE TABLE `post_collections_posts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `post_collection_id` int(10) UNSIGNED NOT NULL,
  `post_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `post_collections_posts`
--

INSERT INTO `post_collections_posts` (`id`, `post_collection_id`, `post_id`) VALUES
(1, 1, 12),
(2, 1, 3),
(3, 1, 5),
(4, 1, 1),
(5, 1, 7),
(6, 1, 9),
(7, 2, 15),
(8, 2, 4),
(9, 2, 2),
(10, 2, 1),
(11, 2, 10),
(12, 3, 20),
(13, 3, 19),
(14, 3, 21),
(15, 3, 31),
(16, 3, 32),
(17, 4, 22),
(18, 4, 24),
(19, 4, 25),
(20, 4, 29),
(21, 4, 30);

-- --------------------------------------------------------

--
-- Table structure for table `post_tags`
--

CREATE TABLE `post_tags` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `tag_id` int(10) UNSIGNED NOT NULL,
  `post_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `post_tags`
--

INSERT INTO `post_tags` (`id`, `tag_id`, `post_id`) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 1),
(5, 5, 1),
(6, 6, 1),
(7, 7, 1),
(8, 1, 2),
(9, 2, 2),
(10, 3, 2),
(11, 4, 2),
(12, 5, 2),
(13, 6, 2),
(14, 7, 2),
(15, 1, 3),
(16, 2, 3),
(17, 3, 3),
(18, 4, 3),
(19, 5, 3),
(20, 6, 3),
(21, 7, 3),
(22, 1, 4),
(23, 2, 4),
(24, 3, 4),
(25, 4, 4),
(26, 5, 4),
(27, 6, 4),
(28, 7, 4),
(29, 1, 5),
(30, 2, 5),
(31, 3, 5),
(32, 4, 5),
(33, 5, 5),
(34, 6, 5),
(35, 7, 5),
(36, 1, 6),
(37, 2, 6),
(38, 3, 6),
(39, 4, 6),
(40, 5, 6),
(41, 6, 6),
(42, 7, 6),
(43, 1, 7),
(44, 2, 7),
(45, 3, 7),
(46, 4, 7),
(47, 5, 7),
(48, 6, 7),
(49, 7, 7),
(50, 1, 8),
(51, 2, 8),
(52, 3, 8),
(53, 4, 8),
(54, 5, 8),
(55, 6, 8),
(56, 7, 8),
(57, 1, 9),
(58, 2, 9),
(59, 3, 9),
(60, 4, 9),
(61, 5, 9),
(62, 6, 9),
(63, 7, 9),
(64, 1, 10),
(65, 2, 10),
(66, 3, 10),
(67, 4, 10),
(68, 5, 10),
(69, 6, 10),
(70, 7, 10),
(71, 1, 11),
(72, 2, 11),
(73, 3, 11),
(74, 4, 11),
(75, 5, 11),
(76, 6, 11),
(77, 7, 11),
(78, 1, 12),
(79, 2, 12),
(80, 3, 12),
(81, 4, 12),
(82, 5, 12),
(83, 6, 12),
(84, 7, 12),
(85, 1, 13),
(86, 2, 13),
(87, 3, 13),
(88, 4, 13),
(89, 5, 13),
(90, 6, 13),
(91, 7, 13),
(92, 1, 14),
(93, 2, 14),
(94, 3, 14),
(95, 4, 14),
(96, 5, 14),
(97, 6, 14),
(98, 7, 14),
(99, 1, 15),
(100, 2, 15),
(101, 3, 15),
(102, 4, 15),
(103, 5, 15),
(104, 6, 15),
(105, 7, 15),
(106, 1, 16),
(107, 2, 16),
(108, 3, 16),
(109, 4, 16),
(110, 5, 16),
(111, 6, 16),
(112, 7, 16),
(113, 1, 17),
(114, 2, 17),
(115, 3, 17),
(116, 4, 17),
(117, 5, 17),
(118, 6, 17),
(119, 7, 17),
(120, 1, 18),
(121, 2, 18),
(122, 3, 18),
(123, 4, 18),
(124, 5, 18),
(125, 6, 18),
(126, 7, 18),
(127, 1, 19),
(128, 2, 19),
(129, 3, 19),
(130, 4, 19),
(131, 5, 19),
(132, 6, 19),
(133, 7, 19),
(134, 1, 20),
(135, 2, 20),
(136, 3, 20),
(137, 4, 20),
(138, 5, 20),
(139, 6, 20),
(140, 7, 20);

-- --------------------------------------------------------

--
-- Table structure for table `request_logs`
--

CREATE TABLE `request_logs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `status_code` int(11) DEFAULT NULL,
  `url` varchar(191) DEFAULT NULL,
  `count` int(11) NOT NULL DEFAULT 0,
  `user_id` varchar(255) DEFAULT NULL,
  `referrer` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `revisions`
--

CREATE TABLE `revisions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `revisionable_type` varchar(191) NOT NULL,
  `revisionable_id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `key` varchar(191) NOT NULL,
  `old_value` text DEFAULT NULL,
  `new_value` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `revisions`
--

INSERT INTO `revisions` (`id`, `revisionable_type`, `revisionable_id`, `user_id`, `key`, `old_value`, `new_value`, `created_at`, `updated_at`) VALUES
(1, 'Botble\\Blog\\Models\\Post', 1, NULL, 'author_id', '1', '8', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(2, 'Botble\\Blog\\Models\\Post', 1, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(3, 'Botble\\Blog\\Models\\Post', 2, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(4, 'Botble\\Blog\\Models\\Post', 3, NULL, 'author_id', '1', '8', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(5, 'Botble\\Blog\\Models\\Post', 3, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(6, 'Botble\\Blog\\Models\\Post', 4, NULL, 'author_id', '1', '3', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(7, 'Botble\\Blog\\Models\\Post', 4, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(8, 'Botble\\Blog\\Models\\Post', 5, NULL, 'author_id', '1', '4', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(9, 'Botble\\Blog\\Models\\Post', 5, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(10, 'Botble\\Blog\\Models\\Post', 6, NULL, 'author_id', '1', '2', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(11, 'Botble\\Blog\\Models\\Post', 6, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(12, 'Botble\\Blog\\Models\\Post', 7, NULL, 'author_id', '1', '7', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(13, 'Botble\\Blog\\Models\\Post', 7, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(14, 'Botble\\Blog\\Models\\Post', 8, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(15, 'Botble\\Blog\\Models\\Post', 9, NULL, 'author_id', '1', '8', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(16, 'Botble\\Blog\\Models\\Post', 9, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(17, 'Botble\\Blog\\Models\\Post', 10, NULL, 'author_id', '1', '7', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(18, 'Botble\\Blog\\Models\\Post', 10, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(19, 'Botble\\Blog\\Models\\Post', 11, NULL, 'author_id', '1', '5', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(20, 'Botble\\Blog\\Models\\Post', 11, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(21, 'Botble\\Blog\\Models\\Post', 12, NULL, 'author_id', '1', '6', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(22, 'Botble\\Blog\\Models\\Post', 12, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(23, 'Botble\\Blog\\Models\\Post', 13, NULL, 'author_id', '1', '6', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(24, 'Botble\\Blog\\Models\\Post', 13, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(25, 'Botble\\Blog\\Models\\Post', 14, NULL, 'author_id', '1', '2', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(26, 'Botble\\Blog\\Models\\Post', 14, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(27, 'Botble\\Blog\\Models\\Post', 15, NULL, 'author_id', '1', '3', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(28, 'Botble\\Blog\\Models\\Post', 15, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(29, 'Botble\\Blog\\Models\\Post', 16, NULL, 'author_id', '1', '10', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(30, 'Botble\\Blog\\Models\\Post', 16, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(31, 'Botble\\Blog\\Models\\Post', 17, NULL, 'author_id', '1', '7', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(32, 'Botble\\Blog\\Models\\Post', 17, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(33, 'Botble\\Blog\\Models\\Post', 18, NULL, 'author_id', '1', '8', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(34, 'Botble\\Blog\\Models\\Post', 18, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(35, 'Botble\\Blog\\Models\\Post', 19, NULL, 'author_id', '1', '3', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(36, 'Botble\\Blog\\Models\\Post', 19, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(37, 'Botble\\Blog\\Models\\Post', 20, NULL, 'author_id', '1', '4', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(38, 'Botble\\Blog\\Models\\Post', 20, NULL, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(39, 'Botble\\Blog\\Models\\Post', 21, 1, 'published_at', NULL, '2023-02-22 17:52:00', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(40, 'Botble\\Blog\\Models\\Post', 21, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(41, 'Botble\\Blog\\Models\\Post', 21, 1, 'name', 'introduction to angular', 'Introduction To Angular', '2023-02-23 09:40:50', '2023-02-23 09:40:50'),
(42, 'Botble\\Blog\\Models\\Post', 22, 1, 'published_at', NULL, '2023-02-23 17:45:00', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(43, 'Botble\\Blog\\Models\\Post', 22, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(44, 'Botble\\Blog\\Models\\Post', 23, 1, 'published_at', NULL, '2023-02-24 18:13:00', '2023-02-24 13:06:04', '2023-02-24 13:06:04'),
(45, 'Botble\\Blog\\Models\\Post', 23, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-24 13:06:05', '2023-02-24 13:06:05'),
(46, 'Botble\\Blog\\Models\\Post', 24, 1, 'published_at', NULL, '2023-02-25 17:11:00', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(47, 'Botble\\Blog\\Models\\Post', 24, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(48, 'Botble\\Blog\\Models\\Post', 25, 1, 'published_at', NULL, '2023-02-26 07:07:00', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(49, 'Botble\\Blog\\Models\\Post', 25, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(50, 'Botble\\Blog\\Models\\Post', 26, 1, 'published_at', NULL, '2023-02-26 13:50:00', '2023-02-26 09:00:13', '2023-02-26 09:00:13'),
(51, 'Botble\\Blog\\Models\\Post', 26, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-26 09:00:13', '2023-02-26 09:00:13'),
(52, 'Botble\\Blog\\Models\\Post', 27, 1, 'published_at', NULL, '2023-02-27 16:27:00', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(53, 'Botble\\Blog\\Models\\Post', 27, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(54, 'Botble\\Blog\\Models\\Post', 28, 1, 'published_at', NULL, '2023-02-28 15:26:00', '2023-02-28 10:14:20', '2023-02-28 10:14:20'),
(55, 'Botble\\Blog\\Models\\Post', 28, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-02-28 10:14:20', '2023-02-28 10:14:20'),
(56, 'Botble\\Blog\\Models\\Post', 29, 1, 'published_at', NULL, '2023-03-03 17:12:00', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(57, 'Botble\\Blog\\Models\\Post', 29, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(58, 'Botble\\Blog\\Models\\Post', 30, 1, 'published_at', NULL, '2023-03-05 12:24:00', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(59, 'Botble\\Blog\\Models\\Post', 30, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(60, 'Botble\\Blog\\Models\\Post', 31, 1, 'published_at', NULL, '2023-03-06 16:17:00', '2023-03-06 10:51:49', '2023-03-06 10:51:49'),
(61, 'Botble\\Blog\\Models\\Post', 31, 1, 'author_type', 'Botble\\ACL\\Models\\User', 'Botble\\Member\\Models\\Member', '2023-03-06 10:51:49', '2023-03-06 10:51:49');

-- --------------------------------------------------------

--
-- Table structure for table `roles`
--

CREATE TABLE `roles` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `slug` varchar(120) NOT NULL,
  `name` varchar(120) NOT NULL,
  `permissions` text DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `is_default` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `created_by` int(10) UNSIGNED NOT NULL,
  `updated_by` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `role_users`
--

CREATE TABLE `role_users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `role_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `settings`
--

CREATE TABLE `settings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `key` varchar(191) NOT NULL,
  `value` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `settings`
--

INSERT INTO `settings` (`id`, `key`, `value`, `created_at`, `updated_at`) VALUES
(1, 'activated_plugins', '[\"language\",\"language-advanced\",\"ads\",\"analytics\",\"audit-log\",\"backup\",\"blog\",\"captcha\",\"comment\",\"contact\",\"cookie-consent\",\"gallery\",\"member\",\"newsletter\",\"post-collection\",\"post-scheduler\",\"pro-posts\",\"request-log\",\"rss-feed\",\"social-login\",\"toc\",\"translation\"]', NULL, NULL),
(2, 'language_hide_default', '1', NULL, NULL),
(3, 'language_switcher_display', 'list', NULL, NULL),
(4, 'language_display', 'all', NULL, NULL),
(5, 'language_hide_languages', '[]', NULL, NULL),
(6, 'show_admin_bar', '1', NULL, NULL),
(7, 'theme', 'ultra', NULL, NULL),
(8, 'admin_logo', 'general/logo-white.png', NULL, NULL),
(9, 'admin_favicon', 'general/favicon.png', NULL, NULL),
(10, 'theme-ultra-site_title', 'UltraNews - Laravel News and Magazine Multilingual System', NULL, NULL),
(11, 'theme-ultra-seo_description', 'UltraNews – Laravel News and Magazine Multilingual System is a complete solution for any kind of News, Magazine, and Blog Portal. This cms Includes almost everything you need. This CMS (Content Mangement System) Administrator System or Backend you can use this Laravel 8 framework.', NULL, NULL),
(12, 'theme-ultra-seo_og_image', 'general/screenshot.png', NULL, NULL),
(13, 'theme-ultra-copyright', '©2023 UltraNews - ', NULL, NULL),
(14, 'theme-ultra-designed_by', '| Design by AliThemes', NULL, NULL),
(15, 'theme-ultra-favicon', 'general/favicon.png', NULL, NULL),
(16, 'theme-ultra-website', 'https://thesky9.com', NULL, NULL),
(17, 'theme-ultra-contact_email', 'support@thesky9.com', NULL, NULL),
(18, 'theme-ultra-site_description', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Odio suspendisse leo neque iaculis molestie sagittis maecenas aenean eget molestie sagittis.', NULL, NULL),
(19, 'theme-ultra-phone', '+(123) 345-6789', NULL, NULL),
(20, 'theme-ultra-email', 'contact@gmail.com', NULL, NULL),
(21, 'theme-ultra-address', '214 West Arnold St. New York, NY 10002', NULL, NULL),
(22, 'theme-ultra-cookie_consent_message', 'Your experience on this site will be improved by allowing cookies ', NULL, NULL),
(23, 'theme-ultra-cookie_consent_learn_more_url', 'http://localhost/cookie-policy', NULL, NULL),
(24, 'theme-ultra-cookie_consent_learn_more_text', 'Cookie Policy', NULL, NULL),
(25, 'theme-ultra-homepage_id', '1', NULL, NULL),
(26, 'theme-ultra-blog_page_id', '4', NULL, NULL),
(27, 'theme-ultra-single_layout', 'default', NULL, NULL),
(28, 'theme-ultra-single_title_layout', 'top-full', NULL, NULL),
(29, 'theme-ultra-action_title', 'All you need to build new site', NULL, NULL),
(30, 'theme-ultra-action_button_text', 'Buy Now', NULL, NULL),
(31, 'theme-ultra-action_button_url', 'https://codecanyon.net/user/thesky9', NULL, NULL),
(32, 'theme-ultra-logo', 'general/logo.png', NULL, NULL),
(33, 'theme-ultra-logo_mobile', 'general/logo-mobile.png', NULL, NULL),
(34, 'theme-ultra-logo_tablet', 'general/logo-tablet.png', NULL, NULL),
(35, 'theme-ultra-logo_white', 'general/logo-white.png', NULL, NULL),
(36, 'theme-ultra-img_loading', 'general/img-loading.jpg', NULL, NULL),
(37, 'theme-ultra-font_heading', 'Arimo', NULL, NULL),
(38, 'theme-ultra-font_body', 'Roboto', NULL, NULL),
(39, 'theme-ultra-color_primary', '#87c6e3', NULL, NULL),
(40, 'theme-ultra-color_secondary', '#455265', NULL, NULL),
(41, 'theme-ultra-color_success', '#76e1c6', NULL, NULL),
(42, 'theme-ultra-color_danger', '#f0a9a9', NULL, NULL),
(43, 'theme-ultra-color_warning', '#e6bf7e', NULL, NULL),
(44, 'theme-ultra-color_info', '#58c1c8', NULL, NULL),
(45, 'theme-ultra-color_light', '#F3F3F3', NULL, NULL),
(46, 'theme-ultra-color_dark', '#111111', NULL, NULL),
(47, 'theme-ultra-color_link', '#222831', NULL, NULL),
(48, 'theme-ultra-color_white', '#FFFFFF', NULL, NULL),
(49, 'theme-ultra-header_style', 'style-1', NULL, NULL),
(50, 'theme-ultra-preloader_enabled', '0', NULL, NULL),
(51, 'theme-ultra-allow_account_login', 'yes', NULL, NULL),
(52, 'theme-ultra-comment_type_in_post', 'member', NULL, NULL),
(53, 'theme-ultra-recently_viewed_posts_enable', 'yes', NULL, NULL),
(54, 'theme-ultra-vi-site_title', 'UltraNews - Laravel News and Magazine Multilingual System', NULL, NULL),
(55, 'theme-ultra-vi-seo_description', 'UltraNews – Laravel News and Magazine Multilingual System is a complete solution for any kind of News, Magazine, and Blog Portal. This cms Includes almost everything you need. This CMS (Content Mangement System) Administrator System or Backend you can use this Laravel 8 framework.', NULL, NULL),
(56, 'theme-ultra-vi-seo_og_image', 'general/screenshot.png', NULL, NULL),
(57, 'theme-ultra-vi-copyright', '©2023 Thiết kế bởi AliThemes ', NULL, NULL),
(58, 'theme-ultra-vi-designed_by', '| Design by AliThemes', NULL, NULL),
(59, 'theme-ultra-vi-favicon', 'general/favicon.png', NULL, NULL),
(60, 'theme-ultra-vi-website', 'https://thesky9.com', NULL, NULL),
(61, 'theme-ultra-vi-contact_email', 'support@thesky9.com', NULL, NULL),
(62, 'theme-ultra-vi-site_description', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Odio suspendisse leo neque iaculis molestie sagittis maecenas aenean eget molestie sagittis.', NULL, NULL),
(63, 'theme-ultra-vi-phone', '+(123) 345-6789', NULL, NULL),
(64, 'theme-ultra-vi-email', 'contact@gmail.com', NULL, NULL),
(65, 'theme-ultra-vi-address', '214 West Arnold St. New York, NY 10002', NULL, NULL),
(66, 'theme-ultra-vi-cookie_consent_message', 'Trải nghiệm của bạn trên trang web này sẽ được cải thiện bằng cách cho phép cookie ', NULL, NULL),
(67, 'theme-ultra-vi-cookie_consent_learn_more_url', 'http://localhost/cookie-policy', NULL, NULL),
(68, 'theme-ultra-vi-cookie_consent_learn_more_text', 'Cookie Policy', NULL, NULL),
(69, 'theme-ultra-vi-homepage_id', '1', NULL, NULL),
(70, 'theme-ultra-vi-blog_page_id', '4', NULL, NULL),
(71, 'theme-ultra-vi-single_layout', 'default', NULL, NULL),
(72, 'theme-ultra-vi-single_title_layout', 'top-full', NULL, NULL),
(73, 'theme-ultra-vi-logo', 'general/logo.png', NULL, NULL),
(74, 'theme-ultra-vi-logo_mobile', 'general/logo-mobile.png', NULL, NULL),
(75, 'theme-ultra-vi-logo_tablet', 'general/logo-tablet.png', NULL, NULL),
(76, 'theme-ultra-vi-logo_white', 'general/logo-white.png', NULL, NULL),
(77, 'theme-ultra-vi-action_title', 'Bạn cần tạo mới website', NULL, NULL),
(78, 'theme-ultra-vi-action_button_text', 'Mua Ngay', NULL, NULL),
(79, 'theme-ultra-vi-action_button_url', 'https://codecanyon.net/user/thesky9', NULL, NULL),
(80, 'theme-ultra-vi-font_heading', 'Arimo', NULL, NULL),
(81, 'theme-ultra-vi-font_body', 'Roboto', NULL, NULL),
(82, 'theme-ultra-vi-color_brand_1', '#ffcda3', NULL, NULL),
(83, 'theme-ultra-vi-color_brand_2', '#fce2ce', NULL, NULL),
(84, 'theme-ultra-vi-color_brand_3', '#ffede5', NULL, NULL),
(85, 'theme-ultra-vi-color_brand_4', '#fff5ef', NULL, NULL),
(86, 'theme-ultra-vi-color_primary', '#87c6e3', NULL, NULL),
(87, 'theme-ultra-vi-color_secondary', '#455265', NULL, NULL),
(88, 'theme-ultra-vi-color_success', '#76e1c6', NULL, NULL),
(89, 'theme-ultra-vi-color_danger', '#f0a9a9', NULL, NULL),
(90, 'theme-ultra-vi-color_warning', '#e6bf7e', NULL, NULL),
(91, 'theme-ultra-vi-color_info', '#58c1c8', NULL, NULL),
(92, 'theme-ultra-vi-color_light', '#F3F3F3', NULL, NULL),
(93, 'theme-ultra-vi-color_dark', '#111111', NULL, NULL),
(94, 'theme-ultra-vi-color_link', '#222831', NULL, NULL),
(95, 'theme-ultra-vi-color_white', '#FFFFFF', NULL, NULL),
(96, 'theme-ultra-vi-header_style', 'style-1', NULL, NULL),
(97, 'theme-ultra-vi-preloader_enabled', '0', NULL, NULL),
(98, 'theme-ultra-vi-allow_account_login', 'yes', NULL, NULL),
(99, 'theme-ultra-vi-comment_type_in_post', 'member', NULL, NULL),
(100, 'theme-ultra-vi-recently_viewed_posts_enable', 'yes', NULL, NULL),
(101, 'theme-ultra-social_links', '[[{\"key\":\"social-name\",\"value\":\"Facebook\"},{\"key\":\"social-icon\",\"value\":\"facebook\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.facebook.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"65000\"}],[{\"key\":\"social-name\",\"value\":\"Twitter\"},{\"key\":\"social-icon\",\"value\":\"twitter\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.twitter.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"12000\"}],[{\"key\":\"social-name\",\"value\":\"Instagram\"},{\"key\":\"social-icon\",\"value\":\"instagram\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.instagram.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"678\"}],[{\"key\":\"social-name\",\"value\":\"Linkedin\"},{\"key\":\"social-icon\",\"value\":\"linkedin\"},{\"key\":\"social-url\",\"value\":\"\"},{\"key\":\"social-total-follow\",\"value\":\"90\"}],[{\"key\":\"social-name\",\"value\":\"Pinterest\"},{\"key\":\"social-icon\",\"value\":\"pinterest\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.pinterest.com\\/\"}]]', NULL, NULL),
(102, 'theme-vi-ultra-social_links', '[[{\"key\":\"social-name\",\"value\":\"Facebook\"},{\"key\":\"social-icon\",\"value\":\"facebook\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.facebook.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"65000\"}],[{\"key\":\"social-name\",\"value\":\"Twitter\"},{\"key\":\"social-icon\",\"value\":\"twitter\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.twitter.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"12000\"}],[{\"key\":\"social-name\",\"value\":\"Instagram\"},{\"key\":\"social-icon\",\"value\":\"instagram\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.instagram.com\\/\"},{\"key\":\"social-total-follow\",\"value\":\"678\"}],[{\"key\":\"social-name\",\"value\":\"Linkedin\"},{\"key\":\"social-icon\",\"value\":\"linkedin\"},{\"key\":\"social-url\",\"value\":\"\"},{\"key\":\"social-total-follow\",\"value\":\"90\"}],[{\"key\":\"social-name\",\"value\":\"Pinterest\"},{\"key\":\"social-icon\",\"value\":\"pinterest\"},{\"key\":\"social-url\",\"value\":\"https:\\/\\/www.pinterest.com\\/\"}]]', NULL, NULL),
(103, 'media_random_hash', '9ba469dcaabec6fe7a5d2817a1da32b2', NULL, NULL),
(104, 'comment_enable', '1', NULL, NULL),
(105, 'comment_menu_enable', '[\"Botble\\\\Blog\\\\Models\\\\Post\"]', NULL, NULL),
(106, 'plugin_comment_copyright', '', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `slugs`
--

CREATE TABLE `slugs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `key` varchar(255) NOT NULL,
  `reference_id` int(10) UNSIGNED NOT NULL,
  `reference_type` varchar(255) NOT NULL,
  `prefix` varchar(120) DEFAULT '',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `slugs`
--

INSERT INTO `slugs` (`id`, `key`, `reference_id`, `reference_type`, `prefix`, `created_at`, `updated_at`) VALUES
(1, 'homepage', 1, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(2, 'home-2', 2, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(3, 'home-3', 3, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(4, 'blog', 4, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(5, 'category-list', 5, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(6, 'category-grid', 6, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(7, 'category-metro', 7, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(8, 'contact', 8, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(9, 'about-us', 9, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(10, 'cookie-policy', 10, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:24', '2023-02-22 12:16:24'),
(11, 'perfect', 1, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(12, 'new-day', 2, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(13, 'happy-day', 3, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(14, 'nature', 4, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(15, 'morning', 5, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(16, 'photography', 6, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(17, 'building', 7, 'Botble\\Gallery\\Models\\Gallery', 'galleries', '2023-02-22 12:16:28', '2023-02-22 12:16:28'),
(18, 'design', 1, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(19, 'lifestyle', 2, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(20, 'travel-tips', 3, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(21, 'healthy', 4, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(22, 'fashion', 5, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(23, 'hotel', 6, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(24, 'nature', 7, 'Botble\\Blog\\Models\\Category', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(25, 'general', 1, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(26, 'beauty', 2, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(27, 'fashion', 3, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(28, 'lifestyle', 4, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(29, 'travel', 5, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(30, 'business', 6, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(31, 'health', 7, 'Botble\\Blog\\Models\\Tag', 'tag', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(32, 'this-year-enjoy-the-color-of-festival-with-amazing-holi-gifts-ideas', 1, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(33, 'the-world-caters-to-average-people-and-mediocre-lifestyles', 2, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(34, 'not-a-bit-of-hesitation-you-better-think-twice', 3, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(35, 'we-got-a-right-to-pick-a-little-fight-bonanza', 4, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(36, 'my-entrance-exam-was-on-a-book-of-matches', 5, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(37, 'essential-qualities-of-highly-successful-music', 6, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(38, 'why-teamwork-really-makes-the-dream-work', 7, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(39, '9-things-i-love-about-shaving-my-head-during-quarantine', 8, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(40, 'the-litigants-on-the-screen-are-not-actors', 9, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(41, 'imagine-losing-20-pounds-in-14-days', 10, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(42, 'are-you-still-using-that-slow-old-typewriter', 11, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(43, 'a-skin-cream-thats-proven-to-work', 12, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(44, '10-reasons-to-start-your-own-profitable-website', 13, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(45, 'level-up-your-live-streams-with-automated-captions-and-more', 14, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(46, 'simple-ways-to-reduce-your-unwanted-wrinkles', 15, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(47, 'apple-imac-with-retina-5k-display-review', 16, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:43', '2023-02-22 12:16:43'),
(48, '10000-web-site-visitors-in-one-monthguaranteed', 17, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(49, 'unlock-the-secrets-of-selling-high-ticket-items', 18, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(50, '4-expert-tips-on-how-to-choose-the-right-mens-wallet', 19, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(51, 'sexy-clutches-how-to-buy-wear-a-designer-clutch-bag', 20, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:16:44', '2023-02-22 12:16:44'),
(52, 'john-smith', 1, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(53, 'valerie-schmidt', 2, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(54, 'abigail-hill', 3, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(55, 'rubye-schowalter', 4, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(56, 'amir-keeling', 5, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(57, 'zion-schmeler', 6, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:49', '2023-02-22 12:16:49'),
(58, 'rebeka-rutherford', 7, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(59, 'carter-mante', 8, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(60, 'delbert-donnelly', 9, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(61, 'jessica-cummerata', 10, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(62, 'eleanora-white', 11, 'Botble\\Member\\Models\\Member', 'author', '2023-02-22 12:16:50', '2023-02-22 12:16:50'),
(63, 'editors-picked', 1, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(64, 'recommended-posts', 2, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(65, 'bai-viet-hay', 3, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(66, 'recommended-posts', 4, 'Botble\\Page\\Models\\Page', '', '2023-02-22 12:16:56', '2023-02-22 12:16:56'),
(67, 'introduction-to-angular', 21, 'Botble\\Blog\\Models\\Post', '', '2023-02-22 12:27:54', '2023-02-22 12:27:54'),
(68, 'installation-of-angular', 22, 'Botble\\Blog\\Models\\Post', '', '2023-02-23 12:23:05', '2023-02-23 12:23:05'),
(69, 'file-and-folder-structure-of-angular', 23, 'Botble\\Blog\\Models\\Post', '', '2023-02-24 13:06:05', '2023-02-24 13:06:05'),
(70, 'angular-components', 24, 'Botble\\Blog\\Models\\Post', '', '2023-02-25 11:47:14', '2023-02-25 11:47:14'),
(71, 'angular-lifecycle-hooks', 25, 'Botble\\Blog\\Models\\Post', '', '2023-02-26 02:06:08', '2023-02-26 02:06:08'),
(72, 'interpolation-in-angular', 26, 'Botble\\Blog\\Models\\Post', '', '2023-02-26 09:00:13', '2023-02-26 09:00:13'),
(73, 'angular-data-binding', 27, 'Botble\\Blog\\Models\\Post', '', '2023-02-27 11:06:29', '2023-02-27 11:06:29'),
(74, 'angular-directives', 28, 'Botble\\Blog\\Models\\Post', '', '2023-02-28 10:14:20', '2023-02-28 10:14:20'),
(75, 'packagejson', 29, 'Botble\\Blog\\Models\\Post', '', '2023-03-03 11:54:06', '2023-03-03 11:54:06'),
(76, 'passing-data-between-parent-and-child-component', 30, 'Botble\\Blog\\Models\\Post', '', '2023-03-05 07:06:30', '2023-03-05 07:06:30'),
(77, 'reference-variables', 31, 'Botble\\Blog\\Models\\Post', '', '2023-03-06 10:51:50', '2023-03-06 10:51:50');

-- --------------------------------------------------------

--
-- Table structure for table `tags`
--

CREATE TABLE `tags` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(120) NOT NULL,
  `author_id` int(11) NOT NULL,
  `author_type` varchar(255) NOT NULL DEFAULT 'Botble\\ACL\\Models\\User',
  `description` varchar(400) DEFAULT '',
  `status` varchar(60) NOT NULL DEFAULT 'published',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `tags`
--

INSERT INTO `tags` (`id`, `name`, `author_id`, `author_type`, `description`, `status`, `created_at`, `updated_at`) VALUES
(1, 'General', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(2, 'Beauty', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(3, 'Fashion', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(4, 'Lifestyle', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(5, 'Travel', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(6, 'Business', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42'),
(7, 'Health', 1, 'Botble\\ACL\\Models\\User', '', 'published', '2023-02-22 12:16:42', '2023-02-22 12:16:42');

-- --------------------------------------------------------

--
-- Table structure for table `tags_translations`
--

CREATE TABLE `tags_translations` (
  `lang_code` varchar(191) NOT NULL,
  `tags_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(400) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `tags_translations`
--

INSERT INTO `tags_translations` (`lang_code`, `tags_id`, `name`, `description`) VALUES
('vi', 1, 'Chung', NULL),
('vi', 2, 'Làm đẹp', NULL),
('vi', 3, 'Thời trang', NULL),
('vi', 4, 'Du lịch và ẩm thực', NULL),
('vi', 5, 'Kinh doanh', NULL),
('vi', 6, 'Sức khỏe', NULL),
('vi', 7, 'Thời sự', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `translations`
--

CREATE TABLE `translations` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `status` int(11) NOT NULL DEFAULT 0,
  `locale` varchar(191) NOT NULL,
  `group` varchar(191) NOT NULL,
  `key` varchar(191) NOT NULL,
  `value` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `email` varchar(191) NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(191) DEFAULT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `first_name` varchar(191) DEFAULT NULL,
  `last_name` varchar(191) DEFAULT NULL,
  `username` varchar(60) DEFAULT NULL,
  `avatar_id` int(10) UNSIGNED DEFAULT NULL,
  `super_user` tinyint(1) NOT NULL DEFAULT 0,
  `manage_supers` tinyint(1) NOT NULL DEFAULT 0,
  `permissions` text DEFAULT NULL,
  `last_login` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `email`, `email_verified_at`, `password`, `remember_token`, `created_at`, `updated_at`, `first_name`, `last_name`, `username`, `avatar_id`, `super_user`, `manage_supers`, `permissions`, `last_login`) VALUES
(1, 'admin@thesky9.com', NULL, '$2y$10$2eaYTq2cUQxP0C2tOBD77OPddG8bdv0UeavYJDxXcJrO//iGe5twi', 'XqCnxPZhhgwZoIjEfxucgd2AgyyWTd4emgU4uKWHx9KI2DFErN56x2NTLUrQ', '2023-02-22 12:16:21', '2023-02-25 00:06:10', 'System', 'Admin', 'admin', NULL, 1, 1, NULL, '2023-02-25 00:06:10');

-- --------------------------------------------------------

--
-- Table structure for table `user_meta`
--

CREATE TABLE `user_meta` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `key` varchar(191) DEFAULT NULL,
  `value` varchar(191) DEFAULT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `widgets`
--

CREATE TABLE `widgets` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `widget_id` varchar(120) NOT NULL,
  `sidebar_id` varchar(120) NOT NULL,
  `theme` varchar(120) NOT NULL,
  `position` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `data` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `widgets`
--

INSERT INTO `widgets` (`id`, `widget_id`, `sidebar_id`, `theme`, `position`, `data`, `created_at`, `updated_at`) VALUES
(1, 'SocialsWidget', 'primary_sidebar', 'ultra', 0, '{\"id\":\"SocialsWidget\",\"title\":\"Follow us\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(2, 'AdsWidget', 'primary_sidebar', 'ultra', 0, '{\"id\":\"AdsWidget\",\"ads_location\":\"top-sidebar-ads\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(3, 'CategoriesMenuWidget', 'primary_sidebar', 'ultra', 0, '{\"id\":\"CategoriesMenuWidget\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(4, 'LastestPostsWidget', 'primary_sidebar', 'ultra', 0, '{\"id\":\"LastestPostsWidget\",\"name\":\"Lastest Post\",\"number_display\":6}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(5, 'TagsWidget', 'primary_sidebar', 'ultra', 1, '{\"id\":\"TagsWidget\",\"name\":\"Tags\",\"number_display\":10}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(6, 'AdsWidget', 'primary_sidebar', 'ultra', 1, '{\"id\":\"AdsWidget\",\"ads_location\":\"bottom-sidebar-ads\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(7, 'AboutWidget', 'footer_sidebar_1', 'ultra', 1, '{\"id\":\"AboutWidget\",\"name\":\"About me\",\"description\":\"Introduction about the author of this blog. You should write because you love the shape of stories and sentences and the creation of different words on a page. Writing comes from reading, and reading is the finest teacher of how to write.\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(8, 'PopularPostsWidget', 'footer_sidebar_2', 'ultra', 1, '{\"id\":\"PopularPostsWidget\",\"name\":\"Popular Posts\",\"name_custom_class\":\"color-white\",\"number_display\":3}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(9, 'CustomMenuWidget', 'footer_sidebar_3', 'ultra', 1, '{\"id\":\"CustomMenuWidget\",\"name\":\"Quick links\",\"menu_id\":\"quick-links\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(10, 'TagsWidget', 'footer_sidebar_3', 'ultra', 1, '{\"id\":\"TagsWidget\",\"name\":\"Tags\",\"name_custom_class\":\"color-white\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(11, 'NewsletterWidget', 'footer_sidebar_4', 'ultra', 1, '{\"id\":\"NewsletterWidget\",\"name\":\"Newsletter\",\"description\":\"Subscribe to Our Newsletter\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(12, 'CopyrightFooterMenuWidget', 'footer_copyright_menu', 'ultra', 1, '{\"id\":\"CopyrightFooterMenuWidget\",\"name\":\"Copyright footer Menu\",\"menu_id\":\"quick-links\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(13, 'SocialsWidget', 'primary_sidebar', 'ultra-vi', 0, '{\"id\":\"SocialsWidget\",\"title\":\"Follow us\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(14, 'AdsWidget', 'primary_sidebar', 'ultra-vi', 0, '{\"id\":\"AdsWidget\",\"ads_location\":\"top-sidebar-ads\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(15, 'CategoriesMenuWidget', 'primary_sidebar', 'ultra-vi', 0, '{\"id\":\"CategoriesMenuWidget\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(16, 'LastestPostsWidget', 'primary_sidebar', 'ultra-vi', 0, '{\"id\":\"LastestPostsWidget\",\"name\":\"B\\u00e0i vi\\u1ebft m\\u1edbi nh\\u1ea5t\",\"number_display\":6}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(17, 'TagsWidget', 'primary_sidebar', 'ultra-vi', 1, '{\"id\":\"TagsWidget\",\"name\":\"Th\\u1ebb\",\"number_display\":10}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(18, 'AdsWidget', 'primary_sidebar', 'ultra-vi', 1, '{\"id\":\"AdsWidget\",\"ads_location\":\"bottom-sidebar-ads\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(19, 'AboutWidget', 'footer_sidebar_1', 'ultra-vi', 1, '{\"id\":\"AboutWidget\",\"name\":\"V\\u1ec1 ch\\u00fang t\\u00f4i\",\"description\":\"Introduction about the author of this blog. You should write because you love the shape of stories and sentences and the creation of different words on a page. Writing comes from reading, and reading is the finest teacher of how to write.\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(20, 'PopularPostsWidget', 'footer_sidebar_2', 'ultra-vi', 1, '{\"id\":\"PopularPostsWidget\",\"name\":\"N\\u1ed5i b\\u1eadt\",\"name_custom_class\":\"color-white\",\"number_display\":3}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(21, 'CustomMenuWidget', 'footer_sidebar_3', 'ultra-vi', 1, '{\"id\":\"CustomMenuWidget\",\"name\":\"Quick links\",\"menu_id\":\"quick-links\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(22, 'TagsWidget', 'footer_sidebar_3', 'ultra-vi', 1, '{\"id\":\"TagsWidget\",\"name\":\"Tags\",\"name_custom_class\":\"color-white\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(23, 'NewsletterWidget', 'footer_sidebar_4', 'ultra-vi', 1, '{\"id\":\"NewsletterWidget\",\"name\":\"Newsletter\",\"description\":\"Subscribe to Our Newsletter\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52'),
(24, 'CopyrightFooterMenuWidget', 'footer_copyright_menu', 'ultra-vi', 1, '{\"id\":\"CopyrightFooterMenuWidget\",\"name\":\"Copyright footer Menu\",\"menu_id\":\"quick-links\"}', '2023-02-22 12:16:52', '2023-02-22 12:16:52');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `activations`
--
ALTER TABLE `activations`
  ADD PRIMARY KEY (`id`),
  ADD KEY `activations_user_id_index` (`user_id`);

--
-- Indexes for table `ads`
--
ALTER TABLE `ads`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `ads_key_unique` (`key`);

--
-- Indexes for table `ads_translations`
--
ALTER TABLE `ads_translations`
  ADD PRIMARY KEY (`lang_code`,`ads_id`);

--
-- Indexes for table `audit_histories`
--
ALTER TABLE `audit_histories`
  ADD PRIMARY KEY (`id`),
  ADD KEY `audit_histories_user_id_index` (`user_id`),
  ADD KEY `audit_histories_module_index` (`module`);

--
-- Indexes for table `bb_comments`
--
ALTER TABLE `bb_comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `bb_comment_likes`
--
ALTER TABLE `bb_comment_likes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `bb_comment_likes_comment_id_index` (`comment_id`),
  ADD KEY `bb_comment_likes_user_id_index` (`user_id`);

--
-- Indexes for table `bb_comment_recommends`
--
ALTER TABLE `bb_comment_recommends`
  ADD PRIMARY KEY (`id`),
  ADD KEY `bb_comment_recommends_user_id_index` (`user_id`);

--
-- Indexes for table `bb_comment_users`
--
ALTER TABLE `bb_comment_users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `bb_comment_users_email_unique` (`email`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_id` (`parent_id`),
  ADD KEY `status` (`status`),
  ADD KEY `created_at` (`created_at`);

--
-- Indexes for table `categories_translations`
--
ALTER TABLE `categories_translations`
  ADD PRIMARY KEY (`lang_code`,`categories_id`);

--
-- Indexes for table `contacts`
--
ALTER TABLE `contacts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `contact_replies`
--
ALTER TABLE `contact_replies`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `dashboard_widgets`
--
ALTER TABLE `dashboard_widgets`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `dashboard_widget_settings`
--
ALTER TABLE `dashboard_widget_settings`
  ADD PRIMARY KEY (`id`),
  ADD KEY `dashboard_widget_settings_user_id_index` (`user_id`),
  ADD KEY `dashboard_widget_settings_widget_id_index` (`widget_id`);

--
-- Indexes for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `failed_jobs_uuid_unique` (`uuid`);

--
-- Indexes for table `favorite_posts`
--
ALTER TABLE `favorite_posts`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `favorite_posts_post_id_user_id_type_unique` (`post_id`,`user_id`,`type`);

--
-- Indexes for table `galleries`
--
ALTER TABLE `galleries`
  ADD PRIMARY KEY (`id`),
  ADD KEY `galleries_user_id_index` (`user_id`);

--
-- Indexes for table `galleries_translations`
--
ALTER TABLE `galleries_translations`
  ADD PRIMARY KEY (`lang_code`,`galleries_id`);

--
-- Indexes for table `gallery_meta`
--
ALTER TABLE `gallery_meta`
  ADD PRIMARY KEY (`id`),
  ADD KEY `gallery_meta_reference_id_index` (`reference_id`);

--
-- Indexes for table `gallery_meta_translations`
--
ALTER TABLE `gallery_meta_translations`
  ADD PRIMARY KEY (`lang_code`,`gallery_meta_id`);

--
-- Indexes for table `jobs`
--
ALTER TABLE `jobs`
  ADD PRIMARY KEY (`id`),
  ADD KEY `jobs_queue_index` (`queue`);

--
-- Indexes for table `languages`
--
ALTER TABLE `languages`
  ADD PRIMARY KEY (`lang_id`);

--
-- Indexes for table `language_meta`
--
ALTER TABLE `language_meta`
  ADD PRIMARY KEY (`lang_meta_id`),
  ADD KEY `language_meta_reference_id_index` (`reference_id`);

--
-- Indexes for table `media_files`
--
ALTER TABLE `media_files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `media_files_user_id_index` (`user_id`),
  ADD KEY `media_files_index` (`folder_id`,`user_id`,`created_at`);

--
-- Indexes for table `media_folders`
--
ALTER TABLE `media_folders`
  ADD PRIMARY KEY (`id`),
  ADD KEY `media_folders_user_id_index` (`user_id`),
  ADD KEY `media_folders_index` (`parent_id`,`user_id`,`created_at`);

--
-- Indexes for table `media_settings`
--
ALTER TABLE `media_settings`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `members`
--
ALTER TABLE `members`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `members_email_unique` (`email`);

--
-- Indexes for table `member_activity_logs`
--
ALTER TABLE `member_activity_logs`
  ADD PRIMARY KEY (`id`),
  ADD KEY `member_activity_logs_member_id_index` (`member_id`);

--
-- Indexes for table `member_password_resets`
--
ALTER TABLE `member_password_resets`
  ADD KEY `member_password_resets_email_index` (`email`),
  ADD KEY `member_password_resets_token_index` (`token`);

--
-- Indexes for table `menus`
--
ALTER TABLE `menus`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `menus_slug_unique` (`slug`);

--
-- Indexes for table `menu_locations`
--
ALTER TABLE `menu_locations`
  ADD PRIMARY KEY (`id`),
  ADD KEY `menu_locations_menu_id_created_at_index` (`menu_id`,`created_at`);

--
-- Indexes for table `menu_nodes`
--
ALTER TABLE `menu_nodes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `menu_nodes_menu_id_index` (`menu_id`),
  ADD KEY `menu_nodes_parent_id_index` (`parent_id`),
  ADD KEY `reference_id` (`reference_id`),
  ADD KEY `reference_type` (`reference_type`);

--
-- Indexes for table `meta_boxes`
--
ALTER TABLE `meta_boxes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `meta_boxes_reference_id_index` (`reference_id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `newsletters`
--
ALTER TABLE `newsletters`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `oauth_access_tokens`
--
ALTER TABLE `oauth_access_tokens`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_access_tokens_user_id_index` (`user_id`);

--
-- Indexes for table `oauth_auth_codes`
--
ALTER TABLE `oauth_auth_codes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_auth_codes_user_id_index` (`user_id`);

--
-- Indexes for table `oauth_clients`
--
ALTER TABLE `oauth_clients`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_clients_user_id_index` (`user_id`);

--
-- Indexes for table `oauth_personal_access_clients`
--
ALTER TABLE `oauth_personal_access_clients`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `oauth_refresh_tokens`
--
ALTER TABLE `oauth_refresh_tokens`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_refresh_tokens_access_token_id_index` (`access_token_id`);

--
-- Indexes for table `pages`
--
ALTER TABLE `pages`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `pages_translations`
--
ALTER TABLE `pages_translations`
  ADD PRIMARY KEY (`lang_code`,`pages_id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Indexes for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `personal_access_tokens_token_unique` (`token`),
  ADD KEY `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type`,`tokenable_id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `status` (`status`),
  ADD KEY `author_id` (`author_id`),
  ADD KEY `author_type` (`author_type`),
  ADD KEY `created_at` (`created_at`);

--
-- Indexes for table `posts_translations`
--
ALTER TABLE `posts_translations`
  ADD PRIMARY KEY (`lang_code`,`posts_id`);

--
-- Indexes for table `post_categories`
--
ALTER TABLE `post_categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post_collections`
--
ALTER TABLE `post_collections`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post_collections_posts`
--
ALTER TABLE `post_collections_posts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post_tags`
--
ALTER TABLE `post_tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `request_logs`
--
ALTER TABLE `request_logs`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `revisions`
--
ALTER TABLE `revisions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `revisions_revisionable_id_revisionable_type_index` (`revisionable_id`,`revisionable_type`);

--
-- Indexes for table `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `roles_slug_unique` (`slug`),
  ADD KEY `roles_created_by_index` (`created_by`),
  ADD KEY `roles_updated_by_index` (`updated_by`);

--
-- Indexes for table `role_users`
--
ALTER TABLE `role_users`
  ADD PRIMARY KEY (`id`),
  ADD KEY `role_users_user_id_index` (`user_id`),
  ADD KEY `role_users_role_id_index` (`role_id`);

--
-- Indexes for table `settings`
--
ALTER TABLE `settings`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `settings_key_unique` (`key`);

--
-- Indexes for table `slugs`
--
ALTER TABLE `slugs`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tags_translations`
--
ALTER TABLE `tags_translations`
  ADD PRIMARY KEY (`lang_code`,`tags_id`);

--
-- Indexes for table `translations`
--
ALTER TABLE `translations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`),
  ADD UNIQUE KEY `users_username_unique` (`username`);

--
-- Indexes for table `user_meta`
--
ALTER TABLE `user_meta`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_meta_user_id_index` (`user_id`);

--
-- Indexes for table `widgets`
--
ALTER TABLE `widgets`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `activations`
--
ALTER TABLE `activations`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `ads`
--
ALTER TABLE `ads`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `audit_histories`
--
ALTER TABLE `audit_histories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=162;

--
-- AUTO_INCREMENT for table `bb_comments`
--
ALTER TABLE `bb_comments`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=49;

--
-- AUTO_INCREMENT for table `bb_comment_likes`
--
ALTER TABLE `bb_comment_likes`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `bb_comment_recommends`
--
ALTER TABLE `bb_comment_recommends`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `bb_comment_users`
--
ALTER TABLE `bb_comment_users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `contacts`
--
ALTER TABLE `contacts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `contact_replies`
--
ALTER TABLE `contact_replies`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `dashboard_widgets`
--
ALTER TABLE `dashboard_widgets`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `dashboard_widget_settings`
--
ALTER TABLE `dashboard_widget_settings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `favorite_posts`
--
ALTER TABLE `favorite_posts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `galleries`
--
ALTER TABLE `galleries`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `gallery_meta`
--
ALTER TABLE `gallery_meta`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=78;

--
-- AUTO_INCREMENT for table `jobs`
--
ALTER TABLE `jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `languages`
--
ALTER TABLE `languages`
  MODIFY `lang_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `language_meta`
--
ALTER TABLE `language_meta`
  MODIFY `lang_meta_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `media_files`
--
ALTER TABLE `media_files`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=89;

--
-- AUTO_INCREMENT for table `media_folders`
--
ALTER TABLE `media_folders`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `media_settings`
--
ALTER TABLE `media_settings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `members`
--
ALTER TABLE `members`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT for table `member_activity_logs`
--
ALTER TABLE `member_activity_logs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `menus`
--
ALTER TABLE `menus`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `menu_locations`
--
ALTER TABLE `menu_locations`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `menu_nodes`
--
ALTER TABLE `menu_nodes`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=44;

--
-- AUTO_INCREMENT for table `meta_boxes`
--
ALTER TABLE `meta_boxes`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=125;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=49;

--
-- AUTO_INCREMENT for table `newsletters`
--
ALTER TABLE `newsletters`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `oauth_clients`
--
ALTER TABLE `oauth_clients`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `oauth_personal_access_clients`
--
ALTER TABLE `oauth_personal_access_clients`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `pages`
--
ALTER TABLE `pages`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=32;

--
-- AUTO_INCREMENT for table `post_categories`
--
ALTER TABLE `post_categories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=152;

--
-- AUTO_INCREMENT for table `post_collections`
--
ALTER TABLE `post_collections`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `post_collections_posts`
--
ALTER TABLE `post_collections_posts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT for table `post_tags`
--
ALTER TABLE `post_tags`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=141;

--
-- AUTO_INCREMENT for table `request_logs`
--
ALTER TABLE `request_logs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `revisions`
--
ALTER TABLE `revisions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=62;

--
-- AUTO_INCREMENT for table `roles`
--
ALTER TABLE `roles`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `role_users`
--
ALTER TABLE `role_users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `settings`
--
ALTER TABLE `settings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=107;

--
-- AUTO_INCREMENT for table `slugs`
--
ALTER TABLE `slugs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=78;

--
-- AUTO_INCREMENT for table `tags`
--
ALTER TABLE `tags`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `translations`
--
ALTER TABLE `translations`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `user_meta`
--
ALTER TABLE `user_meta`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `widgets`
--
ALTER TABLE `widgets`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
